

Microchip MPLAB XC8 Assembler V3.00 build 20241204225717 
                                                                                               Fri Mar 28 17:52:52 2025

Microchip MPLAB XC8 C Compiler v3.00 (Free license) build 20241204225717 Og9 
     1                           	processor	18F4321
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	idataCOMRAM,global,class=CODE,space=0,delta=1,noexec
     6                           	psect	idataBANK0,global,class=CODE,space=0,delta=1,noexec
     7                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,space=0,delta=1,noexec
     8                           	psect	cinit,global,reloc=2,class=CODE,space=0,delta=1
     9                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    10                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    11                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    12                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    13                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    14                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    15                           	psect	text0,global,reloc=2,class=CODE,space=0,delta=1
    16                           	psect	text1,global,reloc=2,class=CODE,space=0,delta=1
    17                           	psect	text2,global,reloc=2,class=CODE,space=0,delta=1
    18                           	psect	text3,global,reloc=2,class=CODE,space=0,delta=1
    19                           	psect	text4,global,reloc=2,class=CODE,space=0,delta=1
    20                           	psect	text5,global,reloc=2,class=CODE,space=0,delta=1
    21                           	psect	text6,global,reloc=2,class=CODE,space=0,delta=1
    22                           	psect	text7,global,reloc=2,class=CODE,space=0,delta=1
    23                           	psect	text8,global,reloc=2,class=CODE,space=0,delta=1
    24                           	psect	text9,global,reloc=2,class=CODE,space=0,delta=1
    25                           	psect	text10,global,reloc=2,class=CODE,space=0,delta=1
    26                           	psect	text11,global,reloc=2,class=CODE,space=0,delta=1
    27                           	psect	text12,global,reloc=2,class=CODE,space=0,delta=1
    28                           	psect	text13,global,reloc=2,class=CODE,space=0,delta=1
    29                           	psect	text14,global,reloc=2,class=CODE,space=0,delta=1
    30                           	psect	text15,global,reloc=2,class=CODE,space=0,delta=1
    31                           	psect	text16,global,reloc=2,class=CODE,space=0,delta=1
    32                           	psect	text17,global,reloc=2,class=CODE,space=0,delta=1
    33                           	psect	text18,global,reloc=2,class=CODE,space=0,delta=1
    34                           	psect	text19,global,reloc=2,class=CODE,space=0,delta=1
    35                           	psect	text20,global,reloc=2,class=CODE,space=0,delta=1
    36                           	psect	text21,global,reloc=2,class=CODE,space=0,delta=1
    37                           	psect	text22,global,reloc=2,class=CODE,space=0,delta=1
    38                           	psect	text23,global,reloc=2,class=CODE,space=0,delta=1
    39                           	psect	text24,global,reloc=2,class=CODE,space=0,delta=1
    40                           	psect	text25,global,reloc=2,class=CODE,space=0,delta=1
    41                           	psect	text26,global,reloc=2,class=CODE,space=0,delta=1
    42                           	psect	text27,global,reloc=2,class=CODE,space=0,delta=1
    43                           	psect	text28,global,reloc=2,class=CODE,space=0,delta=1
    44                           	psect	text29,global,reloc=2,class=CODE,space=0,delta=1
    45                           	psect	text30,global,reloc=2,class=CODE,space=0,delta=1
    46                           	psect	text31,global,reloc=2,class=CODE,space=0,delta=1
    47                           	psect	text32,global,reloc=2,class=CODE,space=0,delta=1
    48                           	psect	text33,global,reloc=2,class=CODE,space=0,delta=1
    49                           	psect	text34,global,reloc=2,class=CODE,space=0,delta=1
    50                           	psect	text35,global,reloc=2,class=CODE,space=0,delta=1
    51                           	psect	text36,global,reloc=2,class=CODE,space=0,delta=1
    52                           	psect	text37,global,reloc=2,class=CODE,space=0,delta=1
    53                           	psect	text38,global,reloc=2,class=CODE,space=0,delta=1
    54                           	psect	text39,global,reloc=2,class=CODE,space=0,delta=1
    55                           	psect	text40,global,reloc=2,class=CODE,space=0,delta=1
    56                           	psect	text41,global,reloc=2,class=CODE,space=0,delta=1
    57                           	psect	text42,global,reloc=2,class=CODE,space=0,delta=1
    58                           	psect	text43,global,reloc=2,class=CODE,space=0,delta=1
    59                           	psect	text44,global,reloc=2,class=CODE,space=0,delta=1
    60                           	psect	text45,global,reloc=2,class=CODE,space=0,delta=1
    61                           	psect	text46,global,reloc=2,class=CODE,space=0,delta=1
    62                           	psect	text47,global,reloc=2,class=CODE,space=0,delta=1
    63                           	psect	text48,global,reloc=2,class=CODE,space=0,delta=1
    64                           	psect	text49,global,reloc=2,class=CODE,space=0,delta=1
    65                           	psect	intcodelo,global,reloc=2,class=CODE,space=0,delta=1
    66                           	psect	intcode,global,reloc=2,class=CODE,space=0,delta=1
    67                           	psect	intcode_body,global,reloc=2,class=CODE,space=0,delta=1
    68                           	psect	text52,global,reloc=2,class=CODE,space=0,delta=1
    69                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    70                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    71                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1,lowdata
    72                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    73                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    74   000000                     
    75                           ; Generated 05/12/2024 GMT
    76                           ; 
    77                           ; Copyright Â© 2024, Microchip Technology Inc. and its subsidiaries ("Microchip")
    78                           ; All rights reserved.
    79                           ; 
    80                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    81                           ; 
    82                           ; Redistribution and use in source and binary forms, with or without modification, are
    83                           ; permitted provided that the following conditions are met:
    84                           ; 
    85                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    86                           ;        conditions and the following disclaimer.
    87                           ; 
    88                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    89                           ;        of conditions and the following disclaimer in the documentation and/or other
    90                           ;        materials provided with the distribution. Publication is not required when
    91                           ;        this file is used in an embedded application.
    92                           ; 
    93                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    94                           ;        software without specific prior written permission.
    95                           ; 
    96                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    97                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    98                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    99                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   100                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   101                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   102                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   103                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   104                           ; 
   105                           ; 
   106                           ; Code-generator required, PIC18F4321 Definitions
   107                           ; 
   108                           ; SFR Addresses
   109   000FE0                     bsr             equ	4064
   110   000FE9                     fsr0            equ	4073
   111   000FEA                     fsr0h           equ	4074
   112   000FE9                     fsr0l           equ	4073
   113   000FE1                     fsr1            equ	4065
   114   000FE2                     fsr1h           equ	4066
   115   000FE1                     fsr1l           equ	4065
   116   000FD9                     fsr2            equ	4057
   117   000FDA                     fsr2h           equ	4058
   118   000FD9                     fsr2l           equ	4057
   119   000FEF                     indf0           equ	4079
   120   000FE7                     indf1           equ	4071
   121   000FDF                     indf2           equ	4063
   122   000FF2                     intcon          equ	4082
   123   000000                     nvmcon          equ	0
   124   000FF9                     pcl             equ	4089
   125   000FFA                     pclath          equ	4090
   126   000FFB                     pclatu          equ	4091
   127   000FEB                     plusw0          equ	4075
   128   000FE3                     plusw1          equ	4067
   129   000FDB                     plusw2          equ	4059
   130   000FED                     postdec0        equ	4077
   131   000FE5                     postdec1        equ	4069
   132   000FDD                     postdec2        equ	4061
   133   000FEE                     postinc0        equ	4078
   134   000FE6                     postinc1        equ	4070
   135   000FDE                     postinc2        equ	4062
   136   000FEC                     preinc0         equ	4076
   137   000FE4                     preinc1         equ	4068
   138   000FDC                     preinc2         equ	4060
   139   000FF3                     prod            equ	4083
   140   000FF4                     prodh           equ	4084
   141   000FF3                     prodl           equ	4083
   142   000FD8                     status          equ	4056
   143   000FF5                     tablat          equ	4085
   144   000FF6                     tblptr          equ	4086
   145   000FF7                     tblptrh         equ	4087
   146   000FF6                     tblptrl         equ	4086
   147   000FF8                     tblptru         equ	4088
   148   000FFD                     tosl            equ	4093
   149   000FE8                     wreg            equ	4072
   150   000F80                     PORTA           equ	3968	;# 
   151   000F81                     PORTB           equ	3969	;# 
   152   000F82                     PORTC           equ	3970	;# 
   153   000F83                     PORTD           equ	3971	;# 
   154   000F84                     PORTE           equ	3972	;# 
   155   000F89                     LATA            equ	3977	;# 
   156   000F8A                     LATB            equ	3978	;# 
   157   000F8B                     LATC            equ	3979	;# 
   158   000F8C                     LATD            equ	3980	;# 
   159   000F8D                     LATE            equ	3981	;# 
   160   000F92                     TRISA           equ	3986	;# 
   161   000F92                     DDRA            equ	3986	;# 
   162   000F93                     TRISB           equ	3987	;# 
   163   000F93                     DDRB            equ	3987	;# 
   164   000F94                     TRISC           equ	3988	;# 
   165   000F94                     DDRC            equ	3988	;# 
   166   000F95                     TRISD           equ	3989	;# 
   167   000F95                     DDRD            equ	3989	;# 
   168   000F96                     TRISE           equ	3990	;# 
   169   000F96                     DDRE            equ	3990	;# 
   170   000F9B                     OSCTUNE         equ	3995	;# 
   171   000F9D                     PIE1            equ	3997	;# 
   172   000F9E                     PIR1            equ	3998	;# 
   173   000F9F                     IPR1            equ	3999	;# 
   174   000FA0                     PIE2            equ	4000	;# 
   175   000FA1                     PIR2            equ	4001	;# 
   176   000FA2                     IPR2            equ	4002	;# 
   177   000FA6                     EECON1          equ	4006	;# 
   178   000FA7                     EECON2          equ	4007	;# 
   179   000FA8                     EEDATA          equ	4008	;# 
   180   000FA9                     EEADR           equ	4009	;# 
   181   000FAB                     RCSTA           equ	4011	;# 
   182   000FAB                     RCSTA1          equ	4011	;# 
   183   000FAC                     TXSTA           equ	4012	;# 
   184   000FAC                     TXSTA1          equ	4012	;# 
   185   000FAD                     TXREG           equ	4013	;# 
   186   000FAD                     TXREG1          equ	4013	;# 
   187   000FAE                     RCREG           equ	4014	;# 
   188   000FAE                     RCREG1          equ	4014	;# 
   189   000FAF                     SPBRG           equ	4015	;# 
   190   000FAF                     SPBRG1          equ	4015	;# 
   191   000FB0                     SPBRGH          equ	4016	;# 
   192   000FB1                     T3CON           equ	4017	;# 
   193   000FB2                     TMR3            equ	4018	;# 
   194   000FB2                     TMR3L           equ	4018	;# 
   195   000FB3                     TMR3H           equ	4019	;# 
   196   000FB4                     CMCON           equ	4020	;# 
   197   000FB5                     CVRCON          equ	4021	;# 
   198   000FB6                     ECCP1AS         equ	4022	;# 
   199   000FB7                     ECCP1DEL        equ	4023	;# 
   200   000FB7                     PWM1CON         equ	4023	;# 
   201   000FB8                     BAUDCON         equ	4024	;# 
   202   000FB8                     BAUDCTL         equ	4024	;# 
   203   000FBA                     CCP2CON         equ	4026	;# 
   204   000FBB                     CCPR2           equ	4027	;# 
   205   000FBB                     CCPR2L          equ	4027	;# 
   206   000FBC                     CCPR2H          equ	4028	;# 
   207   000FBD                     CCP1CON         equ	4029	;# 
   208   000FBD                     ECCP1CON        equ	4029	;# 
   209   000FBE                     CCPR1           equ	4030	;# 
   210   000FBE                     CCPR1L          equ	4030	;# 
   211   000FBF                     CCPR1H          equ	4031	;# 
   212   000FC0                     ADCON2          equ	4032	;# 
   213   000FC1                     ADCON1          equ	4033	;# 
   214   000FC2                     ADCON0          equ	4034	;# 
   215   000FC3                     ADRES           equ	4035	;# 
   216   000FC3                     ADRESL          equ	4035	;# 
   217   000FC4                     ADRESH          equ	4036	;# 
   218   000FC5                     SSPCON2         equ	4037	;# 
   219   000FC6                     SSPCON1         equ	4038	;# 
   220   000FC7                     SSPSTAT         equ	4039	;# 
   221   000FC8                     SSPADD          equ	4040	;# 
   222   000FC9                     SSPBUF          equ	4041	;# 
   223   000FCA                     T2CON           equ	4042	;# 
   224   000FCB                     PR2             equ	4043	;# 
   225   000FCB                     MEMCON          equ	4043	;# 
   226   000FCC                     TMR2            equ	4044	;# 
   227   000FCD                     T1CON           equ	4045	;# 
   228   000FCE                     TMR1            equ	4046	;# 
   229   000FCE                     TMR1L           equ	4046	;# 
   230   000FCF                     TMR1H           equ	4047	;# 
   231   000FD0                     RCON            equ	4048	;# 
   232   000FD1                     WDTCON          equ	4049	;# 
   233   000FD2                     HLVDCON         equ	4050	;# 
   234   000FD2                     LVDCON          equ	4050	;# 
   235   000FD3                     OSCCON          equ	4051	;# 
   236   000FD5                     T0CON           equ	4053	;# 
   237   000FD6                     TMR0            equ	4054	;# 
   238   000FD6                     TMR0L           equ	4054	;# 
   239   000FD7                     TMR0H           equ	4055	;# 
   240   000FD8                     STATUS          equ	4056	;# 
   241   000FD9                     FSR2            equ	4057	;# 
   242   000FD9                     FSR2L           equ	4057	;# 
   243   000FDA                     FSR2H           equ	4058	;# 
   244   000FDB                     PLUSW2          equ	4059	;# 
   245   000FDC                     PREINC2         equ	4060	;# 
   246   000FDD                     POSTDEC2        equ	4061	;# 
   247   000FDE                     POSTINC2        equ	4062	;# 
   248   000FDF                     INDF2           equ	4063	;# 
   249   000FE0                     BSR             equ	4064	;# 
   250   000FE1                     FSR1            equ	4065	;# 
   251   000FE1                     FSR1L           equ	4065	;# 
   252   000FE2                     FSR1H           equ	4066	;# 
   253   000FE3                     PLUSW1          equ	4067	;# 
   254   000FE4                     PREINC1         equ	4068	;# 
   255   000FE5                     POSTDEC1        equ	4069	;# 
   256   000FE6                     POSTINC1        equ	4070	;# 
   257   000FE7                     INDF1           equ	4071	;# 
   258   000FE8                     WREG            equ	4072	;# 
   259   000FE9                     FSR0            equ	4073	;# 
   260   000FE9                     FSR0L           equ	4073	;# 
   261   000FEA                     FSR0H           equ	4074	;# 
   262   000FEB                     PLUSW0          equ	4075	;# 
   263   000FEC                     PREINC0         equ	4076	;# 
   264   000FED                     POSTDEC0        equ	4077	;# 
   265   000FEE                     POSTINC0        equ	4078	;# 
   266   000FEF                     INDF0           equ	4079	;# 
   267   000FF0                     INTCON3         equ	4080	;# 
   268   000FF1                     INTCON2         equ	4081	;# 
   269   000FF2                     INTCON          equ	4082	;# 
   270   000FF3                     PROD            equ	4083	;# 
   271   000FF3                     PRODL           equ	4083	;# 
   272   000FF4                     PRODH           equ	4084	;# 
   273   000FF5                     TABLAT          equ	4085	;# 
   274   000FF6                     TBLPTR          equ	4086	;# 
   275   000FF6                     TBLPTRL         equ	4086	;# 
   276   000FF7                     TBLPTRH         equ	4087	;# 
   277   000FF8                     TBLPTRU         equ	4088	;# 
   278   000FF9                     PCLAT           equ	4089	;# 
   279   000FF9                     PC              equ	4089	;# 
   280   000FF9                     PCL             equ	4089	;# 
   281   000FFA                     PCLATH          equ	4090	;# 
   282   000FFB                     PCLATU          equ	4091	;# 
   283   000FFC                     STKPTR          equ	4092	;# 
   284   000FFD                     TOS             equ	4093	;# 
   285   000FFD                     TOSL            equ	4093	;# 
   286   000FFE                     TOSH            equ	4094	;# 
   287   000FFF                     TOSU            equ	4095	;# 
   288   000F80                     PORTA           equ	3968	;# 
   289   000F81                     PORTB           equ	3969	;# 
   290   000F82                     PORTC           equ	3970	;# 
   291   000F83                     PORTD           equ	3971	;# 
   292   000F84                     PORTE           equ	3972	;# 
   293   000F89                     LATA            equ	3977	;# 
   294   000F8A                     LATB            equ	3978	;# 
   295   000F8B                     LATC            equ	3979	;# 
   296   000F8C                     LATD            equ	3980	;# 
   297   000F8D                     LATE            equ	3981	;# 
   298   000F92                     TRISA           equ	3986	;# 
   299   000F92                     DDRA            equ	3986	;# 
   300   000F93                     TRISB           equ	3987	;# 
   301   000F93                     DDRB            equ	3987	;# 
   302   000F94                     TRISC           equ	3988	;# 
   303   000F94                     DDRC            equ	3988	;# 
   304   000F95                     TRISD           equ	3989	;# 
   305   000F95                     DDRD            equ	3989	;# 
   306   000F96                     TRISE           equ	3990	;# 
   307   000F96                     DDRE            equ	3990	;# 
   308   000F9B                     OSCTUNE         equ	3995	;# 
   309   000F9D                     PIE1            equ	3997	;# 
   310   000F9E                     PIR1            equ	3998	;# 
   311   000F9F                     IPR1            equ	3999	;# 
   312   000FA0                     PIE2            equ	4000	;# 
   313   000FA1                     PIR2            equ	4001	;# 
   314   000FA2                     IPR2            equ	4002	;# 
   315   000FA6                     EECON1          equ	4006	;# 
   316   000FA7                     EECON2          equ	4007	;# 
   317   000FA8                     EEDATA          equ	4008	;# 
   318   000FA9                     EEADR           equ	4009	;# 
   319   000FAB                     RCSTA           equ	4011	;# 
   320   000FAB                     RCSTA1          equ	4011	;# 
   321   000FAC                     TXSTA           equ	4012	;# 
   322   000FAC                     TXSTA1          equ	4012	;# 
   323   000FAD                     TXREG           equ	4013	;# 
   324   000FAD                     TXREG1          equ	4013	;# 
   325   000FAE                     RCREG           equ	4014	;# 
   326   000FAE                     RCREG1          equ	4014	;# 
   327   000FAF                     SPBRG           equ	4015	;# 
   328   000FAF                     SPBRG1          equ	4015	;# 
   329   000FB0                     SPBRGH          equ	4016	;# 
   330   000FB1                     T3CON           equ	4017	;# 
   331   000FB2                     TMR3            equ	4018	;# 
   332   000FB2                     TMR3L           equ	4018	;# 
   333   000FB3                     TMR3H           equ	4019	;# 
   334   000FB4                     CMCON           equ	4020	;# 
   335   000FB5                     CVRCON          equ	4021	;# 
   336   000FB6                     ECCP1AS         equ	4022	;# 
   337   000FB7                     ECCP1DEL        equ	4023	;# 
   338   000FB7                     PWM1CON         equ	4023	;# 
   339   000FB8                     BAUDCON         equ	4024	;# 
   340   000FB8                     BAUDCTL         equ	4024	;# 
   341   000FBA                     CCP2CON         equ	4026	;# 
   342   000FBB                     CCPR2           equ	4027	;# 
   343   000FBB                     CCPR2L          equ	4027	;# 
   344   000FBC                     CCPR2H          equ	4028	;# 
   345   000FBD                     CCP1CON         equ	4029	;# 
   346   000FBD                     ECCP1CON        equ	4029	;# 
   347   000FBE                     CCPR1           equ	4030	;# 
   348   000FBE                     CCPR1L          equ	4030	;# 
   349   000FBF                     CCPR1H          equ	4031	;# 
   350   000FC0                     ADCON2          equ	4032	;# 
   351   000FC1                     ADCON1          equ	4033	;# 
   352   000FC2                     ADCON0          equ	4034	;# 
   353   000FC3                     ADRES           equ	4035	;# 
   354   000FC3                     ADRESL          equ	4035	;# 
   355   000FC4                     ADRESH          equ	4036	;# 
   356   000FC5                     SSPCON2         equ	4037	;# 
   357   000FC6                     SSPCON1         equ	4038	;# 
   358   000FC7                     SSPSTAT         equ	4039	;# 
   359   000FC8                     SSPADD          equ	4040	;# 
   360   000FC9                     SSPBUF          equ	4041	;# 
   361   000FCA                     T2CON           equ	4042	;# 
   362   000FCB                     PR2             equ	4043	;# 
   363   000FCB                     MEMCON          equ	4043	;# 
   364   000FCC                     TMR2            equ	4044	;# 
   365   000FCD                     T1CON           equ	4045	;# 
   366   000FCE                     TMR1            equ	4046	;# 
   367   000FCE                     TMR1L           equ	4046	;# 
   368   000FCF                     TMR1H           equ	4047	;# 
   369   000FD0                     RCON            equ	4048	;# 
   370   000FD1                     WDTCON          equ	4049	;# 
   371   000FD2                     HLVDCON         equ	4050	;# 
   372   000FD2                     LVDCON          equ	4050	;# 
   373   000FD3                     OSCCON          equ	4051	;# 
   374   000FD5                     T0CON           equ	4053	;# 
   375   000FD6                     TMR0            equ	4054	;# 
   376   000FD6                     TMR0L           equ	4054	;# 
   377   000FD7                     TMR0H           equ	4055	;# 
   378   000FD8                     STATUS          equ	4056	;# 
   379   000FD9                     FSR2            equ	4057	;# 
   380   000FD9                     FSR2L           equ	4057	;# 
   381   000FDA                     FSR2H           equ	4058	;# 
   382   000FDB                     PLUSW2          equ	4059	;# 
   383   000FDC                     PREINC2         equ	4060	;# 
   384   000FDD                     POSTDEC2        equ	4061	;# 
   385   000FDE                     POSTINC2        equ	4062	;# 
   386   000FDF                     INDF2           equ	4063	;# 
   387   000FE0                     BSR             equ	4064	;# 
   388   000FE1                     FSR1            equ	4065	;# 
   389   000FE1                     FSR1L           equ	4065	;# 
   390   000FE2                     FSR1H           equ	4066	;# 
   391   000FE3                     PLUSW1          equ	4067	;# 
   392   000FE4                     PREINC1         equ	4068	;# 
   393   000FE5                     POSTDEC1        equ	4069	;# 
   394   000FE6                     POSTINC1        equ	4070	;# 
   395   000FE7                     INDF1           equ	4071	;# 
   396   000FE8                     WREG            equ	4072	;# 
   397   000FE9                     FSR0            equ	4073	;# 
   398   000FE9                     FSR0L           equ	4073	;# 
   399   000FEA                     FSR0H           equ	4074	;# 
   400   000FEB                     PLUSW0          equ	4075	;# 
   401   000FEC                     PREINC0         equ	4076	;# 
   402   000FED                     POSTDEC0        equ	4077	;# 
   403   000FEE                     POSTINC0        equ	4078	;# 
   404   000FEF                     INDF0           equ	4079	;# 
   405   000FF0                     INTCON3         equ	4080	;# 
   406   000FF1                     INTCON2         equ	4081	;# 
   407   000FF2                     INTCON          equ	4082	;# 
   408   000FF3                     PROD            equ	4083	;# 
   409   000FF3                     PRODL           equ	4083	;# 
   410   000FF4                     PRODH           equ	4084	;# 
   411   000FF5                     TABLAT          equ	4085	;# 
   412   000FF6                     TBLPTR          equ	4086	;# 
   413   000FF6                     TBLPTRL         equ	4086	;# 
   414   000FF7                     TBLPTRH         equ	4087	;# 
   415   000FF8                     TBLPTRU         equ	4088	;# 
   416   000FF9                     PCLAT           equ	4089	;# 
   417   000FF9                     PC              equ	4089	;# 
   418   000FF9                     PCL             equ	4089	;# 
   419   000FFA                     PCLATH          equ	4090	;# 
   420   000FFB                     PCLATU          equ	4091	;# 
   421   000FFC                     STKPTR          equ	4092	;# 
   422   000FFD                     TOS             equ	4093	;# 
   423   000FFD                     TOSL            equ	4093	;# 
   424   000FFE                     TOSH            equ	4094	;# 
   425   000FFF                     TOSU            equ	4095	;# 
   426   000F80                     PORTA           equ	3968	;# 
   427   000F81                     PORTB           equ	3969	;# 
   428   000F82                     PORTC           equ	3970	;# 
   429   000F83                     PORTD           equ	3971	;# 
   430   000F84                     PORTE           equ	3972	;# 
   431   000F89                     LATA            equ	3977	;# 
   432   000F8A                     LATB            equ	3978	;# 
   433   000F8B                     LATC            equ	3979	;# 
   434   000F8C                     LATD            equ	3980	;# 
   435   000F8D                     LATE            equ	3981	;# 
   436   000F92                     TRISA           equ	3986	;# 
   437   000F92                     DDRA            equ	3986	;# 
   438   000F93                     TRISB           equ	3987	;# 
   439   000F93                     DDRB            equ	3987	;# 
   440   000F94                     TRISC           equ	3988	;# 
   441   000F94                     DDRC            equ	3988	;# 
   442   000F95                     TRISD           equ	3989	;# 
   443   000F95                     DDRD            equ	3989	;# 
   444   000F96                     TRISE           equ	3990	;# 
   445   000F96                     DDRE            equ	3990	;# 
   446   000F9B                     OSCTUNE         equ	3995	;# 
   447   000F9D                     PIE1            equ	3997	;# 
   448   000F9E                     PIR1            equ	3998	;# 
   449   000F9F                     IPR1            equ	3999	;# 
   450   000FA0                     PIE2            equ	4000	;# 
   451   000FA1                     PIR2            equ	4001	;# 
   452   000FA2                     IPR2            equ	4002	;# 
   453   000FA6                     EECON1          equ	4006	;# 
   454   000FA7                     EECON2          equ	4007	;# 
   455   000FA8                     EEDATA          equ	4008	;# 
   456   000FA9                     EEADR           equ	4009	;# 
   457   000FAB                     RCSTA           equ	4011	;# 
   458   000FAB                     RCSTA1          equ	4011	;# 
   459   000FAC                     TXSTA           equ	4012	;# 
   460   000FAC                     TXSTA1          equ	4012	;# 
   461   000FAD                     TXREG           equ	4013	;# 
   462   000FAD                     TXREG1          equ	4013	;# 
   463   000FAE                     RCREG           equ	4014	;# 
   464   000FAE                     RCREG1          equ	4014	;# 
   465   000FAF                     SPBRG           equ	4015	;# 
   466   000FAF                     SPBRG1          equ	4015	;# 
   467   000FB0                     SPBRGH          equ	4016	;# 
   468   000FB1                     T3CON           equ	4017	;# 
   469   000FB2                     TMR3            equ	4018	;# 
   470   000FB2                     TMR3L           equ	4018	;# 
   471   000FB3                     TMR3H           equ	4019	;# 
   472   000FB4                     CMCON           equ	4020	;# 
   473   000FB5                     CVRCON          equ	4021	;# 
   474   000FB6                     ECCP1AS         equ	4022	;# 
   475   000FB7                     ECCP1DEL        equ	4023	;# 
   476   000FB7                     PWM1CON         equ	4023	;# 
   477   000FB8                     BAUDCON         equ	4024	;# 
   478   000FB8                     BAUDCTL         equ	4024	;# 
   479   000FBA                     CCP2CON         equ	4026	;# 
   480   000FBB                     CCPR2           equ	4027	;# 
   481   000FBB                     CCPR2L          equ	4027	;# 
   482   000FBC                     CCPR2H          equ	4028	;# 
   483   000FBD                     CCP1CON         equ	4029	;# 
   484   000FBD                     ECCP1CON        equ	4029	;# 
   485   000FBE                     CCPR1           equ	4030	;# 
   486   000FBE                     CCPR1L          equ	4030	;# 
   487   000FBF                     CCPR1H          equ	4031	;# 
   488   000FC0                     ADCON2          equ	4032	;# 
   489   000FC1                     ADCON1          equ	4033	;# 
   490   000FC2                     ADCON0          equ	4034	;# 
   491   000FC3                     ADRES           equ	4035	;# 
   492   000FC3                     ADRESL          equ	4035	;# 
   493   000FC4                     ADRESH          equ	4036	;# 
   494   000FC5                     SSPCON2         equ	4037	;# 
   495   000FC6                     SSPCON1         equ	4038	;# 
   496   000FC7                     SSPSTAT         equ	4039	;# 
   497   000FC8                     SSPADD          equ	4040	;# 
   498   000FC9                     SSPBUF          equ	4041	;# 
   499   000FCA                     T2CON           equ	4042	;# 
   500   000FCB                     PR2             equ	4043	;# 
   501   000FCB                     MEMCON          equ	4043	;# 
   502   000FCC                     TMR2            equ	4044	;# 
   503   000FCD                     T1CON           equ	4045	;# 
   504   000FCE                     TMR1            equ	4046	;# 
   505   000FCE                     TMR1L           equ	4046	;# 
   506   000FCF                     TMR1H           equ	4047	;# 
   507   000FD0                     RCON            equ	4048	;# 
   508   000FD1                     WDTCON          equ	4049	;# 
   509   000FD2                     HLVDCON         equ	4050	;# 
   510   000FD2                     LVDCON          equ	4050	;# 
   511   000FD3                     OSCCON          equ	4051	;# 
   512   000FD5                     T0CON           equ	4053	;# 
   513   000FD6                     TMR0            equ	4054	;# 
   514   000FD6                     TMR0L           equ	4054	;# 
   515   000FD7                     TMR0H           equ	4055	;# 
   516   000FD8                     STATUS          equ	4056	;# 
   517   000FD9                     FSR2            equ	4057	;# 
   518   000FD9                     FSR2L           equ	4057	;# 
   519   000FDA                     FSR2H           equ	4058	;# 
   520   000FDB                     PLUSW2          equ	4059	;# 
   521   000FDC                     PREINC2         equ	4060	;# 
   522   000FDD                     POSTDEC2        equ	4061	;# 
   523   000FDE                     POSTINC2        equ	4062	;# 
   524   000FDF                     INDF2           equ	4063	;# 
   525   000FE0                     BSR             equ	4064	;# 
   526   000FE1                     FSR1            equ	4065	;# 
   527   000FE1                     FSR1L           equ	4065	;# 
   528   000FE2                     FSR1H           equ	4066	;# 
   529   000FE3                     PLUSW1          equ	4067	;# 
   530   000FE4                     PREINC1         equ	4068	;# 
   531   000FE5                     POSTDEC1        equ	4069	;# 
   532   000FE6                     POSTINC1        equ	4070	;# 
   533   000FE7                     INDF1           equ	4071	;# 
   534   000FE8                     WREG            equ	4072	;# 
   535   000FE9                     FSR0            equ	4073	;# 
   536   000FE9                     FSR0L           equ	4073	;# 
   537   000FEA                     FSR0H           equ	4074	;# 
   538   000FEB                     PLUSW0          equ	4075	;# 
   539   000FEC                     PREINC0         equ	4076	;# 
   540   000FED                     POSTDEC0        equ	4077	;# 
   541   000FEE                     POSTINC0        equ	4078	;# 
   542   000FEF                     INDF0           equ	4079	;# 
   543   000FF0                     INTCON3         equ	4080	;# 
   544   000FF1                     INTCON2         equ	4081	;# 
   545   000FF2                     INTCON          equ	4082	;# 
   546   000FF3                     PROD            equ	4083	;# 
   547   000FF3                     PRODL           equ	4083	;# 
   548   000FF4                     PRODH           equ	4084	;# 
   549   000FF5                     TABLAT          equ	4085	;# 
   550   000FF6                     TBLPTR          equ	4086	;# 
   551   000FF6                     TBLPTRL         equ	4086	;# 
   552   000FF7                     TBLPTRH         equ	4087	;# 
   553   000FF8                     TBLPTRU         equ	4088	;# 
   554   000FF9                     PCLAT           equ	4089	;# 
   555   000FF9                     PC              equ	4089	;# 
   556   000FF9                     PCL             equ	4089	;# 
   557   000FFA                     PCLATH          equ	4090	;# 
   558   000FFB                     PCLATU          equ	4091	;# 
   559   000FFC                     STKPTR          equ	4092	;# 
   560   000FFD                     TOS             equ	4093	;# 
   561   000FFD                     TOSL            equ	4093	;# 
   562   000FFE                     TOSH            equ	4094	;# 
   563   000FFF                     TOSU            equ	4095	;# 
   564   000F80                     PORTA           equ	3968	;# 
   565   000F81                     PORTB           equ	3969	;# 
   566   000F82                     PORTC           equ	3970	;# 
   567   000F83                     PORTD           equ	3971	;# 
   568   000F84                     PORTE           equ	3972	;# 
   569   000F89                     LATA            equ	3977	;# 
   570   000F8A                     LATB            equ	3978	;# 
   571   000F8B                     LATC            equ	3979	;# 
   572   000F8C                     LATD            equ	3980	;# 
   573   000F8D                     LATE            equ	3981	;# 
   574   000F92                     TRISA           equ	3986	;# 
   575   000F92                     DDRA            equ	3986	;# 
   576   000F93                     TRISB           equ	3987	;# 
   577   000F93                     DDRB            equ	3987	;# 
   578   000F94                     TRISC           equ	3988	;# 
   579   000F94                     DDRC            equ	3988	;# 
   580   000F95                     TRISD           equ	3989	;# 
   581   000F95                     DDRD            equ	3989	;# 
   582   000F96                     TRISE           equ	3990	;# 
   583   000F96                     DDRE            equ	3990	;# 
   584   000F9B                     OSCTUNE         equ	3995	;# 
   585   000F9D                     PIE1            equ	3997	;# 
   586   000F9E                     PIR1            equ	3998	;# 
   587   000F9F                     IPR1            equ	3999	;# 
   588   000FA0                     PIE2            equ	4000	;# 
   589   000FA1                     PIR2            equ	4001	;# 
   590   000FA2                     IPR2            equ	4002	;# 
   591   000FA6                     EECON1          equ	4006	;# 
   592   000FA7                     EECON2          equ	4007	;# 
   593   000FA8                     EEDATA          equ	4008	;# 
   594   000FA9                     EEADR           equ	4009	;# 
   595   000FAB                     RCSTA           equ	4011	;# 
   596   000FAB                     RCSTA1          equ	4011	;# 
   597   000FAC                     TXSTA           equ	4012	;# 
   598   000FAC                     TXSTA1          equ	4012	;# 
   599   000FAD                     TXREG           equ	4013	;# 
   600   000FAD                     TXREG1          equ	4013	;# 
   601   000FAE                     RCREG           equ	4014	;# 
   602   000FAE                     RCREG1          equ	4014	;# 
   603   000FAF                     SPBRG           equ	4015	;# 
   604   000FAF                     SPBRG1          equ	4015	;# 
   605   000FB0                     SPBRGH          equ	4016	;# 
   606   000FB1                     T3CON           equ	4017	;# 
   607   000FB2                     TMR3            equ	4018	;# 
   608   000FB2                     TMR3L           equ	4018	;# 
   609   000FB3                     TMR3H           equ	4019	;# 
   610   000FB4                     CMCON           equ	4020	;# 
   611   000FB5                     CVRCON          equ	4021	;# 
   612   000FB6                     ECCP1AS         equ	4022	;# 
   613   000FB7                     ECCP1DEL        equ	4023	;# 
   614   000FB7                     PWM1CON         equ	4023	;# 
   615   000FB8                     BAUDCON         equ	4024	;# 
   616   000FB8                     BAUDCTL         equ	4024	;# 
   617   000FBA                     CCP2CON         equ	4026	;# 
   618   000FBB                     CCPR2           equ	4027	;# 
   619   000FBB                     CCPR2L          equ	4027	;# 
   620   000FBC                     CCPR2H          equ	4028	;# 
   621   000FBD                     CCP1CON         equ	4029	;# 
   622   000FBD                     ECCP1CON        equ	4029	;# 
   623   000FBE                     CCPR1           equ	4030	;# 
   624   000FBE                     CCPR1L          equ	4030	;# 
   625   000FBF                     CCPR1H          equ	4031	;# 
   626   000FC0                     ADCON2          equ	4032	;# 
   627   000FC1                     ADCON1          equ	4033	;# 
   628   000FC2                     ADCON0          equ	4034	;# 
   629   000FC3                     ADRES           equ	4035	;# 
   630   000FC3                     ADRESL          equ	4035	;# 
   631   000FC4                     ADRESH          equ	4036	;# 
   632   000FC5                     SSPCON2         equ	4037	;# 
   633   000FC6                     SSPCON1         equ	4038	;# 
   634   000FC7                     SSPSTAT         equ	4039	;# 
   635   000FC8                     SSPADD          equ	4040	;# 
   636   000FC9                     SSPBUF          equ	4041	;# 
   637   000FCA                     T2CON           equ	4042	;# 
   638   000FCB                     PR2             equ	4043	;# 
   639   000FCB                     MEMCON          equ	4043	;# 
   640   000FCC                     TMR2            equ	4044	;# 
   641   000FCD                     T1CON           equ	4045	;# 
   642   000FCE                     TMR1            equ	4046	;# 
   643   000FCE                     TMR1L           equ	4046	;# 
   644   000FCF                     TMR1H           equ	4047	;# 
   645   000FD0                     RCON            equ	4048	;# 
   646   000FD1                     WDTCON          equ	4049	;# 
   647   000FD2                     HLVDCON         equ	4050	;# 
   648   000FD2                     LVDCON          equ	4050	;# 
   649   000FD3                     OSCCON          equ	4051	;# 
   650   000FD5                     T0CON           equ	4053	;# 
   651   000FD6                     TMR0            equ	4054	;# 
   652   000FD6                     TMR0L           equ	4054	;# 
   653   000FD7                     TMR0H           equ	4055	;# 
   654   000FD8                     STATUS          equ	4056	;# 
   655   000FD9                     FSR2            equ	4057	;# 
   656   000FD9                     FSR2L           equ	4057	;# 
   657   000FDA                     FSR2H           equ	4058	;# 
   658   000FDB                     PLUSW2          equ	4059	;# 
   659   000FDC                     PREINC2         equ	4060	;# 
   660   000FDD                     POSTDEC2        equ	4061	;# 
   661   000FDE                     POSTINC2        equ	4062	;# 
   662   000FDF                     INDF2           equ	4063	;# 
   663   000FE0                     BSR             equ	4064	;# 
   664   000FE1                     FSR1            equ	4065	;# 
   665   000FE1                     FSR1L           equ	4065	;# 
   666   000FE2                     FSR1H           equ	4066	;# 
   667   000FE3                     PLUSW1          equ	4067	;# 
   668   000FE4                     PREINC1         equ	4068	;# 
   669   000FE5                     POSTDEC1        equ	4069	;# 
   670   000FE6                     POSTINC1        equ	4070	;# 
   671   000FE7                     INDF1           equ	4071	;# 
   672   000FE8                     WREG            equ	4072	;# 
   673   000FE9                     FSR0            equ	4073	;# 
   674   000FE9                     FSR0L           equ	4073	;# 
   675   000FEA                     FSR0H           equ	4074	;# 
   676   000FEB                     PLUSW0          equ	4075	;# 
   677   000FEC                     PREINC0         equ	4076	;# 
   678   000FED                     POSTDEC0        equ	4077	;# 
   679   000FEE                     POSTINC0        equ	4078	;# 
   680   000FEF                     INDF0           equ	4079	;# 
   681   000FF0                     INTCON3         equ	4080	;# 
   682   000FF1                     INTCON2         equ	4081	;# 
   683   000FF2                     INTCON          equ	4082	;# 
   684   000FF3                     PROD            equ	4083	;# 
   685   000FF3                     PRODL           equ	4083	;# 
   686   000FF4                     PRODH           equ	4084	;# 
   687   000FF5                     TABLAT          equ	4085	;# 
   688   000FF6                     TBLPTR          equ	4086	;# 
   689   000FF6                     TBLPTRL         equ	4086	;# 
   690   000FF7                     TBLPTRH         equ	4087	;# 
   691   000FF8                     TBLPTRU         equ	4088	;# 
   692   000FF9                     PCLAT           equ	4089	;# 
   693   000FF9                     PC              equ	4089	;# 
   694   000FF9                     PCL             equ	4089	;# 
   695   000FFA                     PCLATH          equ	4090	;# 
   696   000FFB                     PCLATU          equ	4091	;# 
   697   000FFC                     STKPTR          equ	4092	;# 
   698   000FFD                     TOS             equ	4093	;# 
   699   000FFD                     TOSL            equ	4093	;# 
   700   000FFE                     TOSH            equ	4094	;# 
   701   000FFF                     TOSU            equ	4095	;# 
   702   000F80                     PORTA           equ	3968	;# 
   703   000F81                     PORTB           equ	3969	;# 
   704   000F82                     PORTC           equ	3970	;# 
   705   000F83                     PORTD           equ	3971	;# 
   706   000F84                     PORTE           equ	3972	;# 
   707   000F89                     LATA            equ	3977	;# 
   708   000F8A                     LATB            equ	3978	;# 
   709   000F8B                     LATC            equ	3979	;# 
   710   000F8C                     LATD            equ	3980	;# 
   711   000F8D                     LATE            equ	3981	;# 
   712   000F92                     TRISA           equ	3986	;# 
   713   000F92                     DDRA            equ	3986	;# 
   714   000F93                     TRISB           equ	3987	;# 
   715   000F93                     DDRB            equ	3987	;# 
   716   000F94                     TRISC           equ	3988	;# 
   717   000F94                     DDRC            equ	3988	;# 
   718   000F95                     TRISD           equ	3989	;# 
   719   000F95                     DDRD            equ	3989	;# 
   720   000F96                     TRISE           equ	3990	;# 
   721   000F96                     DDRE            equ	3990	;# 
   722   000F9B                     OSCTUNE         equ	3995	;# 
   723   000F9D                     PIE1            equ	3997	;# 
   724   000F9E                     PIR1            equ	3998	;# 
   725   000F9F                     IPR1            equ	3999	;# 
   726   000FA0                     PIE2            equ	4000	;# 
   727   000FA1                     PIR2            equ	4001	;# 
   728   000FA2                     IPR2            equ	4002	;# 
   729   000FA6                     EECON1          equ	4006	;# 
   730   000FA7                     EECON2          equ	4007	;# 
   731   000FA8                     EEDATA          equ	4008	;# 
   732   000FA9                     EEADR           equ	4009	;# 
   733   000FAB                     RCSTA           equ	4011	;# 
   734   000FAB                     RCSTA1          equ	4011	;# 
   735   000FAC                     TXSTA           equ	4012	;# 
   736   000FAC                     TXSTA1          equ	4012	;# 
   737   000FAD                     TXREG           equ	4013	;# 
   738   000FAD                     TXREG1          equ	4013	;# 
   739   000FAE                     RCREG           equ	4014	;# 
   740   000FAE                     RCREG1          equ	4014	;# 
   741   000FAF                     SPBRG           equ	4015	;# 
   742   000FAF                     SPBRG1          equ	4015	;# 
   743   000FB0                     SPBRGH          equ	4016	;# 
   744   000FB1                     T3CON           equ	4017	;# 
   745   000FB2                     TMR3            equ	4018	;# 
   746   000FB2                     TMR3L           equ	4018	;# 
   747   000FB3                     TMR3H           equ	4019	;# 
   748   000FB4                     CMCON           equ	4020	;# 
   749   000FB5                     CVRCON          equ	4021	;# 
   750   000FB6                     ECCP1AS         equ	4022	;# 
   751   000FB7                     ECCP1DEL        equ	4023	;# 
   752   000FB7                     PWM1CON         equ	4023	;# 
   753   000FB8                     BAUDCON         equ	4024	;# 
   754   000FB8                     BAUDCTL         equ	4024	;# 
   755   000FBA                     CCP2CON         equ	4026	;# 
   756   000FBB                     CCPR2           equ	4027	;# 
   757   000FBB                     CCPR2L          equ	4027	;# 
   758   000FBC                     CCPR2H          equ	4028	;# 
   759   000FBD                     CCP1CON         equ	4029	;# 
   760   000FBD                     ECCP1CON        equ	4029	;# 
   761   000FBE                     CCPR1           equ	4030	;# 
   762   000FBE                     CCPR1L          equ	4030	;# 
   763   000FBF                     CCPR1H          equ	4031	;# 
   764   000FC0                     ADCON2          equ	4032	;# 
   765   000FC1                     ADCON1          equ	4033	;# 
   766   000FC2                     ADCON0          equ	4034	;# 
   767   000FC3                     ADRES           equ	4035	;# 
   768   000FC3                     ADRESL          equ	4035	;# 
   769   000FC4                     ADRESH          equ	4036	;# 
   770   000FC5                     SSPCON2         equ	4037	;# 
   771   000FC6                     SSPCON1         equ	4038	;# 
   772   000FC7                     SSPSTAT         equ	4039	;# 
   773   000FC8                     SSPADD          equ	4040	;# 
   774   000FC9                     SSPBUF          equ	4041	;# 
   775   000FCA                     T2CON           equ	4042	;# 
   776   000FCB                     PR2             equ	4043	;# 
   777   000FCB                     MEMCON          equ	4043	;# 
   778   000FCC                     TMR2            equ	4044	;# 
   779   000FCD                     T1CON           equ	4045	;# 
   780   000FCE                     TMR1            equ	4046	;# 
   781   000FCE                     TMR1L           equ	4046	;# 
   782   000FCF                     TMR1H           equ	4047	;# 
   783   000FD0                     RCON            equ	4048	;# 
   784   000FD1                     WDTCON          equ	4049	;# 
   785   000FD2                     HLVDCON         equ	4050	;# 
   786   000FD2                     LVDCON          equ	4050	;# 
   787   000FD3                     OSCCON          equ	4051	;# 
   788   000FD5                     T0CON           equ	4053	;# 
   789   000FD6                     TMR0            equ	4054	;# 
   790   000FD6                     TMR0L           equ	4054	;# 
   791   000FD7                     TMR0H           equ	4055	;# 
   792   000FD8                     STATUS          equ	4056	;# 
   793   000FD9                     FSR2            equ	4057	;# 
   794   000FD9                     FSR2L           equ	4057	;# 
   795   000FDA                     FSR2H           equ	4058	;# 
   796   000FDB                     PLUSW2          equ	4059	;# 
   797   000FDC                     PREINC2         equ	4060	;# 
   798   000FDD                     POSTDEC2        equ	4061	;# 
   799   000FDE                     POSTINC2        equ	4062	;# 
   800   000FDF                     INDF2           equ	4063	;# 
   801   000FE0                     BSR             equ	4064	;# 
   802   000FE1                     FSR1            equ	4065	;# 
   803   000FE1                     FSR1L           equ	4065	;# 
   804   000FE2                     FSR1H           equ	4066	;# 
   805   000FE3                     PLUSW1          equ	4067	;# 
   806   000FE4                     PREINC1         equ	4068	;# 
   807   000FE5                     POSTDEC1        equ	4069	;# 
   808   000FE6                     POSTINC1        equ	4070	;# 
   809   000FE7                     INDF1           equ	4071	;# 
   810   000FE8                     WREG            equ	4072	;# 
   811   000FE9                     FSR0            equ	4073	;# 
   812   000FE9                     FSR0L           equ	4073	;# 
   813   000FEA                     FSR0H           equ	4074	;# 
   814   000FEB                     PLUSW0          equ	4075	;# 
   815   000FEC                     PREINC0         equ	4076	;# 
   816   000FED                     POSTDEC0        equ	4077	;# 
   817   000FEE                     POSTINC0        equ	4078	;# 
   818   000FEF                     INDF0           equ	4079	;# 
   819   000FF0                     INTCON3         equ	4080	;# 
   820   000FF1                     INTCON2         equ	4081	;# 
   821   000FF2                     INTCON          equ	4082	;# 
   822   000FF3                     PROD            equ	4083	;# 
   823   000FF3                     PRODL           equ	4083	;# 
   824   000FF4                     PRODH           equ	4084	;# 
   825   000FF5                     TABLAT          equ	4085	;# 
   826   000FF6                     TBLPTR          equ	4086	;# 
   827   000FF6                     TBLPTRL         equ	4086	;# 
   828   000FF7                     TBLPTRH         equ	4087	;# 
   829   000FF8                     TBLPTRU         equ	4088	;# 
   830   000FF9                     PCLAT           equ	4089	;# 
   831   000FF9                     PC              equ	4089	;# 
   832   000FF9                     PCL             equ	4089	;# 
   833   000FFA                     PCLATH          equ	4090	;# 
   834   000FFB                     PCLATU          equ	4091	;# 
   835   000FFC                     STKPTR          equ	4092	;# 
   836   000FFD                     TOS             equ	4093	;# 
   837   000FFD                     TOSL            equ	4093	;# 
   838   000FFE                     TOSH            equ	4094	;# 
   839   000FFF                     TOSU            equ	4095	;# 
   840   000F80                     PORTA           equ	3968	;# 
   841   000F81                     PORTB           equ	3969	;# 
   842   000F82                     PORTC           equ	3970	;# 
   843   000F83                     PORTD           equ	3971	;# 
   844   000F84                     PORTE           equ	3972	;# 
   845   000F89                     LATA            equ	3977	;# 
   846   000F8A                     LATB            equ	3978	;# 
   847   000F8B                     LATC            equ	3979	;# 
   848   000F8C                     LATD            equ	3980	;# 
   849   000F8D                     LATE            equ	3981	;# 
   850   000F92                     TRISA           equ	3986	;# 
   851   000F92                     DDRA            equ	3986	;# 
   852   000F93                     TRISB           equ	3987	;# 
   853   000F93                     DDRB            equ	3987	;# 
   854   000F94                     TRISC           equ	3988	;# 
   855   000F94                     DDRC            equ	3988	;# 
   856   000F95                     TRISD           equ	3989	;# 
   857   000F95                     DDRD            equ	3989	;# 
   858   000F96                     TRISE           equ	3990	;# 
   859   000F96                     DDRE            equ	3990	;# 
   860   000F9B                     OSCTUNE         equ	3995	;# 
   861   000F9D                     PIE1            equ	3997	;# 
   862   000F9E                     PIR1            equ	3998	;# 
   863   000F9F                     IPR1            equ	3999	;# 
   864   000FA0                     PIE2            equ	4000	;# 
   865   000FA1                     PIR2            equ	4001	;# 
   866   000FA2                     IPR2            equ	4002	;# 
   867   000FA6                     EECON1          equ	4006	;# 
   868   000FA7                     EECON2          equ	4007	;# 
   869   000FA8                     EEDATA          equ	4008	;# 
   870   000FA9                     EEADR           equ	4009	;# 
   871   000FAB                     RCSTA           equ	4011	;# 
   872   000FAB                     RCSTA1          equ	4011	;# 
   873   000FAC                     TXSTA           equ	4012	;# 
   874   000FAC                     TXSTA1          equ	4012	;# 
   875   000FAD                     TXREG           equ	4013	;# 
   876   000FAD                     TXREG1          equ	4013	;# 
   877   000FAE                     RCREG           equ	4014	;# 
   878   000FAE                     RCREG1          equ	4014	;# 
   879   000FAF                     SPBRG           equ	4015	;# 
   880   000FAF                     SPBRG1          equ	4015	;# 
   881   000FB0                     SPBRGH          equ	4016	;# 
   882   000FB1                     T3CON           equ	4017	;# 
   883   000FB2                     TMR3            equ	4018	;# 
   884   000FB2                     TMR3L           equ	4018	;# 
   885   000FB3                     TMR3H           equ	4019	;# 
   886   000FB4                     CMCON           equ	4020	;# 
   887   000FB5                     CVRCON          equ	4021	;# 
   888   000FB6                     ECCP1AS         equ	4022	;# 
   889   000FB7                     ECCP1DEL        equ	4023	;# 
   890   000FB7                     PWM1CON         equ	4023	;# 
   891   000FB8                     BAUDCON         equ	4024	;# 
   892   000FB8                     BAUDCTL         equ	4024	;# 
   893   000FBA                     CCP2CON         equ	4026	;# 
   894   000FBB                     CCPR2           equ	4027	;# 
   895   000FBB                     CCPR2L          equ	4027	;# 
   896   000FBC                     CCPR2H          equ	4028	;# 
   897   000FBD                     CCP1CON         equ	4029	;# 
   898   000FBD                     ECCP1CON        equ	4029	;# 
   899   000FBE                     CCPR1           equ	4030	;# 
   900   000FBE                     CCPR1L          equ	4030	;# 
   901   000FBF                     CCPR1H          equ	4031	;# 
   902   000FC0                     ADCON2          equ	4032	;# 
   903   000FC1                     ADCON1          equ	4033	;# 
   904   000FC2                     ADCON0          equ	4034	;# 
   905   000FC3                     ADRES           equ	4035	;# 
   906   000FC3                     ADRESL          equ	4035	;# 
   907   000FC4                     ADRESH          equ	4036	;# 
   908   000FC5                     SSPCON2         equ	4037	;# 
   909   000FC6                     SSPCON1         equ	4038	;# 
   910   000FC7                     SSPSTAT         equ	4039	;# 
   911   000FC8                     SSPADD          equ	4040	;# 
   912   000FC9                     SSPBUF          equ	4041	;# 
   913   000FCA                     T2CON           equ	4042	;# 
   914   000FCB                     PR2             equ	4043	;# 
   915   000FCB                     MEMCON          equ	4043	;# 
   916   000FCC                     TMR2            equ	4044	;# 
   917   000FCD                     T1CON           equ	4045	;# 
   918   000FCE                     TMR1            equ	4046	;# 
   919   000FCE                     TMR1L           equ	4046	;# 
   920   000FCF                     TMR1H           equ	4047	;# 
   921   000FD0                     RCON            equ	4048	;# 
   922   000FD1                     WDTCON          equ	4049	;# 
   923   000FD2                     HLVDCON         equ	4050	;# 
   924   000FD2                     LVDCON          equ	4050	;# 
   925   000FD3                     OSCCON          equ	4051	;# 
   926   000FD5                     T0CON           equ	4053	;# 
   927   000FD6                     TMR0            equ	4054	;# 
   928   000FD6                     TMR0L           equ	4054	;# 
   929   000FD7                     TMR0H           equ	4055	;# 
   930   000FD8                     STATUS          equ	4056	;# 
   931   000FD9                     FSR2            equ	4057	;# 
   932   000FD9                     FSR2L           equ	4057	;# 
   933   000FDA                     FSR2H           equ	4058	;# 
   934   000FDB                     PLUSW2          equ	4059	;# 
   935   000FDC                     PREINC2         equ	4060	;# 
   936   000FDD                     POSTDEC2        equ	4061	;# 
   937   000FDE                     POSTINC2        equ	4062	;# 
   938   000FDF                     INDF2           equ	4063	;# 
   939   000FE0                     BSR             equ	4064	;# 
   940   000FE1                     FSR1            equ	4065	;# 
   941   000FE1                     FSR1L           equ	4065	;# 
   942   000FE2                     FSR1H           equ	4066	;# 
   943   000FE3                     PLUSW1          equ	4067	;# 
   944   000FE4                     PREINC1         equ	4068	;# 
   945   000FE5                     POSTDEC1        equ	4069	;# 
   946   000FE6                     POSTINC1        equ	4070	;# 
   947   000FE7                     INDF1           equ	4071	;# 
   948   000FE8                     WREG            equ	4072	;# 
   949   000FE9                     FSR0            equ	4073	;# 
   950   000FE9                     FSR0L           equ	4073	;# 
   951   000FEA                     FSR0H           equ	4074	;# 
   952   000FEB                     PLUSW0          equ	4075	;# 
   953   000FEC                     PREINC0         equ	4076	;# 
   954   000FED                     POSTDEC0        equ	4077	;# 
   955   000FEE                     POSTINC0        equ	4078	;# 
   956   000FEF                     INDF0           equ	4079	;# 
   957   000FF0                     INTCON3         equ	4080	;# 
   958   000FF1                     INTCON2         equ	4081	;# 
   959   000FF2                     INTCON          equ	4082	;# 
   960   000FF3                     PROD            equ	4083	;# 
   961   000FF3                     PRODL           equ	4083	;# 
   962   000FF4                     PRODH           equ	4084	;# 
   963   000FF5                     TABLAT          equ	4085	;# 
   964   000FF6                     TBLPTR          equ	4086	;# 
   965   000FF6                     TBLPTRL         equ	4086	;# 
   966   000FF7                     TBLPTRH         equ	4087	;# 
   967   000FF8                     TBLPTRU         equ	4088	;# 
   968   000FF9                     PCLAT           equ	4089	;# 
   969   000FF9                     PC              equ	4089	;# 
   970   000FF9                     PCL             equ	4089	;# 
   971   000FFA                     PCLATH          equ	4090	;# 
   972   000FFB                     PCLATU          equ	4091	;# 
   973   000FFC                     STKPTR          equ	4092	;# 
   974   000FFD                     TOS             equ	4093	;# 
   975   000FFD                     TOSL            equ	4093	;# 
   976   000FFE                     TOSH            equ	4094	;# 
   977   000FFF                     TOSU            equ	4095	;# 
   978   000F80                     PORTA           equ	3968	;# 
   979   000F81                     PORTB           equ	3969	;# 
   980   000F82                     PORTC           equ	3970	;# 
   981   000F83                     PORTD           equ	3971	;# 
   982   000F84                     PORTE           equ	3972	;# 
   983   000F89                     LATA            equ	3977	;# 
   984   000F8A                     LATB            equ	3978	;# 
   985   000F8B                     LATC            equ	3979	;# 
   986   000F8C                     LATD            equ	3980	;# 
   987   000F8D                     LATE            equ	3981	;# 
   988   000F92                     TRISA           equ	3986	;# 
   989   000F92                     DDRA            equ	3986	;# 
   990   000F93                     TRISB           equ	3987	;# 
   991   000F93                     DDRB            equ	3987	;# 
   992   000F94                     TRISC           equ	3988	;# 
   993   000F94                     DDRC            equ	3988	;# 
   994   000F95                     TRISD           equ	3989	;# 
   995   000F95                     DDRD            equ	3989	;# 
   996   000F96                     TRISE           equ	3990	;# 
   997   000F96                     DDRE            equ	3990	;# 
   998   000F9B                     OSCTUNE         equ	3995	;# 
   999   000F9D                     PIE1            equ	3997	;# 
  1000   000F9E                     PIR1            equ	3998	;# 
  1001   000F9F                     IPR1            equ	3999	;# 
  1002   000FA0                     PIE2            equ	4000	;# 
  1003   000FA1                     PIR2            equ	4001	;# 
  1004   000FA2                     IPR2            equ	4002	;# 
  1005   000FA6                     EECON1          equ	4006	;# 
  1006   000FA7                     EECON2          equ	4007	;# 
  1007   000FA8                     EEDATA          equ	4008	;# 
  1008   000FA9                     EEADR           equ	4009	;# 
  1009   000FAB                     RCSTA           equ	4011	;# 
  1010   000FAB                     RCSTA1          equ	4011	;# 
  1011   000FAC                     TXSTA           equ	4012	;# 
  1012   000FAC                     TXSTA1          equ	4012	;# 
  1013   000FAD                     TXREG           equ	4013	;# 
  1014   000FAD                     TXREG1          equ	4013	;# 
  1015   000FAE                     RCREG           equ	4014	;# 
  1016   000FAE                     RCREG1          equ	4014	;# 
  1017   000FAF                     SPBRG           equ	4015	;# 
  1018   000FAF                     SPBRG1          equ	4015	;# 
  1019   000FB0                     SPBRGH          equ	4016	;# 
  1020   000FB1                     T3CON           equ	4017	;# 
  1021   000FB2                     TMR3            equ	4018	;# 
  1022   000FB2                     TMR3L           equ	4018	;# 
  1023   000FB3                     TMR3H           equ	4019	;# 
  1024   000FB4                     CMCON           equ	4020	;# 
  1025   000FB5                     CVRCON          equ	4021	;# 
  1026   000FB6                     ECCP1AS         equ	4022	;# 
  1027   000FB7                     ECCP1DEL        equ	4023	;# 
  1028   000FB7                     PWM1CON         equ	4023	;# 
  1029   000FB8                     BAUDCON         equ	4024	;# 
  1030   000FB8                     BAUDCTL         equ	4024	;# 
  1031   000FBA                     CCP2CON         equ	4026	;# 
  1032   000FBB                     CCPR2           equ	4027	;# 
  1033   000FBB                     CCPR2L          equ	4027	;# 
  1034   000FBC                     CCPR2H          equ	4028	;# 
  1035   000FBD                     CCP1CON         equ	4029	;# 
  1036   000FBD                     ECCP1CON        equ	4029	;# 
  1037   000FBE                     CCPR1           equ	4030	;# 
  1038   000FBE                     CCPR1L          equ	4030	;# 
  1039   000FBF                     CCPR1H          equ	4031	;# 
  1040   000FC0                     ADCON2          equ	4032	;# 
  1041   000FC1                     ADCON1          equ	4033	;# 
  1042   000FC2                     ADCON0          equ	4034	;# 
  1043   000FC3                     ADRES           equ	4035	;# 
  1044   000FC3                     ADRESL          equ	4035	;# 
  1045   000FC4                     ADRESH          equ	4036	;# 
  1046   000FC5                     SSPCON2         equ	4037	;# 
  1047   000FC6                     SSPCON1         equ	4038	;# 
  1048   000FC7                     SSPSTAT         equ	4039	;# 
  1049   000FC8                     SSPADD          equ	4040	;# 
  1050   000FC9                     SSPBUF          equ	4041	;# 
  1051   000FCA                     T2CON           equ	4042	;# 
  1052   000FCB                     PR2             equ	4043	;# 
  1053   000FCB                     MEMCON          equ	4043	;# 
  1054   000FCC                     TMR2            equ	4044	;# 
  1055   000FCD                     T1CON           equ	4045	;# 
  1056   000FCE                     TMR1            equ	4046	;# 
  1057   000FCE                     TMR1L           equ	4046	;# 
  1058   000FCF                     TMR1H           equ	4047	;# 
  1059   000FD0                     RCON            equ	4048	;# 
  1060   000FD1                     WDTCON          equ	4049	;# 
  1061   000FD2                     HLVDCON         equ	4050	;# 
  1062   000FD2                     LVDCON          equ	4050	;# 
  1063   000FD3                     OSCCON          equ	4051	;# 
  1064   000FD5                     T0CON           equ	4053	;# 
  1065   000FD6                     TMR0            equ	4054	;# 
  1066   000FD6                     TMR0L           equ	4054	;# 
  1067   000FD7                     TMR0H           equ	4055	;# 
  1068   000FD8                     STATUS          equ	4056	;# 
  1069   000FD9                     FSR2            equ	4057	;# 
  1070   000FD9                     FSR2L           equ	4057	;# 
  1071   000FDA                     FSR2H           equ	4058	;# 
  1072   000FDB                     PLUSW2          equ	4059	;# 
  1073   000FDC                     PREINC2         equ	4060	;# 
  1074   000FDD                     POSTDEC2        equ	4061	;# 
  1075   000FDE                     POSTINC2        equ	4062	;# 
  1076   000FDF                     INDF2           equ	4063	;# 
  1077   000FE0                     BSR             equ	4064	;# 
  1078   000FE1                     FSR1            equ	4065	;# 
  1079   000FE1                     FSR1L           equ	4065	;# 
  1080   000FE2                     FSR1H           equ	4066	;# 
  1081   000FE3                     PLUSW1          equ	4067	;# 
  1082   000FE4                     PREINC1         equ	4068	;# 
  1083   000FE5                     POSTDEC1        equ	4069	;# 
  1084   000FE6                     POSTINC1        equ	4070	;# 
  1085   000FE7                     INDF1           equ	4071	;# 
  1086   000FE8                     WREG            equ	4072	;# 
  1087   000FE9                     FSR0            equ	4073	;# 
  1088   000FE9                     FSR0L           equ	4073	;# 
  1089   000FEA                     FSR0H           equ	4074	;# 
  1090   000FEB                     PLUSW0          equ	4075	;# 
  1091   000FEC                     PREINC0         equ	4076	;# 
  1092   000FED                     POSTDEC0        equ	4077	;# 
  1093   000FEE                     POSTINC0        equ	4078	;# 
  1094   000FEF                     INDF0           equ	4079	;# 
  1095   000FF0                     INTCON3         equ	4080	;# 
  1096   000FF1                     INTCON2         equ	4081	;# 
  1097   000FF2                     INTCON          equ	4082	;# 
  1098   000FF3                     PROD            equ	4083	;# 
  1099   000FF3                     PRODL           equ	4083	;# 
  1100   000FF4                     PRODH           equ	4084	;# 
  1101   000FF5                     TABLAT          equ	4085	;# 
  1102   000FF6                     TBLPTR          equ	4086	;# 
  1103   000FF6                     TBLPTRL         equ	4086	;# 
  1104   000FF7                     TBLPTRH         equ	4087	;# 
  1105   000FF8                     TBLPTRU         equ	4088	;# 
  1106   000FF9                     PCLAT           equ	4089	;# 
  1107   000FF9                     PC              equ	4089	;# 
  1108   000FF9                     PCL             equ	4089	;# 
  1109   000FFA                     PCLATH          equ	4090	;# 
  1110   000FFB                     PCLATU          equ	4091	;# 
  1111   000FFC                     STKPTR          equ	4092	;# 
  1112   000FFD                     TOS             equ	4093	;# 
  1113   000FFD                     TOSL            equ	4093	;# 
  1114   000FFE                     TOSH            equ	4094	;# 
  1115   000FFF                     TOSU            equ	4095	;# 
  1116   000F80                     PORTA           equ	3968	;# 
  1117   000F81                     PORTB           equ	3969	;# 
  1118   000F82                     PORTC           equ	3970	;# 
  1119   000F83                     PORTD           equ	3971	;# 
  1120   000F84                     PORTE           equ	3972	;# 
  1121   000F89                     LATA            equ	3977	;# 
  1122   000F8A                     LATB            equ	3978	;# 
  1123   000F8B                     LATC            equ	3979	;# 
  1124   000F8C                     LATD            equ	3980	;# 
  1125   000F8D                     LATE            equ	3981	;# 
  1126   000F92                     TRISA           equ	3986	;# 
  1127   000F92                     DDRA            equ	3986	;# 
  1128   000F93                     TRISB           equ	3987	;# 
  1129   000F93                     DDRB            equ	3987	;# 
  1130   000F94                     TRISC           equ	3988	;# 
  1131   000F94                     DDRC            equ	3988	;# 
  1132   000F95                     TRISD           equ	3989	;# 
  1133   000F95                     DDRD            equ	3989	;# 
  1134   000F96                     TRISE           equ	3990	;# 
  1135   000F96                     DDRE            equ	3990	;# 
  1136   000F9B                     OSCTUNE         equ	3995	;# 
  1137   000F9D                     PIE1            equ	3997	;# 
  1138   000F9E                     PIR1            equ	3998	;# 
  1139   000F9F                     IPR1            equ	3999	;# 
  1140   000FA0                     PIE2            equ	4000	;# 
  1141   000FA1                     PIR2            equ	4001	;# 
  1142   000FA2                     IPR2            equ	4002	;# 
  1143   000FA6                     EECON1          equ	4006	;# 
  1144   000FA7                     EECON2          equ	4007	;# 
  1145   000FA8                     EEDATA          equ	4008	;# 
  1146   000FA9                     EEADR           equ	4009	;# 
  1147   000FAB                     RCSTA           equ	4011	;# 
  1148   000FAB                     RCSTA1          equ	4011	;# 
  1149   000FAC                     TXSTA           equ	4012	;# 
  1150   000FAC                     TXSTA1          equ	4012	;# 
  1151   000FAD                     TXREG           equ	4013	;# 
  1152   000FAD                     TXREG1          equ	4013	;# 
  1153   000FAE                     RCREG           equ	4014	;# 
  1154   000FAE                     RCREG1          equ	4014	;# 
  1155   000FAF                     SPBRG           equ	4015	;# 
  1156   000FAF                     SPBRG1          equ	4015	;# 
  1157   000FB0                     SPBRGH          equ	4016	;# 
  1158   000FB1                     T3CON           equ	4017	;# 
  1159   000FB2                     TMR3            equ	4018	;# 
  1160   000FB2                     TMR3L           equ	4018	;# 
  1161   000FB3                     TMR3H           equ	4019	;# 
  1162   000FB4                     CMCON           equ	4020	;# 
  1163   000FB5                     CVRCON          equ	4021	;# 
  1164   000FB6                     ECCP1AS         equ	4022	;# 
  1165   000FB7                     ECCP1DEL        equ	4023	;# 
  1166   000FB7                     PWM1CON         equ	4023	;# 
  1167   000FB8                     BAUDCON         equ	4024	;# 
  1168   000FB8                     BAUDCTL         equ	4024	;# 
  1169   000FBA                     CCP2CON         equ	4026	;# 
  1170   000FBB                     CCPR2           equ	4027	;# 
  1171   000FBB                     CCPR2L          equ	4027	;# 
  1172   000FBC                     CCPR2H          equ	4028	;# 
  1173   000FBD                     CCP1CON         equ	4029	;# 
  1174   000FBD                     ECCP1CON        equ	4029	;# 
  1175   000FBE                     CCPR1           equ	4030	;# 
  1176   000FBE                     CCPR1L          equ	4030	;# 
  1177   000FBF                     CCPR1H          equ	4031	;# 
  1178   000FC0                     ADCON2          equ	4032	;# 
  1179   000FC1                     ADCON1          equ	4033	;# 
  1180   000FC2                     ADCON0          equ	4034	;# 
  1181   000FC3                     ADRES           equ	4035	;# 
  1182   000FC3                     ADRESL          equ	4035	;# 
  1183   000FC4                     ADRESH          equ	4036	;# 
  1184   000FC5                     SSPCON2         equ	4037	;# 
  1185   000FC6                     SSPCON1         equ	4038	;# 
  1186   000FC7                     SSPSTAT         equ	4039	;# 
  1187   000FC8                     SSPADD          equ	4040	;# 
  1188   000FC9                     SSPBUF          equ	4041	;# 
  1189   000FCA                     T2CON           equ	4042	;# 
  1190   000FCB                     PR2             equ	4043	;# 
  1191   000FCB                     MEMCON          equ	4043	;# 
  1192   000FCC                     TMR2            equ	4044	;# 
  1193   000FCD                     T1CON           equ	4045	;# 
  1194   000FCE                     TMR1            equ	4046	;# 
  1195   000FCE                     TMR1L           equ	4046	;# 
  1196   000FCF                     TMR1H           equ	4047	;# 
  1197   000FD0                     RCON            equ	4048	;# 
  1198   000FD1                     WDTCON          equ	4049	;# 
  1199   000FD2                     HLVDCON         equ	4050	;# 
  1200   000FD2                     LVDCON          equ	4050	;# 
  1201   000FD3                     OSCCON          equ	4051	;# 
  1202   000FD5                     T0CON           equ	4053	;# 
  1203   000FD6                     TMR0            equ	4054	;# 
  1204   000FD6                     TMR0L           equ	4054	;# 
  1205   000FD7                     TMR0H           equ	4055	;# 
  1206   000FD8                     STATUS          equ	4056	;# 
  1207   000FD9                     FSR2            equ	4057	;# 
  1208   000FD9                     FSR2L           equ	4057	;# 
  1209   000FDA                     FSR2H           equ	4058	;# 
  1210   000FDB                     PLUSW2          equ	4059	;# 
  1211   000FDC                     PREINC2         equ	4060	;# 
  1212   000FDD                     POSTDEC2        equ	4061	;# 
  1213   000FDE                     POSTINC2        equ	4062	;# 
  1214   000FDF                     INDF2           equ	4063	;# 
  1215   000FE0                     BSR             equ	4064	;# 
  1216   000FE1                     FSR1            equ	4065	;# 
  1217   000FE1                     FSR1L           equ	4065	;# 
  1218   000FE2                     FSR1H           equ	4066	;# 
  1219   000FE3                     PLUSW1          equ	4067	;# 
  1220   000FE4                     PREINC1         equ	4068	;# 
  1221   000FE5                     POSTDEC1        equ	4069	;# 
  1222   000FE6                     POSTINC1        equ	4070	;# 
  1223   000FE7                     INDF1           equ	4071	;# 
  1224   000FE8                     WREG            equ	4072	;# 
  1225   000FE9                     FSR0            equ	4073	;# 
  1226   000FE9                     FSR0L           equ	4073	;# 
  1227   000FEA                     FSR0H           equ	4074	;# 
  1228   000FEB                     PLUSW0          equ	4075	;# 
  1229   000FEC                     PREINC0         equ	4076	;# 
  1230   000FED                     POSTDEC0        equ	4077	;# 
  1231   000FEE                     POSTINC0        equ	4078	;# 
  1232   000FEF                     INDF0           equ	4079	;# 
  1233   000FF0                     INTCON3         equ	4080	;# 
  1234   000FF1                     INTCON2         equ	4081	;# 
  1235   000FF2                     INTCON          equ	4082	;# 
  1236   000FF3                     PROD            equ	4083	;# 
  1237   000FF3                     PRODL           equ	4083	;# 
  1238   000FF4                     PRODH           equ	4084	;# 
  1239   000FF5                     TABLAT          equ	4085	;# 
  1240   000FF6                     TBLPTR          equ	4086	;# 
  1241   000FF6                     TBLPTRL         equ	4086	;# 
  1242   000FF7                     TBLPTRH         equ	4087	;# 
  1243   000FF8                     TBLPTRU         equ	4088	;# 
  1244   000FF9                     PCLAT           equ	4089	;# 
  1245   000FF9                     PC              equ	4089	;# 
  1246   000FF9                     PCL             equ	4089	;# 
  1247   000FFA                     PCLATH          equ	4090	;# 
  1248   000FFB                     PCLATU          equ	4091	;# 
  1249   000FFC                     STKPTR          equ	4092	;# 
  1250   000FFD                     TOS             equ	4093	;# 
  1251   000FFD                     TOSL            equ	4093	;# 
  1252   000FFE                     TOSH            equ	4094	;# 
  1253   000FFF                     TOSU            equ	4095	;# 
  1254                           
  1255                           	psect	idataCOMRAM
  1256   001B22                     __pidataCOMRAM:
  1257                           	callstack 0
  1258                           
  1259                           ;initializer for _colValues
  1260   001B22  20                 	db	32
  1261   001B23  40                 	db	64
  1262   001B24  10                 	db	16
  1263                           
  1264                           ;initializer for motor_Read@MAX_TIMEOUT
  1265   001B25  03E8               	dw	1000
  1266                           
  1267                           ;initializer for _index
  1268   001B27  04                 	db	4
  1269                           
  1270                           	psect	idataBANK0
  1271   0019EE                     __pidataBANK0:
  1272                           	callstack 0
  1273                           
  1274                           ;initializer for _userUIDs
  1275   0019EE  65                 	db	101
  1276   0019EF  DC                 	db	220
  1277   0019F0  F9                 	db	249
  1278   0019F1  03                 	db	3
  1279   0019F2  43                 	db	67
  1280   0019F3  DC                 	db	220
  1281   0019F4  0D                 	db	13
  1282   0019F5  F9                 	db	249
  1283   0019F6  03                 	db	3
  1284   0019F7  2B                 	db	43
  1285   0019F8  DF                 	db	223
  1286   0019F9  8B                 	db	139
  1287   0019FA  DF                 	db	223
  1288   0019FB  C4                 	db	196
  1289   0019FC  4F                 	db	79
  1290   0019FD  21                 	db	33
  1291   0019FE  32                 	db	50
  1292   0019FF  A9                 	db	169
  1293   001A00  89                 	db	137
  1294   001A01  33                 	db	51
  1295                           
  1296                           ;initializer for controlLED@ledBits
  1297   001A02  01                 	db	1
  1298   001A03  02                 	db	2
  1299   001A04  04                 	db	4
  1300   001A05  08                 	db	8
  1301   001A06  10                 	db	16
  1302   001A07  20                 	db	32
  1303                           
  1304                           ;initializer for _currentTime
  1305   001A08  30                 	db	48
  1306   001A09  30                 	db	48
  1307   001A0A  30                 	db	48
  1308   001A0B  30                 	db	48
  1309                           
  1310                           ;initializer for motorTerminal@hour
  1311   001A0C  30                 	db	48
  1312   001A0D  30                 	db	48
  1313   001A0E  30                 	db	48
  1314   001A0F  30                 	db	48
  1315                           
  1316                           	psect	mediumconst
  1317   001E6A                     __pmediumconst:
  1318                           	callstack 0
  1319   001E6A  00                 	db	0
  1320   001E6B                     printfUID@hex:
  1321                           	callstack 0
  1322   001E6B  30                 	db	48
  1323   001E6C  31                 	db	49
  1324   001E6D  32                 	db	50
  1325   001E6E  33                 	db	51
  1326   001E6F  34                 	db	52
  1327   001E70  35                 	db	53
  1328   001E71  36                 	db	54
  1329   001E72  37                 	db	55
  1330   001E73  38                 	db	56
  1331   001E74  39                 	db	57
  1332   001E75  41                 	db	65
  1333   001E76  42                 	db	66
  1334   001E77  43                 	db	67
  1335   001E78  44                 	db	68
  1336   001E79  45                 	db	69
  1337   001E7A  46                 	db	70
  1338   001E7B  00                 	db	0
  1339   001E7C                     __end_ofprintfUID@hex:
  1340                           	callstack 0
  1341   001E7C                     _keymap:
  1342                           	callstack 0
  1343   001E7C  01                 	db	1
  1344   001E7D  02                 	db	2
  1345   001E7E  03                 	db	3
  1346   001E7F  04                 	db	4
  1347   001E80  05                 	db	5
  1348   001E81  06                 	db	6
  1349   001E82  07                 	db	7
  1350   001E83  08                 	db	8
  1351   001E84  09                 	db	9
  1352   001E85  0A                 	db	10
  1353   001E86  00                 	db	0
  1354   001E87  0B                 	db	11
  1355   001E88                     __end_of_keymap:
  1356                           	callstack 0
  1357   007F92                     _TMR0IF         set	32658
  1358   000FD6                     _TMR0           set	4054
  1359   000FD5                     _T0CON          set	4053
  1360   000FAD                     _TXREG          set	4013
  1361   000FAE                     _RCREG          set	4014
  1362   000F9E                     _PIR1bits       set	3998
  1363   000FB8                     _BAUDCON        set	4024
  1364   000FAF                     _SPBRG          set	4015
  1365   000FAB                     _RCSTA          set	4011
  1366   000FAC                     _TXSTA          set	4012
  1367   000F83                     _PORTD          set	3971
  1368   000F8C                     _LATD           set	3980
  1369   000F95                     _TRISD          set	3989
  1370   000F94                     _TRISCbits      set	3988
  1371   000F82                     _PORTCbits      set	3970
  1372   000F8B                     _LATCbits       set	3979
  1373   000F89                     _LATA           set	3977
  1374   000F96                     _TRISE          set	3990
  1375   000F92                     _TRISA          set	3986
  1376   000F8A                     _LATBbits       set	3978
  1377   000F93                     _TRISBbits      set	3987
  1378   000F96                     _TRISEbits      set	3990
  1379   000FC1                     _ADCON1         set	4033
  1380   000F8D                     _LATEbits       set	3981
  1381   000FF2                     _INTCONbits     set	4082
  1382   001E88                     STR_4:
  1383   001E88  09                 	db	9
  1384   001E89  31                 	db	49	;'1'
  1385   001E8A  2E                 	db	46
  1386   001E8B  20                 	db	32
  1387   001E8C  51                 	db	81	;'Q'
  1388   001E8D  75                 	db	117	;'u'
  1389   001E8E  69                 	db	105	;'i'
  1390   001E8F  20                 	db	32
  1391   001E90  68                 	db	104	;'h'
  1392   001E91  69                 	db	105	;'i'
  1393   001E92  20                 	db	32
  1394   001E93  68                 	db	104	;'h'
  1395   001E94  61                 	db	97	;'a'
  1396   001E95  20                 	db	32
  1397   001E96  61                 	db	97	;'a'
  1398   001E97  20                 	db	32
  1399   001E98  6C                 	db	108	;'l'
  1400   001E99  61                 	db	97	;'a'
  1401   001E9A  20                 	db	32
  1402   001E9B  73                 	db	115	;'s'
  1403   001E9C  61                 	db	97	;'a'
  1404   001E9D  6C                 	db	108	;'l'
  1405   001E9E  61                 	db	97	;'a'
  1406   001E9F  3F                 	db	63	;'?'
  1407   001EA0  0D                 	db	13
  1408   001EA1  0A                 	db	10
  1409   001EA2  09                 	db	9
  1410   001EA3  32                 	db	50	;'2'
  1411   001EA4  2E                 	db	46
  1412   001EA5  20                 	db	32
  1413   001EA6  4D                 	db	77	;'M'
  1414   001EA7  6F                 	db	111	;'o'
  1415   001EA8  73                 	db	115	;'s'
  1416   001EA9  74                 	db	116	;'t'
  1417   001EAA  72                 	db	114	;'r'
  1418   001EAB  61                 	db	97	;'a'
  1419   001EAC  72                 	db	114	;'r'
  1420   001EAD  20                 	db	32
  1421   001EAE  63                 	db	99	;'c'
  1422   001EAF  6F                 	db	111	;'o'
  1423   001EB0  6E                 	db	110	;'n'
  1424   001EB1  66                 	db	102	;'f'
  1425   001EB2  69                 	db	105	;'i'
  1426   001EB3  67                 	db	103	;'g'
  1427   001EB4  75                 	db	117	;'u'
  1428   001EB5  72                 	db	114	;'r'
  1429   001EB6  61                 	db	97	;'a'
  1430   001EB7  63                 	db	99	;'c'
  1431   001EB8  69                 	db	105	;'i'
  1432   001EB9  6F                 	db	111	;'o'
  1433   001EBA  6E                 	db	110	;'n'
  1434   001EBB  73                 	db	115	;'s'
  1435   001EBC  0D                 	db	13
  1436   001EBD  0A                 	db	10
  1437   001EBE  09                 	db	9
  1438   001EBF  33                 	db	51	;'3'
  1439   001EC0  2E                 	db	46
  1440   001EC1  20                 	db	32
  1441   001EC2  4D                 	db	77	;'M'
  1442   001EC3  6F                 	db	111	;'o'
  1443   001EC4  64                 	db	100	;'d'
  1444   001EC5  69                 	db	105	;'i'
  1445   001EC6  66                 	db	102	;'f'
  1446   001EC7  69                 	db	105	;'i'
  1447   001EC8  63                 	db	99	;'c'
  1448   001EC9  61                 	db	97	;'a'
  1449   001ECA  72                 	db	114	;'r'
  1450   001ECB  20                 	db	32
  1451   001ECC  68                 	db	104	;'h'
  1452   001ECD  6F                 	db	111	;'o'
  1453   001ECE  72                 	db	114	;'r'
  1454   001ECF  61                 	db	97	;'a'
  1455   001ED0  20                 	db	32
  1456   001ED1  64                 	db	100	;'d'
  1457   001ED2  65                 	db	101	;'e'
  1458   001ED3  6C                 	db	108	;'l'
  1459   001ED4  20                 	db	32
  1460   001ED5  73                 	db	115	;'s'
  1461   001ED6  69                 	db	105	;'i'
  1462   001ED7  73                 	db	115	;'s'
  1463   001ED8  74                 	db	116	;'t'
  1464   001ED9  65                 	db	101	;'e'
  1465   001EDA  6D                 	db	109	;'m'
  1466   001EDB  61                 	db	97	;'a'
  1467   001EDC  0D                 	db	13
  1468   001EDD  0A                 	db	10
  1469   001EDE  4F                 	db	79	;'O'
  1470   001EDF  70                 	db	112	;'p'
  1471   001EE0  63                 	db	99	;'c'
  1472   001EE1  69                 	db	105	;'i'
  1473   001EE2  C3                 	db	-61
  1474   001EE3  B3                 	db	-77
  1475   001EE4  3A                 	db	58	;':'
  1476   001EE5  20                 	db	32
  1477   001EE6  00                 	db	0
  1478   001EE7                     STR_3:
  1479   001EE7  4D                 	db	77	;'M'
  1480   001EE8  65                 	db	101	;'e'
  1481   001EE9  6E                 	db	110	;'n'
  1482   001EEA  C3                 	db	-61
  1483   001EEB  BA                 	db	-70
  1484   001EEC  20                 	db	32
  1485   001EED  70                 	db	112	;'p'
  1486   001EEE  72                 	db	114	;'r'
  1487   001EEF  69                 	db	105	;'i'
  1488   001EF0  6E                 	db	110	;'n'
  1489   001EF1  63                 	db	99	;'c'
  1490   001EF2  69                 	db	105	;'i'
  1491   001EF3  70                 	db	112	;'p'
  1492   001EF4  61                 	db	97	;'a'
  1493   001EF5  6C                 	db	108	;'l'
  1494   001EF6  0D                 	db	13
  1495   001EF7  0A                 	db	10
  1496   001EF8  2D                 	db	45
  1497   001EF9  2D                 	db	45
  1498   001EFA  2D                 	db	45
  1499   001EFB  2D                 	db	45
  1500   001EFC  2D                 	db	45
  1501   001EFD  2D                 	db	45
  1502   001EFE  2D                 	db	45
  1503   001EFF  2D                 	db	45
  1504   001F00  2D                 	db	45
  1505   001F01  2D                 	db	45
  1506   001F02  2D                 	db	45
  1507   001F03  2D                 	db	45
  1508   001F04  2D                 	db	45
  1509   001F05  2D                 	db	45
  1510   001F06  2D                 	db	45
  1511   001F07  0D                 	db	13
  1512   001F08  0A                 	db	10
  1513   001F09  54                 	db	84	;'T'
  1514   001F0A  72                 	db	114	;'r'
  1515   001F0B  69                 	db	105	;'i'
  1516   001F0C  61                 	db	97	;'a'
  1517   001F0D  20                 	db	32
  1518   001F0E  75                 	db	117	;'u'
  1519   001F0F  6E                 	db	110	;'n'
  1520   001F10  61                 	db	97	;'a'
  1521   001F11  20                 	db	32
  1522   001F12  6F                 	db	111	;'o'
  1523   001F13  70                 	db	112	;'p'
  1524   001F14  63                 	db	99	;'c'
  1525   001F15  69                 	db	105	;'i'
  1526   001F16  C3                 	db	-61
  1527   001F17  B3                 	db	-77
  1528   001F18  3A                 	db	58	;':'
  1529   001F19  0D                 	db	13
  1530   001F1A  0A                 	db	10
  1531   001F1B  00                 	db	0
  1532   001F1C                     STR_8:
  1533   001F1C  4E                 	db	78	;'N'
  1534   001F1D  6F                 	db	111	;'o'
  1535   001F1E  20                 	db	32
  1536   001F1F  68                 	db	104	;'h'
  1537   001F20  69                 	db	105	;'i'
  1538   001F21  20                 	db	32
  1539   001F22  68                 	db	104	;'h'
  1540   001F23  61                 	db	97	;'a'
  1541   001F24  20                 	db	32
  1542   001F25  63                 	db	99	;'c'
  1543   001F26  61                 	db	97	;'a'
  1544   001F27  70                 	db	112	;'p'
  1545   001F28  20                 	db	32
  1546   001F29  75                 	db	117	;'u'
  1547   001F2A  73                 	db	115	;'s'
  1548   001F2B  75                 	db	117	;'u'
  1549   001F2C  61                 	db	97	;'a'
  1550   001F2D  72                 	db	114	;'r'
  1551   001F2E  69                 	db	105	;'i'
  1552   001F2F  20                 	db	32
  1553   001F30  61                 	db	97	;'a'
  1554   001F31  20                 	db	32
  1555   001F32  6C                 	db	108	;'l'
  1556   001F33  61                 	db	97	;'a'
  1557   001F34  20                 	db	32
  1558   001F35  73                 	db	115	;'s'
  1559   001F36  61                 	db	97	;'a'
  1560   001F37  6C                 	db	108	;'l'
  1561   001F38  61                 	db	97	;'a'
  1562   001F39  2E                 	db	46
  1563   001F3A  0D                 	db	13
  1564   001F3B  0A                 	db	10
  1565   001F3C  00                 	db	0
  1566   001F3D                     STR_6:
  1567   001F3D  45                 	db	69	;'E'
  1568   001F3E  52                 	db	82	;'R'
  1569   001F3F  52                 	db	82	;'R'
  1570   001F40  4F                 	db	79	;'O'
  1571   001F41  52                 	db	82	;'R'
  1572   001F42  2E                 	db	46
  1573   001F43  20                 	db	32
  1574   001F44  56                 	db	86	;'V'
  1575   001F45  61                 	db	97	;'a'
  1576   001F46  6C                 	db	108	;'l'
  1577   001F47  6F                 	db	111	;'o'
  1578   001F48  72                 	db	114	;'r'
  1579   001F49  20                 	db	32
  1580   001F4A  69                 	db	105	;'i'
  1581   001F4B  6E                 	db	110	;'n'
  1582   001F4C  74                 	db	116	;'t'
  1583   001F4D  72                 	db	114	;'r'
  1584   001F4E  6F                 	db	111	;'o'
  1585   001F4F  64                 	db	100	;'d'
  1586   001F50  75                 	db	117	;'u'
  1587   001F51  69                 	db	105	;'i'
  1588   001F52  74                 	db	116	;'t'
  1589   001F53  20                 	db	32
  1590   001F54  65                 	db	101	;'e'
  1591   001F55  72                 	db	114	;'r'
  1592   001F56  72                 	db	114	;'r'
  1593   001F57  6F                 	db	111	;'o'
  1594   001F58  6E                 	db	110	;'n'
  1595   001F59  69                 	db	105	;'i'
  1596   001F5A  2E                 	db	46
  1597   001F5B  0D                 	db	13
  1598   001F5C  0A                 	db	10
  1599   001F5D  00                 	db	0
  1600   001F5E                     STR_14:
  1601   001F5E  0D                 	db	13
  1602   001F5F  0A                 	db	10
  1603   001F60  48                 	db	72	;'H'
  1604   001F61  6F                 	db	111	;'o'
  1605   001F62  72                 	db	114	;'r'
  1606   001F63  61                 	db	97	;'a'
  1607   001F64  20                 	db	32
  1608   001F65  69                 	db	105	;'i'
  1609   001F66  6E                 	db	110	;'n'
  1610   001F67  74                 	db	116	;'t'
  1611   001F68  72                 	db	114	;'r'
  1612   001F69  6F                 	db	111	;'o'
  1613   001F6A  64                 	db	100	;'d'
  1614   001F6B  75                 	db	117	;'u'
  1615   001F6C  69                 	db	105	;'i'
  1616   001F6D  64                 	db	100	;'d'
  1617   001F6E  61                 	db	97	;'a'
  1618   001F6F  20                 	db	32
  1619   001F70  63                 	db	99	;'c'
  1620   001F71  6F                 	db	111	;'o'
  1621   001F72  72                 	db	114	;'r'
  1622   001F73  72                 	db	114	;'r'
  1623   001F74  65                 	db	101	;'e'
  1624   001F75  63                 	db	99	;'c'
  1625   001F76  74                 	db	116	;'t'
  1626   001F77  61                 	db	97	;'a'
  1627   001F78  6D                 	db	109	;'m'
  1628   001F79  65                 	db	101	;'e'
  1629   001F7A  6E                 	db	110	;'n'
  1630   001F7B  74                 	db	116	;'t'
  1631   001F7C  0D                 	db	13
  1632   001F7D  0A                 	db	10
  1633   001F7E  00                 	db	0
  1634   001F7F                     STR_13:
  1635   001F7F  49                 	db	73	;'I'
  1636   001F80  6E                 	db	110	;'n'
  1637   001F81  74                 	db	116	;'t'
  1638   001F82  72                 	db	114	;'r'
  1639   001F83  6F                 	db	111	;'o'
  1640   001F84  64                 	db	100	;'d'
  1641   001F85  75                 	db	117	;'u'
  1642   001F86  63                 	db	99	;'c'
  1643   001F87  65                 	db	101	;'e'
  1644   001F88  20                 	db	32
  1645   001F89  6C                 	db	108	;'l'
  1646   001F8A  61                 	db	97	;'a'
  1647   001F8B  20                 	db	32
  1648   001F8C  68                 	db	104	;'h'
  1649   001F8D  6F                 	db	111	;'o'
  1650   001F8E  72                 	db	114	;'r'
  1651   001F8F  61                 	db	97	;'a'
  1652   001F90  20                 	db	32
  1653   001F91  61                 	db	97	;'a'
  1654   001F92  63                 	db	99	;'c'
  1655   001F93  74                 	db	116	;'t'
  1656   001F94  75                 	db	117	;'u'
  1657   001F95  61                 	db	97	;'a'
  1658   001F96  6C                 	db	108	;'l'
  1659   001F97  28                 	db	40
  1660   001F98  48                 	db	72	;'H'
  1661   001F99  48                 	db	72	;'H'
  1662   001F9A  4D                 	db	77	;'M'
  1663   001F9B  4D                 	db	77	;'M'
  1664   001F9C  29                 	db	41
  1665   001F9D  3A                 	db	58	;':'
  1666   001F9E  20                 	db	32
  1667   001F9F  00                 	db	0
  1668   001FA0                     STR_1:
  1669   001FA0  09                 	db	9
  1670   001FA1  4E                 	db	78	;'N'
  1671   001FA2  6F                 	db	111	;'o'
  1672   001FA3  20                 	db	32
  1673   001FA4  68                 	db	104	;'h'
  1674   001FA5  61                 	db	97	;'a'
  1675   001FA6  79                 	db	121	;'y'
  1676   001FA7  20                 	db	32
  1677   001FA8  75                 	db	117	;'u'
  1678   001FA9  73                 	db	115	;'s'
  1679   001FAA  75                 	db	117	;'u'
  1680   001FAB  61                 	db	97	;'a'
  1681   001FAC  72                 	db	114	;'r'
  1682   001FAD  69                 	db	105	;'i'
  1683   001FAE  6F                 	db	111	;'o'
  1684   001FAF  20                 	db	32
  1685   001FB0  63                 	db	99	;'c'
  1686   001FB1  6F                 	db	111	;'o'
  1687   001FB2  6E                 	db	110	;'n'
  1688   001FB3  66                 	db	102	;'f'
  1689   001FB4  69                 	db	105	;'i'
  1690   001FB5  67                 	db	103	;'g'
  1691   001FB6  75                 	db	117	;'u'
  1692   001FB7  72                 	db	114	;'r'
  1693   001FB8  61                 	db	97	;'a'
  1694   001FB9  64                 	db	100	;'d'
  1695   001FBA  6F                 	db	111	;'o'
  1696   001FBB  0D                 	db	13
  1697   001FBC  0A                 	db	10
  1698   001FBD  00                 	db	0
  1699   001FBE                     STR_15:
  1700   001FBE  0D                 	db	13
  1701   001FBF  0A                 	db	10
  1702   001FC0  54                 	db	84	;'T'
  1703   001FC1  61                 	db	97	;'a'
  1704   001FC2  72                 	db	114	;'r'
  1705   001FC3  67                 	db	103	;'g'
  1706   001FC4  65                 	db	101	;'e'
  1707   001FC5  74                 	db	116	;'t'
  1708   001FC6  61                 	db	97	;'a'
  1709   001FC7  20                 	db	32
  1710   001FC8  64                 	db	100	;'d'
  1711   001FC9  65                 	db	101	;'e'
  1712   001FCA  74                 	db	116	;'t'
  1713   001FCB  65                 	db	101	;'e'
  1714   001FCC  63                 	db	99	;'c'
  1715   001FCD  74                 	db	116	;'t'
  1716   001FCE  61                 	db	97	;'a'
  1717   001FCF  64                 	db	100	;'d'
  1718   001FD0  61                 	db	97	;'a'
  1719   001FD1  21                 	db	33
  1720   001FD2  00                 	db	0
  1721   001FD3                     STR_2:
  1722   001FD3  2D                 	db	45
  1723   001FD4  2D                 	db	45
  1724   001FD5  2D                 	db	45
  1725   001FD6  2D                 	db	45
  1726   001FD7  2D                 	db	45
  1727   001FD8  2D                 	db	45
  1728   001FD9  2D                 	db	45
  1729   001FDA  2D                 	db	45
  1730   001FDB  2D                 	db	45
  1731   001FDC  2D                 	db	45
  1732   001FDD  2D                 	db	45
  1733   001FDE  2D                 	db	45
  1734   001FDF  2D                 	db	45
  1735   001FE0  2D                 	db	45
  1736   001FE1  2D                 	db	45
  1737   001FE2  0D                 	db	13
  1738   001FE3  0A                 	db	10
  1739   001FE4  00                 	db	0
  1740   001FE5                     STR_10:
  1741   001FE5  43                 	db	67	;'C'
  1742   001FE6  6F                 	db	111	;'o'
  1743   001FE7  6E                 	db	110	;'n'
  1744   001FE8  66                 	db	102	;'f'
  1745   001FE9  69                 	db	105	;'i'
  1746   001FEA  67                 	db	103	;'g'
  1747   001FEB  75                 	db	117	;'u'
  1748   001FEC  72                 	db	114	;'r'
  1749   001FED  61                 	db	97	;'a'
  1750   001FEE  63                 	db	99	;'c'
  1751   001FEF  69                 	db	105	;'i'
  1752   001FF0  6F                 	db	111	;'o'
  1753   001FF1  6E                 	db	110	;'n'
  1754   001FF2  73                 	db	115	;'s'
  1755   001FF3  3A                 	db	58	;':'
  1756   001FF4  0D                 	db	13
  1757   001FF5  0A                 	db	10
  1758   001FF6  00                 	db	0
  1759   001FF7                     STR_7:
  1760   001FF7  55                 	db	85	;'U'
  1761   001FF8  73                 	db	115	;'s'
  1762   001FF9  75                 	db	117	;'u'
  1763   001FFA  61                 	db	97	;'a'
  1764   001FFB  72                 	db	114	;'r'
  1765   001FFC  69                 	db	105	;'i'
  1766   001FFD  20                 	db	32
  1767   001FFE  00                 	db	0
  1768   001FF7                     STR_11          equ	STR_7
  1769   001FE2                     STR_5           equ	STR_2+15
  1770   001FE2                     STR_9           equ	STR_2+15
  1771   001FE2                     STR_12          equ	STR_2+15
  1772   001FFF  00                 	db	0	; dummy byte at the end
  1773   001E6A                     __smallconst    set	__pmediumconst
  1774   001E6A                     __mediumconst   set	__pmediumconst
  1775   000002                     __activetblptr  equ	2
  1776                           
  1777                           ; #config settings
  1778                           
  1779                           	psect	cinit
  1780   00138A                     __pcinit:
  1781                           	callstack 0
  1782   00138A                     start_initialization:
  1783                           	callstack 0
  1784   00138A                     __initialization:
  1785                           	callstack 0
  1786                           
  1787                           ; Initialize objects allocated to BANK0 (34 bytes)
  1788                           ; load TBLPTR registers with __pidataBANK0
  1789   00138A  0EEE               	movlw	low __pidataBANK0
  1790   00138C  6EF6               	movwf	tblptrl,c
  1791   00138E  0E19               	movlw	high __pidataBANK0
  1792   001390  6EF7               	movwf	tblptrh,c
  1793   001392  0E00               	movlw	low (__pidataBANK0 shr (0+16))
  1794   001394  6EF8               	movwf	tblptru,c
  1795   001396  EE00  F0C3         	lfsr	0,__pdataBANK0
  1796   00139A  EE10 F022          	lfsr	1,34
  1797   00139E                     copy_data0:
  1798   00139E  0009               	tblrd		*+
  1799   0013A0  CFF5 FFEE          	movff	tablat,postinc0
  1800   0013A4  50E5               	movf	postdec1,w,c
  1801   0013A6  50E1               	movf	fsr1l,w,c
  1802   0013A8  E1FA               	bnz	copy_data0
  1803                           
  1804                           ; Initialize objects allocated to COMRAM (6 bytes)
  1805                           ; load TBLPTR registers with __pidataCOMRAM
  1806   0013AA  0E22               	movlw	low __pidataCOMRAM
  1807   0013AC  6EF6               	movwf	tblptrl,c
  1808   0013AE  0E1B               	movlw	high __pidataCOMRAM
  1809   0013B0  6EF7               	movwf	tblptrh,c
  1810   0013B2  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
  1811   0013B4  6EF8               	movwf	tblptru,c
  1812   0013B6  EE00  F077         	lfsr	0,__pdataCOMRAM
  1813   0013BA  EE10 F006          	lfsr	1,6
  1814   0013BE                     copy_data1:
  1815   0013BE  0009               	tblrd		*+
  1816   0013C0  CFF5 FFEE          	movff	tablat,postinc0
  1817   0013C4  50E5               	movf	postdec1,w,c
  1818   0013C6  50E1               	movf	fsr1l,w,c
  1819   0013C8  E1FA               	bnz	copy_data1
  1820                           
  1821                           ; Clear objects allocated to BANK1 (80 bytes)
  1822   0013CA  EE01  F000         	lfsr	0,__pbssBANK1
  1823   0013CE  0E50               	movlw	80
  1824   0013D0                     clear_0:
  1825   0013D0  6AEE               	clrf	postinc0,c
  1826   0013D2  06E8               	decf	wreg,f,c
  1827   0013D4  E1FD               	bnz	clear_0
  1828                           
  1829                           ; Clear objects allocated to BANK0 (67 bytes)
  1830   0013D6  EE00  F080         	lfsr	0,__pbssBANK0
  1831   0013DA  0E43               	movlw	67
  1832   0013DC                     clear_1:
  1833   0013DC  6AEE               	clrf	postinc0,c
  1834   0013DE  06E8               	decf	wreg,f,c
  1835   0013E0  E1FD               	bnz	clear_1
  1836                           
  1837                           ; Clear objects allocated to COMRAM (84 bytes)
  1838   0013E2  EE00  F001         	lfsr	0,__pbssCOMRAM
  1839   0013E6  0E54               	movlw	84
  1840   0013E8                     clear_2:
  1841   0013E8  6AEE               	clrf	postinc0,c
  1842   0013EA  06E8               	decf	wreg,f,c
  1843   0013EC  E1FD               	bnz	clear_2
  1844   0013EE                     end_of_initialization:
  1845                           	callstack 0
  1846   0013EE                     __end_of__initialization:
  1847                           	callstack 0
  1848   0013EE  907D               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
  1849   0013F0  927D               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  1850   0013F2  0E00               	movlw	low (__Lmediumconst shr (0+16))
  1851   0013F4  6EF8               	movwf	tblptru,c
  1852   0013F6  0100               	movlb	0
  1853   0013F8  EF0A  F00C         	goto	_main	;jump to C main() function
  1854                           
  1855                           	psect	bssCOMRAM
  1856   000001                     __pbssCOMRAM:
  1857                           	callstack 0
  1858   000001                     motor_RFID@UID:
  1859                           	callstack 0
  1860   000001                     	ds	6
  1861   000007                     _Tics:
  1862                           	callstack 0
  1863   000007                     	ds	4
  1864   00000B                     motor_LEDs@lastTics:
  1865                           	callstack 0
  1866   00000B                     	ds	4
  1867   00000F                     _str_ptr:
  1868                           	callstack 0
  1869   00000F                     	ds	2
  1870   000011                     	ds	2
  1871   000013                     motor_Read@timeout_counter:
  1872                           	callstack 0
  1873   000013                     	ds	2
  1874   000015                     setLed@ledIndex:
  1875                           	callstack 0
  1876   000015                     	ds	1
  1877   000016                     setLed@modeLED:
  1878                           	callstack 0
  1879   000016                     	ds	1
  1880   000017                     motor_datos@lastChar:
  1881                           	callstack 0
  1882   000017                     	ds	1
  1883   000018                     motor_datos@pointer:
  1884                           	callstack 0
  1885   000018                     	ds	1
  1886   000019                     motor_datos@state:
  1887                           	callstack 0
  1888   000019                     	ds	1
  1889   00001A                     motor_setCurrentUser@state_setCurrentUser:
  1890                           	callstack 0
  1891   00001A                     	ds	1
  1892   00001B                     _new_user:
  1893                           	callstack 0
  1894   00001B                     	ds	1
  1895   00001C                     _new_configuration:
  1896                           	callstack 0
  1897   00001C                     	ds	1
  1898   00001D                     motorTerminal@userNumber:
  1899                           	callstack 0
  1900   00001D                     	ds	1
  1901   00001E                     motorTerminal@index:
  1902                           	callstack 0
  1903   00001E                     	ds	1
  1904   00001F                     motorTerminal@state:
  1905                           	callstack 0
  1906   00001F                     	ds	1
  1907   000020                     _sending_string:
  1908                           	callstack 0
  1909   000020                     	ds	1
  1910   000021                     _hashtag_pressed:
  1911                           	callstack 0
  1912   000021                     	ds	1
  1913   000022                     _state_str:
  1914                           	callstack 0
  1915   000022                     	ds	1
  1916   000023                     _state:
  1917                           	callstack 0
  1918   000023                     	ds	1
  1919   000024                     _tecla:
  1920                           	callstack 0
  1921   000024                     	ds	1
  1922   000025                     _Columnas:
  1923                           	callstack 0
  1924   000025                     	ds	1
  1925   000026                     _Filas:
  1926                           	callstack 0
  1927   000026                     	ds	1
  1928   000027                     motor_RFID@value:
  1929                           	callstack 0
  1930   000027                     	ds	1
  1931   000028                     motor_RFID@addr:
  1932                           	callstack 0
  1933   000028                     	ds	1
  1934   000029                     motor_RFID@operation_pending:
  1935                           	callstack 0
  1936   000029                     	ds	1
  1937   00002A                     motor_RFID@last_state:
  1938                           	callstack 0
  1939   00002A                     	ds	1
  1940   00002B                     	ds	1
  1941   00002C                     motor_RFID@cardRemoved:
  1942                           	callstack 0
  1943   00002C                     	ds	1
  1944   00002D                     motor_RFID@backBitsCalc:
  1945                           	callstack 0
  1946   00002D                     	ds	1
  1947   00002E                     motor_RFID@fifoLevel:
  1948                           	callstack 0
  1949   00002E                     	ds	1
  1950   00002F                     motor_RFID@lastBitsVal:
  1951                           	callstack 0
  1952   00002F                     	ds	1
  1953   000030                     motor_RFID@tempRegValue:
  1954                           	callstack 0
  1955   000030                     	ds	1
  1956   000031                     motor_RFID@allZero:
  1957                           	callstack 0
  1958   000031                     	ds	1
  1959   000032                     motor_RFID@checksum:
  1960                           	callstack 0
  1961   000032                     	ds	1
  1962   000033                     motor_RFID@TagType:
  1963                           	callstack 0
  1964   000033                     	ds	1
  1965   000034                     	ds	1
  1966   000035                     motor_RFID@i:
  1967                           	callstack 0
  1968   000035                     	ds	1
  1969   000036                     motor_RFID@n:
  1970                           	callstack 0
  1971   000036                     	ds	1
  1972   000037                     motor_RFID@waitIRq:
  1973                           	callstack 0
  1974   000037                     	ds	1
  1975   000038                     motor_RFID@irqEn:
  1976                           	callstack 0
  1977   000038                     	ds	1
  1978   000039                     motor_RFID@substate:
  1979                           	callstack 0
  1980   000039                     	ds	1
  1981   00003A                     motor_RFID@state:
  1982                           	callstack 0
  1983   00003A                     	ds	1
  1984   00003B                     motor_Read@ucResult:
  1985                           	callstack 0
  1986   00003B                     	ds	1
  1987   00003C                     _ColumnAct:
  1988                           	callstack 0
  1989   00003C                     	ds	1
  1990   00003D                     _RowAct:
  1991                           	callstack 0
  1992   00003D                     	ds	1
  1993   00003E                     _Columns:
  1994                           	callstack 0
  1995   00003E                     	ds	1
  1996   00003F                     _Rows:
  1997                           	callstack 0
  1998   00003F                     	ds	1
  1999   000040                     _currentUser:
  2000                           	callstack 0
  2001   000040                     	ds	5
  2002   000045                     motor_RFID@currentUser:
  2003                           	callstack 0
  2004   000045                     	ds	5
  2005   00004A                     _timer@TAD_TECLADO$F744:
  2006                           	callstack 0
  2007   00004A                     	ds	1
  2008   00004B                     motor_Read@ucAddr:
  2009                           	callstack 0
  2010   00004B                     	ds	1
  2011   00004C                     motor_Read@bit_count:
  2012                           	callstack 0
  2013   00004C                     	ds	1
  2014   00004D                     motor_Write@ucValue:
  2015                           	callstack 0
  2016   00004D                     	ds	1
  2017   00004E                     motor_Write@ucAddr:
  2018                           	callstack 0
  2019   00004E                     	ds	1
  2020   00004F                     motor_Write@bit_count:
  2021                           	callstack 0
  2022   00004F                     	ds	1
  2023   000050                     _card_timer:
  2024                           	callstack 0
  2025   000050                     	ds	1
  2026   000051                     _state_write:
  2027                           	callstack 0
  2028   000051                     	ds	1
  2029   000052                     _state_read:
  2030                           	callstack 0
  2031   000052                     	ds	1
  2032   000053                     _timer:
  2033                           	callstack 0
  2034   000053                     	ds	1
  2035   000054                     _Timer:
  2036                           	callstack 0
  2037   000054                     	ds	1
  2038                           
  2039                           	psect	dataCOMRAM
  2040   000077                     __pdataCOMRAM:
  2041                           	callstack 0
  2042   000077                     _colValues:
  2043                           	callstack 0
  2044   000077                     	ds	3
  2045   00007A                     	ds	2
  2046   00007C                     _index:
  2047                           	callstack 0
  2048   00007C                     	ds	1
  2049                           
  2050                           	psect	bssBANK0
  2051   000080                     __pbssBANK0:
  2052                           	callstack 0
  2053   000080                     _configurations:
  2054                           	callstack 0
  2055   000080                     	ds	30
  2056   00009E                     _Timers:
  2057                           	callstack 0
  2058   00009E                     	ds	20
  2059   0000B2                     	ds	6
  2060   0000B8                     _ActualLeds:
  2061                           	callstack 0
  2062   0000B8                     	ds	6
  2063   0000BE                     motorTerminal@currentUser:
  2064                           	callstack 0
  2065   0000BE                     	ds	5
  2066                           
  2067                           	psect	dataBANK0
  2068   0000C3                     __pdataBANK0:
  2069                           	callstack 0
  2070   0000C3                     _userUIDs:
  2071                           	callstack 0
  2072   0000C3                     	ds	20
  2073   0000D7                     controlLED@ledBits:
  2074                           	callstack 0
  2075   0000D7                     	ds	6
  2076   0000DD                     _currentTime:
  2077                           	callstack 0
  2078   0000DD                     	ds	4
  2079   0000E1                     motorTerminal@hour:
  2080                           	callstack 0
  2081   0000E1                     	ds	4
  2082                           
  2083                           	psect	bssBANK1
  2084   000100                     __pbssBANK1:
  2085                           	callstack 0
  2086   000100                     printfUID@buffer:
  2087                           	callstack 0
  2088   000100                     	ds	80
  2089                           
  2090                           	psect	cstackCOMRAM
  2091   000055                     __pcstackCOMRAM:
  2092                           	callstack 0
  2093   000055                     ??_LowRSI:
  2094                           
  2095                           ; 1 bytes @ 0x0
  2096   000055                     	ds	1
  2097   000056                     ?_Terminal_TXAvailable:
  2098                           	callstack 0
  2099   000056                     ?_TI_GetTics:
  2100                           	callstack 0
  2101   000056                     controlLED@estado:
  2102                           	callstack 0
  2103   000056                     delay_us@howMany:
  2104                           	callstack 0
  2105   000056                     initData@i:
  2106                           	callstack 0
  2107   000056                     getActualUID@UID:
  2108                           	callstack 0
  2109   000056                     getActualLeds@leds:
  2110                           	callstack 0
  2111   000056                     saveHourToData@hour:
  2112                           	callstack 0
  2113   000056                     setIndex@indexActual:
  2114                           	callstack 0
  2115   000056                     setLEDIntensity@ledIndex:
  2116                           	callstack 0
  2117   000056                     TI_Init@counter:
  2118                           	callstack 0
  2119   000056                     TI_NewTimer@TimerHandle:
  2120                           	callstack 0
  2121   000056                     TI_ResetTics@TimerHandle:
  2122                           	callstack 0
  2123   000056                     ??_EscriuPrimeraOrdre:
  2124   000056                     ??_CantaPartAlta:
  2125   000056                     ??_CantaPartBaixa:
  2126   000056                     ??_GetTecla:
  2127   000056                     
  2128                           ; 1 bytes @ 0x1
  2129   000056                     	ds	1
  2130   000057                     CantaPartAlta@c:
  2131                           	callstack 0
  2132   000057                     CantaPartBaixa@c:
  2133                           	callstack 0
  2134   000057                     EscriuPrimeraOrdre@ordre:
  2135                           	callstack 0
  2136   000057                     delay_us@x:
  2137                           	callstack 0
  2138   000057                     initData@j:
  2139                           	callstack 0
  2140   000057                     getActualUID@userIndex:
  2141                           	callstack 0
  2142   000057                     getActualLeds@userIndex:
  2143                           	callstack 0
  2144   000057                     saveHourToData@i:
  2145                           	callstack 0
  2146   000057                     setLEDIntensity@intensity:
  2147                           	callstack 0
  2148   000057                     _controlLED$455:
  2149                           	callstack 0
  2150   000057                     
  2151                           ; 1 bytes @ 0x2
  2152   000057                     	ds	1
  2153   000058                     CantaIR@IR:
  2154                           	callstack 0
  2155   000058                     CantaData@Data:
  2156                           	callstack 0
  2157   000058                     processBit@val:
  2158                           	callstack 0
  2159   000058                     GetTecla@columna:
  2160                           	callstack 0
  2161   000058                     initData@i_884:
  2162                           	callstack 0
  2163   000058                     getActualUID@i_889:
  2164                           	callstack 0
  2165   000058                     getActualLeds@i:
  2166                           	callstack 0
  2167   000058                     setLEDIntensity@userIndex:
  2168                           	callstack 0
  2169   000058                     TI_NewTimer@Comptador:
  2170                           	callstack 0
  2171   000058                     ??_Terminal_TXAvailable:
  2172   000058                     
  2173                           ; 1 bytes @ 0x3
  2174   000058                     	ds	1
  2175   000059                     controlLED@ledActual:
  2176                           	callstack 0
  2177   000059                     processBit@bit_count:
  2178                           	callstack 0
  2179   000059                     GetTecla@fila:
  2180                           	callstack 0
  2181   000059                     Terminal_SendChar@c:
  2182                           	callstack 0
  2183   000059                     motor_SendChar@c:
  2184                           	callstack 0
  2185   000059                     initData@i_882:
  2186                           	callstack 0
  2187   000059                     getActualUID@i:
  2188                           	callstack 0
  2189   000059                     getActualLeds@i_895:
  2190                           	callstack 0
  2191   000059                     setLed@tecla:
  2192                           	callstack 0
  2193   000059                     
  2194                           ; 1 bytes @ 0x4
  2195   000059                     	ds	1
  2196   00005A                     processBit@state:
  2197                           	callstack 0
  2198   00005A                     getActualUID@i_890:
  2199                           	callstack 0
  2200   00005A                     motor_StartSendString@str:
  2201                           	callstack 0
  2202   00005A                     ??_TI_GetTics:
  2203   00005A                     
  2204                           ; 1 bytes @ 0x5
  2205   00005A                     	ds	1
  2206   00005B                     processBit@next_state:
  2207                           	callstack 0
  2208                           
  2209                           ; 1 bytes @ 0x6
  2210   00005B                     	ds	1
  2211   00005C                     printfUID@currentUser:
  2212                           	callstack 0
  2213   00005C                     ??_processBit:
  2214   00005C                     
  2215                           ; 1 bytes @ 0x7
  2216   00005C                     	ds	1
  2217   00005D                     motor_Write@value:
  2218                           	callstack 0
  2219   00005D                     printfUID@userIndex:
  2220                           	callstack 0
  2221   00005D                     ??_motor_Read:
  2222                           
  2223                           ; 1 bytes @ 0x8
  2224   00005D                     	ds	1
  2225   00005E                     motor_Write@addr:
  2226                           	callstack 0
  2227   00005E                     motor_Read@addr:
  2228                           	callstack 0
  2229   00005E                     printfUID@extraString:
  2230                           	callstack 0
  2231   00005E                     TI_GetTics@CopiaTicsActual:
  2232                           	callstack 0
  2233   00005E                     
  2234                           ; 1 bytes @ 0x9
  2235   00005E                     	ds	1
  2236   00005F                     _motor_Read$688:
  2237                           	callstack 0
  2238                           
  2239                           ; 2 bytes @ 0xA
  2240   00005F                     	ds	1
  2241   000060                     ??_printfUID:
  2242                           
  2243                           ; 1 bytes @ 0xB
  2244   000060                     	ds	1
  2245   000061                     initRFID@regVal:
  2246                           	callstack 0
  2247   000061                     
  2248                           ; 1 bytes @ 0xC
  2249   000061                     	ds	1
  2250   000062                     TI_GetTics@TimerHandle:
  2251                           	callstack 0
  2252   000062                     printfUID@leds:
  2253                           	callstack 0
  2254                           
  2255                           ; 6 bytes @ 0xD
  2256   000062                     	ds	1
  2257   000063                     Espera@Timer:
  2258                           	callstack 0
  2259   000063                     ??_motor_LEDs:
  2260                           
  2261                           ; 1 bytes @ 0xE
  2262   000063                     	ds	2
  2263   000065                     Espera@ms:
  2264                           	callstack 0
  2265                           
  2266                           ; 2 bytes @ 0x10
  2267   000065                     	ds	2
  2268   000067                     ??_Espera:
  2269                           
  2270                           ; 1 bytes @ 0x12
  2271   000067                     	ds	1
  2272   000068                     printfUID@val:
  2273                           	callstack 0
  2274   000068                     motor_LEDs@currentTics:
  2275                           	callstack 0
  2276                           
  2277                           ; 4 bytes @ 0x13
  2278   000068                     	ds	1
  2279   000069                     printfUID@i:
  2280                           	callstack 0
  2281                           
  2282                           ; 1 bytes @ 0x14
  2283   000069                     	ds	1
  2284   00006A                     printfUID@ptr:
  2285                           	callstack 0
  2286                           
  2287                           ; 2 bytes @ 0x15
  2288   00006A                     	ds	1
  2289   00006B                     LcInit@columns:
  2290                           	callstack 0
  2291   00006B                     LcGotoXY@Row:
  2292                           	callstack 0
  2293   00006B                     
  2294                           ; 1 bytes @ 0x16
  2295   00006B                     	ds	1
  2296   00006C                     LcInit@rows:
  2297                           	callstack 0
  2298   00006C                     motor_LEDs@i:
  2299                           	callstack 0
  2300   00006C                     motorTerminal@opcion:
  2301                           	callstack 0
  2302   00006C                     motor_setCurrentUser@UID1:
  2303                           	callstack 0
  2304   00006C                     ??_LcGotoXY:
  2305                           
  2306                           ; 1 bytes @ 0x17
  2307   00006C                     	ds	1
  2308   00006D                     motor_LEDs@i_461:
  2309                           	callstack 0
  2310   00006D                     motorTerminal@currentUserIndex:
  2311                           	callstack 0
  2312   00006D                     motor_setCurrentUser@UID2:
  2313                           	callstack 0
  2314   00006D                     LcInit@i:
  2315                           	callstack 0
  2316                           
  2317                           ; 2 bytes @ 0x18
  2318   00006D                     	ds	1
  2319   00006E                     motor_setCurrentUser@UID3:
  2320                           	callstack 0
  2321   00006E                     _LcGotoXY$404:
  2322                           	callstack 0
  2323                           
  2324                           ; 2 bytes @ 0x19
  2325   00006E                     	ds	1
  2326   00006F                     motor_setCurrentUser@UID4:
  2327                           	callstack 0
  2328                           
  2329                           ; 1 bytes @ 0x1A
  2330   00006F                     	ds	1
  2331   000070                     motor_setCurrentUser@UID0:
  2332                           	callstack 0
  2333   000070                     LcGotoXY@Fisics:
  2334                           	callstack 0
  2335   000070                     
  2336                           ; 1 bytes @ 0x1B
  2337   000070                     	ds	1
  2338   000071                     ??_motor_RFID:
  2339                           
  2340                           ; 1 bytes @ 0x1C
  2341   000071                     	ds	1
  2342   000072                     LcGotoXY@Column:
  2343                           	callstack 0
  2344                           
  2345                           ; 1 bytes @ 0x1D
  2346   000072                     	ds	1
  2347   000073                     LcPutChar@c:
  2348                           	callstack 0
  2349   000073                     _motor_RFID$726:
  2350                           	callstack 0
  2351   000073                     
  2352                           ; 1 bytes @ 0x1E
  2353   000073                     	ds	1
  2354   000074                     _motor_datos$914:
  2355                           	callstack 0
  2356   000074                     
  2357                           ; 1 bytes @ 0x1F
  2358   000074                     	ds	1
  2359   000075                     motor_RFID@flag:
  2360                           	callstack 0
  2361                           
  2362                           ; 1 bytes @ 0x20
  2363   000075                     	ds	1
  2364   000076                     motor_datos@i:
  2365                           	callstack 0
  2366                           
  2367                           ; 1 bytes @ 0x21
  2368   000076                     	ds	1
  2369   000077                     
  2370                           ; 1 bytes @ 0x22
  2371 ;;
  2372 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  2373 ;;
  2374 ;; *************** function _main *****************
  2375 ;; Defined at:
  2376 ;;		line 39 in file "main.c"
  2377 ;; Parameters:    Size  Location     Type
  2378 ;;		None
  2379 ;; Auto vars:     Size  Location     Type
  2380 ;;		None
  2381 ;; Return value:  Size  Location     Type
  2382 ;;                  1    wreg      void 
  2383 ;; Registers used:
  2384 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2385 ;; Tracked objects:
  2386 ;;		On entry : 0/0
  2387 ;;		On exit  : 0/0
  2388 ;;		Unchanged: 0/0
  2389 ;; Data sizes:     COMRAM   BANK0   BANK1
  2390 ;;      Params:         0       0       0
  2391 ;;      Locals:         0       0       0
  2392 ;;      Temps:          0       0       0
  2393 ;;      Totals:         0       0       0
  2394 ;;Total ram usage:        0 bytes
  2395 ;; Hardware stack levels required when called: 10
  2396 ;; This function calls:
  2397 ;;		_LcInit
  2398 ;;		_TI_Init
  2399 ;;		_Terminal_Init
  2400 ;;		_initData
  2401 ;;		_initLeds
  2402 ;;		_initPorts
  2403 ;;		_initRFID
  2404 ;;		_initTeclado
  2405 ;;		_motorTeclado
  2406 ;;		_motorTerminal
  2407 ;;		_motor_LEDs
  2408 ;;		_motor_RFID
  2409 ;;		_motor_datos
  2410 ;; This function is called by:
  2411 ;;		Startup code after reset
  2412 ;; This function uses a non-reentrant model
  2413 ;;
  2414                           
  2415                           	psect	text0
  2416   001814                     __ptext0:
  2417                           	callstack 0
  2418   001814                     _main:
  2419                           	callstack 21
  2420                           
  2421                           ;main.c: 40:  ADCON1 = 0x0F;
  2422                           
  2423                           ;incstack = 0
  2424   001814  EC95  F00C         	call	_TI_Init	;wreg free
  2425                           
  2426                           ;main.c: 41:  TRISEbits.TRISE2 = 0;
  2427   001818  EC2D  F00D         	call	_initTeclado	;wreg free
  2428                           
  2429                           ;main.c: 42: }
  2430   00181C  ECCB  F007         	call	_initRFID	;wreg free
  2431                           
  2432                           ;main.c: 43: 
  2433   001820  EC6F  F00D         	call	_Terminal_Init	;wreg free
  2434                           
  2435                           ;main.c: 44: 
  2436   001824  EC8D  F00D         	call	_initPorts	;wreg free
  2437                           
  2438                           ;main.c: 45: 
  2439   001828  EC77  F00D         	call	_initLeds	;wreg free
  2440                           
  2441                           ;main.c: 46: void ProcessKey(unsigned char key) {
  2442   00182C  0E10               	movlw	16
  2443   00182E  6E6B               	movwf	LcInit@columns^0,c
  2444   001830  0E02               	movlw	2
  2445   001832  ECEA  F006         	call	_LcInit
  2446                           
  2447                           ;main.c: 47: 
  2448   001836  EC93  F00B         	call	_initData	;wreg free
  2449   00183A  8EF2               	bsf	242,7,c	;volatile
  2450   00183C  9CF2               	bcf	242,6,c	;volatile
  2451   00183E                     l4735:
  2452   00183E  EC6C  F006         	call	_motorTeclado	;wreg free
  2453   001842  ECBC  F004         	call	_motorTerminal	;wreg free
  2454   001846  EC15  F000         	call	_motor_RFID	;wreg free
  2455   00184A  EC61  F007         	call	_motor_LEDs	;wreg free
  2456   00184E  EC9C  F008         	call	_motor_datos	;wreg free
  2457   001852  748D               	btg	141,2,c	;volatile
  2458   001854  D7F4               	goto	l4735
  2459   001856                     __end_of_main:
  2460                           	callstack 0
  2461                           
  2462 ;; *************** function _motor_datos *****************
  2463 ;; Defined at:
  2464 ;;		line 146 in file "TAD_DATOS.c"
  2465 ;; Parameters:    Size  Location     Type
  2466 ;;		None
  2467 ;; Auto vars:     Size  Location     Type
  2468 ;;  i               1   33[COMRAM] unsigned char 
  2469 ;; Return value:  Size  Location     Type
  2470 ;;                  1    wreg      void 
  2471 ;; Registers used:
  2472 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2473 ;; Tracked objects:
  2474 ;;		On entry : 0/0
  2475 ;;		On exit  : 0/0
  2476 ;;		Unchanged: 0/0
  2477 ;; Data sizes:     COMRAM   BANK0   BANK1
  2478 ;;      Params:         0       0       0
  2479 ;;      Locals:         3       0       0
  2480 ;;      Temps:          0       0       0
  2481 ;;      Totals:         3       0       0
  2482 ;;Total ram usage:        3 bytes
  2483 ;; Hardware stack levels used: 1
  2484 ;; Hardware stack levels required when called: 8
  2485 ;; This function calls:
  2486 ;;		_LcPutChar
  2487 ;; This function is called by:
  2488 ;;		_main
  2489 ;; This function uses a non-reentrant model
  2490 ;;
  2491                           
  2492                           	psect	text1
  2493   001138                     __ptext1:
  2494                           	callstack 0
  2495   001138                     _motor_datos:
  2496                           	callstack 22
  2497                           
  2498                           ;TAD_DATOS.c: 147:     static char state = 0;;TAD_DATOS.c: 148:     static char pointer 
      +                          = 0;;TAD_DATOS.c: 149:     static unsigned char lastChar;;TAD_DATOS.c: 151:     switch(s
      +                          tate) {
  2499                           
  2500                           ;incstack = 0
  2501   001138  D057               	goto	l4723
  2502   00113A                     l4677:
  2503                           
  2504                           ;TAD_DATOS.c: 153:             if(new_configuration || new_user) {
  2505   00113A  501C               	movf	_new_configuration^0,w,c
  2506   00113C  A4D8               	btfss	status,2,c
  2507   00113E  D003               	goto	u4320
  2508   001140  501B               	movf	_new_user^0,w,c
  2509   001142  B4D8               	btfsc	status,2,c
  2510   001144  0012               	return	
  2511   001146                     u4320:
  2512                           
  2513                           ;TAD_DATOS.c: 154:                 new_configuration = new_user = 0;
  2514   001146  6A1B               	clrf	_new_user^0,c
  2515   001148  6A1C               	clrf	_new_configuration^0,c
  2516                           
  2517                           ;TAD_DATOS.c: 155:                 state = 1;
  2518   00114A  0E01               	movlw	1
  2519   00114C  6E19               	movwf	motor_datos@state^0,c
  2520   00114E  0012               	return	
  2521   001150                     l832:
  2522                           
  2523                           ;TAD_DATOS.c: 160:             lastChar = currentUser[4];
  2524   001150  C044  F017         	movff	_currentUser+4,motor_datos@lastChar
  2525                           
  2526                           ;TAD_DATOS.c: 161:             LcPutChar((lastChar < 10) ? ('0' + lastChar) : ('A' + (la
      +                          stChar - 10)));
  2527   001154  0E09               	movlw	9
  2528   001156  6417               	cpfsgt	motor_datos@lastChar^0,c
  2529   001158  D002               	goto	l4687
  2530   00115A  0E37               	movlw	55
  2531   00115C  D001               	goto	L1
  2532   00115E                     l4687:
  2533   00115E  0E30               	movlw	48
  2534   001160                     L1:
  2535   001160  2417               	addwf	motor_datos@lastChar^0,w,c
  2536   001162  6E74               	movwf	_motor_datos$914^0,c
  2537   001164  6A75               	clrf	(_motor_datos$914+1)^0,c
  2538   001166  0E00               	movlw	0
  2539   001168  2275               	addwfc	(_motor_datos$914+1)^0,f,c
  2540   00116A  5074               	movf	_motor_datos$914^0,w,c
  2541   00116C  EC8B  F009         	call	_LcPutChar
  2542                           
  2543                           ;TAD_DATOS.c: 162:             LcPutChar(' ');
  2544   001170  0E20               	movlw	32
  2545   001172  EC8B  F009         	call	_LcPutChar
  2546                           
  2547                           ;TAD_DATOS.c: 163:             state = 2;
  2548   001176  0E02               	movlw	2
  2549   001178  6E19               	movwf	motor_datos@state^0,c
  2550                           
  2551                           ;TAD_DATOS.c: 164:             break;
  2552   00117A  0012               	return	
  2553   00117C                     l837:
  2554                           
  2555                           ;TAD_DATOS.c: 167:             for(char i = 0; i < 4; i++) {
  2556   00117C  6A76               	clrf	motor_datos@i^0,c
  2557   00117E                     l4699:
  2558                           
  2559                           ;TAD_DATOS.c: 168:                 LcPutChar(currentTime[i]);
  2560   00117E  5076               	movf	motor_datos@i^0,w,c
  2561   001180  0FDD               	addlw	low _currentTime
  2562   001182  6ED9               	movwf	fsr2l,c
  2563   001184  6ADA               	clrf	fsr2h,c
  2564   001186  50DF               	movf	indf2,w,c
  2565   001188  EC8B  F009         	call	_LcPutChar
  2566                           
  2567                           ;TAD_DATOS.c: 169:                 if(i == 1) LcPutChar(':');
  2568   00118C  0476               	decf	motor_datos@i^0,w,c
  2569   00118E  A4D8               	btfss	status,2,c
  2570   001190  D003               	goto	l4705
  2571   001192  0E3A               	movlw	58
  2572   001194  EC8B  F009         	call	_LcPutChar
  2573   001198                     l4705:
  2574                           
  2575                           ;TAD_DATOS.c: 170:             }
  2576   001198  2A76               	incf	motor_datos@i^0,f,c
  2577   00119A  0E03               	movlw	3
  2578   00119C  6476               	cpfsgt	motor_datos@i^0,c
  2579   00119E  D7EF               	goto	l4699
  2580                           
  2581                           ;TAD_DATOS.c: 171:             LcPutChar(' ');
  2582   0011A0  0E20               	movlw	32
  2583   0011A2  EC8B  F009         	call	_LcPutChar
  2584                           
  2585                           ;TAD_DATOS.c: 172:             pointer = 0;
  2586   0011A6  6A18               	clrf	motor_datos@pointer^0,c
  2587                           
  2588                           ;TAD_DATOS.c: 173:             state = 3;
  2589   0011A8  0E03               	movlw	3
  2590   0011AA  6E19               	movwf	motor_datos@state^0,c
  2591                           
  2592                           ;TAD_DATOS.c: 174:             break;
  2593   0011AC  0012               	return	
  2594   0011AE                     l4715:
  2595                           
  2596                           ;TAD_DATOS.c: 177:             if(pointer < 6) {
  2597   0011AE  0E06               	movlw	6
  2598   0011B0  6018               	cpfslt	motor_datos@pointer^0,c
  2599   0011B2  D017               	goto	l842
  2600                           
  2601                           ;TAD_DATOS.c: 178:                 LcPutChar('1' + pointer);
  2602   0011B4  5018               	movf	motor_datos@pointer^0,w,c
  2603   0011B6  0F31               	addlw	49
  2604   0011B8  EC8B  F009         	call	_LcPutChar
  2605                           
  2606                           ;TAD_DATOS.c: 179:                 LcPutChar('-');
  2607   0011BC  0E2D               	movlw	45
  2608   0011BE  EC8B  F009         	call	_LcPutChar
  2609                           
  2610                           ;TAD_DATOS.c: 180:                 LcPutChar('0' + configurations[index][pointer]);
  2611   0011C2  507C               	movf	_index^0,w,c
  2612   0011C4  0D06               	mullw	6
  2613   0011C6  50F3               	movf	243,w,c
  2614   0011C8  0F80               	addlw	low _configurations
  2615   0011CA  2418               	addwf	motor_datos@pointer^0,w,c
  2616   0011CC  6ED9               	movwf	fsr2l,c
  2617   0011CE  6ADA               	clrf	fsr2h,c
  2618   0011D0  50DF               	movf	indf2,w,c
  2619   0011D2  0F30               	addlw	48
  2620   0011D4  EC8B  F009         	call	_LcPutChar
  2621                           
  2622                           ;TAD_DATOS.c: 181:                 LcPutChar(' ');
  2623   0011D8  0E20               	movlw	32
  2624   0011DA  EC8B  F009         	call	_LcPutChar
  2625                           
  2626                           ;TAD_DATOS.c: 182:                 pointer++;
  2627   0011DE  2A18               	incf	motor_datos@pointer^0,f,c
  2628                           
  2629                           ;TAD_DATOS.c: 183:             } else {
  2630   0011E0  0012               	return	
  2631   0011E2                     l842:
  2632                           
  2633                           ;TAD_DATOS.c: 184:                 pointer = 0;
  2634   0011E2  6A18               	clrf	motor_datos@pointer^0,c
  2635                           
  2636                           ;TAD_DATOS.c: 185:                 state = 0;
  2637   0011E4  6A19               	clrf	motor_datos@state^0,c
  2638   0011E6  0012               	return	
  2639   0011E8                     l4723:
  2640   0011E8  5019               	movf	motor_datos@state^0,w,c
  2641                           
  2642                           ; Switch size 1, requested type "simple"
  2643                           ; Number of cases is 4, Range of values is 0 to 3
  2644                           ; switch strategies available:
  2645                           ; Name         Instructions Cycles
  2646                           ; simple_byte           13     7 (average)
  2647                           ;	Chosen strategy is simple_byte
  2648   0011EA  0A00               	xorlw	0	; case 0
  2649   0011EC  B4D8               	btfsc	status,2,c
  2650   0011EE  D7A5               	goto	l4677
  2651   0011F0  0A01               	xorlw	1	; case 1
  2652   0011F2  B4D8               	btfsc	status,2,c
  2653   0011F4  D7AD               	goto	l832
  2654   0011F6  0A03               	xorlw	3	; case 2
  2655   0011F8  B4D8               	btfsc	status,2,c
  2656   0011FA  D7C0               	goto	l837
  2657   0011FC  0A01               	xorlw	1	; case 3
  2658   0011FE  A4D8               	btfss	status,2,c
  2659   001200  0012               	return	
  2660   001202  D7D5               	goto	l4715
  2661   001204                     __end_of_motor_datos:
  2662                           	callstack 0
  2663                           
  2664 ;; *************** function _LcPutChar *****************
  2665 ;; Defined at:
  2666 ;;		line 154 in file "TAD_DISPLAY.c"
  2667 ;; Parameters:    Size  Location     Type
  2668 ;;  c               1    wreg     unsigned char 
  2669 ;; Auto vars:     Size  Location     Type
  2670 ;;  c               1   30[COMRAM] unsigned char 
  2671 ;; Return value:  Size  Location     Type
  2672 ;;                  1    wreg      void 
  2673 ;; Registers used:
  2674 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2675 ;; Tracked objects:
  2676 ;;		On entry : 0/0
  2677 ;;		On exit  : 0/0
  2678 ;;		Unchanged: 0/0
  2679 ;; Data sizes:     COMRAM   BANK0   BANK1
  2680 ;;      Params:         0       0       0
  2681 ;;      Locals:         1       0       0
  2682 ;;      Temps:          0       0       0
  2683 ;;      Totals:         1       0       0
  2684 ;;Total ram usage:        1 bytes
  2685 ;; Hardware stack levels used: 1
  2686 ;; Hardware stack levels required when called: 7
  2687 ;; This function calls:
  2688 ;;		_CantaData
  2689 ;;		_LcGotoXY
  2690 ;;		_WaitForBusy
  2691 ;; This function is called by:
  2692 ;;		_motor_datos
  2693 ;; This function uses a non-reentrant model
  2694 ;;
  2695                           
  2696                           	psect	text2
  2697   001316                     __ptext2:
  2698                           	callstack 0
  2699   001316                     _LcPutChar:
  2700                           	callstack 22
  2701                           
  2702                           ;incstack = 0
  2703                           ;LcPutChar@c stored from wreg
  2704   001316  6E73               	movwf	LcPutChar@c^0,c
  2705                           
  2706                           ;TAD_DISPLAY.c: 164:  WaitForBusy(); CantaData(c);
  2707   001318  EC65  F00D         	call	_WaitForBusy	;wreg free
  2708   00131C  5073               	movf	LcPutChar@c^0,w,c
  2709   00131E  EC63  F00C         	call	_CantaData
  2710                           
  2711                           ;TAD_DISPLAY.c: 166:  ++ColumnAct;
  2712   001322  2A3C               	incf	_ColumnAct^0,f,c
  2713                           
  2714                           ;TAD_DISPLAY.c: 167:  if (Rows == 3) {
  2715   001324  0E03               	movlw	3
  2716   001326  183F               	xorwf	_Rows^0,w,c
  2717   001328  A4D8               	btfss	status,2,c
  2718   00132A  D00F               	goto	l3573
  2719                           
  2720                           ;TAD_DISPLAY.c: 168:   if (ColumnAct >= 20) {
  2721   00132C  0E13               	movlw	19
  2722   00132E  643C               	cpfsgt	_ColumnAct^0,c
  2723   001330  0012               	return	
  2724                           
  2725                           ;TAD_DISPLAY.c: 169:    ColumnAct = 0;
  2726   001332  6A3C               	clrf	_ColumnAct^0,c
  2727                           
  2728                           ;TAD_DISPLAY.c: 170:    if (++RowAct >= 4) RowAct = 0;
  2729   001334  2A3D               	incf	_RowAct^0,f,c
  2730   001336  0E03               	movlw	3
  2731   001338  643D               	cpfsgt	_RowAct^0,c
  2732   00133A  D001               	goto	l3571
  2733   00133C  6A3D               	clrf	_RowAct^0,c
  2734   00133E                     l3571:
  2735                           
  2736                           ;TAD_DISPLAY.c: 171:    LcGotoXY(ColumnAct, RowAct);
  2737   00133E  C03D  F06B         	movff	_RowAct,LcGotoXY@Row
  2738   001342  503C               	movf	_ColumnAct^0,w,c
  2739   001344  EC02  F009         	call	_LcGotoXY
  2740   001348  0012               	return	
  2741   00134A                     l3573:
  2742                           
  2743                           ;TAD_DISPLAY.c: 174:  if (Rows == 2) {
  2744   00134A  0E02               	movlw	2
  2745   00134C  183F               	xorwf	_Rows^0,w,c
  2746   00134E  A4D8               	btfss	status,2,c
  2747   001350  D00F               	goto	l3585
  2748                           
  2749                           ;TAD_DISPLAY.c: 175:   if (ColumnAct >= 40) {
  2750   001352  0E27               	movlw	39
  2751   001354  643C               	cpfsgt	_ColumnAct^0,c
  2752   001356  0012               	return	
  2753                           
  2754                           ;TAD_DISPLAY.c: 176:    ColumnAct = 0;
  2755   001358  6A3C               	clrf	_ColumnAct^0,c
  2756                           
  2757                           ;TAD_DISPLAY.c: 177:    if (++RowAct >= 2) RowAct = 0;
  2758   00135A  2A3D               	incf	_RowAct^0,f,c
  2759   00135C  0E01               	movlw	1
  2760   00135E  643D               	cpfsgt	_RowAct^0,c
  2761   001360  D001               	goto	l3583
  2762   001362  6A3D               	clrf	_RowAct^0,c
  2763   001364                     l3583:
  2764                           
  2765                           ;TAD_DISPLAY.c: 178:    LcGotoXY(ColumnAct, RowAct);
  2766   001364  C03D  F06B         	movff	_RowAct,LcGotoXY@Row
  2767   001368  503C               	movf	_ColumnAct^0,w,c
  2768   00136A  EC02  F009         	call	_LcGotoXY
  2769   00136E  0012               	return	
  2770   001370                     l3585:
  2771                           
  2772                           ;TAD_DISPLAY.c: 181:  if (RowAct == 1) {
  2773   001370  043D               	decf	_RowAct^0,w,c
  2774   001372  A4D8               	btfss	status,2,c
  2775   001374  0012               	return	
  2776                           
  2777                           ;TAD_DISPLAY.c: 182:   if (ColumnAct >= 40) ColumnAct = 0;
  2778   001376  0E27               	movlw	39
  2779   001378  643C               	cpfsgt	_ColumnAct^0,c
  2780   00137A  D001               	goto	l3591
  2781   00137C  6A3C               	clrf	_ColumnAct^0,c
  2782   00137E                     l3591:
  2783                           
  2784                           ;TAD_DISPLAY.c: 183:   LcGotoXY(ColumnAct, RowAct);
  2785   00137E  C03D  F06B         	movff	_RowAct,LcGotoXY@Row
  2786   001382  503C               	movf	_ColumnAct^0,w,c
  2787   001384  EC02  F009         	call	_LcGotoXY
  2788   001388  0012               	return		;funcret
  2789   00138A                     __end_of_LcPutChar:
  2790                           	callstack 0
  2791                           
  2792 ;; *************** function _LcGotoXY *****************
  2793 ;; Defined at:
  2794 ;;		line 127 in file "TAD_DISPLAY.c"
  2795 ;; Parameters:    Size  Location     Type
  2796 ;;  Column          1    wreg     unsigned char 
  2797 ;;  Row             1   22[COMRAM] unsigned char 
  2798 ;; Auto vars:     Size  Location     Type
  2799 ;;  Column          1   29[COMRAM] unsigned char 
  2800 ;;  Fisics          2   27[COMRAM] int 
  2801 ;; Return value:  Size  Location     Type
  2802 ;;                  1    wreg      void 
  2803 ;; Registers used:
  2804 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2805 ;; Tracked objects:
  2806 ;;		On entry : 0/0
  2807 ;;		On exit  : 0/0
  2808 ;;		Unchanged: 0/0
  2809 ;; Data sizes:     COMRAM   BANK0   BANK1
  2810 ;;      Params:         1       0       0
  2811 ;;      Locals:         5       0       0
  2812 ;;      Temps:          2       0       0
  2813 ;;      Totals:         8       0       0
  2814 ;;Total ram usage:        8 bytes
  2815 ;; Hardware stack levels used: 1
  2816 ;; Hardware stack levels required when called: 6
  2817 ;; This function calls:
  2818 ;;		_CantaIR
  2819 ;;		_WaitForBusy
  2820 ;; This function is called by:
  2821 ;;		_LcPutChar
  2822 ;; This function uses a non-reentrant model
  2823 ;;
  2824                           
  2825                           	psect	text3
  2826   001204                     __ptext3:
  2827                           	callstack 0
  2828   001204                     _LcGotoXY:
  2829                           	callstack 22
  2830                           
  2831                           ;incstack = 0
  2832                           ;LcGotoXY@Column stored from wreg
  2833   001204  6E72               	movwf	LcGotoXY@Column^0,c
  2834                           
  2835                           ;TAD_DISPLAY.c: 131:  int Fisics;;TAD_DISPLAY.c: 133:  switch (Rows) {
  2836   001206  D036               	goto	l3341
  2837   001208                     l3319:
  2838                           
  2839                           ;TAD_DISPLAY.c: 135:    Fisics = Column + (!Row ? 0 : 0x40); break;
  2840   001208  506B               	movf	LcGotoXY@Row^0,w,c
  2841   00120A  B4D8               	btfsc	status,2,c
  2842   00120C  D004               	goto	l3323
  2843   00120E  0E00               	movlw	0
  2844   001210  6E6F               	movwf	(_LcGotoXY$404+1)^0,c
  2845   001212  0E40               	movlw	64
  2846   001214  D003               	goto	L2
  2847   001216                     l3323:
  2848   001216  0E00               	movlw	0
  2849   001218  6E6F               	movwf	(_LcGotoXY$404+1)^0,c
  2850   00121A  0E00               	movlw	0
  2851   00121C                     L2:
  2852   00121C  6E6E               	movwf	_LcGotoXY$404^0,c
  2853   00121E  5072               	movf	LcGotoXY@Column^0,w,c
  2854   001220  246E               	addwf	_LcGotoXY$404^0,w,c
  2855   001222  6E70               	movwf	LcGotoXY@Fisics^0,c
  2856   001224  0E00               	movlw	0
  2857   001226  206F               	addwfc	(_LcGotoXY$404+1)^0,w,c
  2858   001228  6E71               	movwf	(LcGotoXY@Fisics+1)^0,c
  2859   00122A  D02F               	goto	l3343
  2860   00122C                     l121:
  2861                           
  2862                           ;TAD_DISPLAY.c: 137:    Fisics = Column;
  2863   00122C  C072  F070         	movff	LcGotoXY@Column,LcGotoXY@Fisics
  2864   001230  6A71               	clrf	(LcGotoXY@Fisics+1)^0,c
  2865                           
  2866                           ;TAD_DISPLAY.c: 138:    if (Row == 1) Fisics += 0x40; else
  2867   001232  046B               	decf	LcGotoXY@Row^0,w,c
  2868   001234  A4D8               	btfss	status,2,c
  2869   001236  D002               	goto	l3331
  2870   001238  0E40               	movlw	64
  2871   00123A  D005               	goto	L3
  2872   00123C                     l3331:
  2873                           
  2874                           ;TAD_DISPLAY.c: 139:    if (Row == 2) Fisics += Columns; else
  2875   00123C  0E02               	movlw	2
  2876   00123E  186B               	xorwf	LcGotoXY@Row^0,w,c
  2877   001240  A4D8               	btfss	status,2,c
  2878   001242  D004               	goto	l3335
  2879   001244  503E               	movf	_Columns^0,w,c
  2880   001246                     L3:
  2881   001246  2670               	addwf	LcGotoXY@Fisics^0,f,c
  2882   001248  0E00               	movlw	0
  2883   00124A  D00E               	goto	L4
  2884   00124C                     l3335:
  2885                           
  2886                           ;TAD_DISPLAY.c: 140:    if (Row == 3) Fisics += 0x40+Columns;
  2887   00124C  0E03               	movlw	3
  2888   00124E  186B               	xorwf	LcGotoXY@Row^0,w,c
  2889   001250  A4D8               	btfss	status,2,c
  2890   001252  D01B               	goto	l3343
  2891   001254  503E               	movf	_Columns^0,w,c
  2892   001256  6E6C               	movwf	??_LcGotoXY^0,c
  2893   001258  6A6D               	clrf	(??_LcGotoXY+1)^0,c
  2894   00125A  0E40               	movlw	64
  2895   00125C  266C               	addwf	??_LcGotoXY^0,f,c
  2896   00125E  0E00               	movlw	0
  2897   001260  226D               	addwfc	(??_LcGotoXY+1)^0,f,c
  2898   001262  506C               	movf	??_LcGotoXY^0,w,c
  2899   001264  2670               	addwf	LcGotoXY@Fisics^0,f,c
  2900   001266  506D               	movf	(??_LcGotoXY+1)^0,w,c
  2901   001268                     L4:
  2902   001268  2271               	addwfc	(LcGotoXY@Fisics+1)^0,f,c
  2903                           
  2904                           ;TAD_DISPLAY.c: 141:    break;
  2905   00126A  D00F               	goto	l3343
  2906   00126C                     l128:
  2907                           
  2908                           ;TAD_DISPLAY.c: 144:    Fisics = Column; break;
  2909   00126C  C072  F070         	movff	LcGotoXY@Column,LcGotoXY@Fisics
  2910   001270  6A71               	clrf	(LcGotoXY@Fisics+1)^0,c
  2911   001272  D00B               	goto	l3343
  2912   001274                     l3341:
  2913   001274  503F               	movf	_Rows^0,w,c
  2914                           
  2915                           ; Switch size 1, requested type "simple"
  2916                           ; Number of cases is 3, Range of values is 1 to 4
  2917                           ; switch strategies available:
  2918                           ; Name         Instructions Cycles
  2919                           ; simple_byte           10     6 (average)
  2920                           ;	Chosen strategy is simple_byte
  2921   001276  0A01               	xorlw	1	; case 1
  2922   001278  B4D8               	btfsc	status,2,c
  2923   00127A  D7F8               	goto	l128
  2924   00127C  0A03               	xorlw	3	; case 2
  2925   00127E  B4D8               	btfsc	status,2,c
  2926   001280  D7C3               	goto	l3319
  2927   001282  0A06               	xorlw	6	; case 4
  2928   001284  B4D8               	btfsc	status,2,c
  2929   001286  D7D2               	goto	l121
  2930   001288  D7F1               	goto	l128
  2931   00128A                     l3343:
  2932                           
  2933                           ;TAD_DISPLAY.c: 147:  WaitForBusy();
  2934   00128A  EC65  F00D         	call	_WaitForBusy	;wreg free
  2935                           
  2936                           ;TAD_DISPLAY.c: 148:  CantaIR((char)(0x80 | Fisics));
  2937   00128E  5070               	movf	LcGotoXY@Fisics^0,w,c
  2938   001290  0980               	iorlw	128
  2939   001292  EC7C  F00C         	call	_CantaIR
  2940                           
  2941                           ;TAD_DISPLAY.c: 150:  RowAct = Row;
  2942   001296  C06B  F03D         	movff	LcGotoXY@Row,_RowAct
  2943                           
  2944                           ;TAD_DISPLAY.c: 151:  ColumnAct = Column;
  2945   00129A  C072  F03C         	movff	LcGotoXY@Column,_ColumnAct
  2946   00129E  0012               	return		;funcret
  2947   0012A0                     __end_of_LcGotoXY:
  2948                           	callstack 0
  2949                           
  2950 ;; *************** function _CantaData *****************
  2951 ;; Defined at:
  2952 ;;		line 238 in file "TAD_DISPLAY.c"
  2953 ;; Parameters:    Size  Location     Type
  2954 ;;  Data            1    wreg     unsigned char 
  2955 ;; Auto vars:     Size  Location     Type
  2956 ;;  Data            1    3[COMRAM] unsigned char 
  2957 ;; Return value:  Size  Location     Type
  2958 ;;                  1    wreg      void 
  2959 ;; Registers used:
  2960 ;;		wreg, status,2, status,0, cstack
  2961 ;; Tracked objects:
  2962 ;;		On entry : 0/0
  2963 ;;		On exit  : 0/0
  2964 ;;		Unchanged: 0/0
  2965 ;; Data sizes:     COMRAM   BANK0   BANK1
  2966 ;;      Params:         0       0       0
  2967 ;;      Locals:         1       0       0
  2968 ;;      Temps:          0       0       0
  2969 ;;      Totals:         1       0       0
  2970 ;;Total ram usage:        1 bytes
  2971 ;; Hardware stack levels used: 1
  2972 ;; Hardware stack levels required when called: 4
  2973 ;; This function calls:
  2974 ;;		_CantaPartAlta
  2975 ;;		_CantaPartBaixa
  2976 ;; This function is called by:
  2977 ;;		_LcPutChar
  2978 ;; This function uses a non-reentrant model
  2979 ;;
  2980                           
  2981                           	psect	text4
  2982   0018C6                     __ptext4:
  2983                           	callstack 0
  2984   0018C6                     _CantaData:
  2985                           	callstack 24
  2986                           
  2987                           ;incstack = 0
  2988                           ;CantaData@Data stored from wreg
  2989   0018C6  6E58               	movwf	CantaData@Data^0,c
  2990                           
  2991                           ;TAD_DISPLAY.c: 239:  (TRISBbits.TRISB4 = TRISBbits.TRISB5 = TRISEbits.TRISE1 = TRISEbit
      +                          s.TRISE0 = 0);
  2992   0018C8  9096               	bcf	150,0,c	;volatile
  2993   0018CA  9296               	bcf	150,1,c	;volatile
  2994   0018CC  9A93               	bcf	147,5,c	;volatile
  2995   0018CE  9893               	bcf	147,4,c	;volatile
  2996                           
  2997                           ;TAD_DISPLAY.c: 240:  (LATBbits.LATB3 = 1);
  2998   0018D0  868A               	bsf	138,3,c	;volatile
  2999                           
  3000                           ;TAD_DISPLAY.c: 241:  (LATBbits.LATB2 = 0);
  3001   0018D2  948A               	bcf	138,2,c	;volatile
  3002                           
  3003                           ;TAD_DISPLAY.c: 242:  (LATBbits.LATB1 = 1);
  3004   0018D4  828A               	bsf	138,1,c	;volatile
  3005                           
  3006                           ;TAD_DISPLAY.c: 243:  CantaPartAlta(Data);
  3007   0018D6  5058               	movf	CantaData@Data^0,w,c
  3008   0018D8  ECD6  F00A         	call	_CantaPartAlta
  3009                           
  3010                           ;TAD_DISPLAY.c: 244:  (LATBbits.LATB1 = 1);
  3011   0018DC  828A               	bsf	138,1,c	;volatile
  3012                           
  3013                           ;TAD_DISPLAY.c: 245:  (LATBbits.LATB1 = 0);
  3014   0018DE  928A               	bcf	138,1,c	;volatile
  3015                           
  3016                           ;TAD_DISPLAY.c: 246:  (LATBbits.LATB1 = 0);
  3017   0018E0  928A               	bcf	138,1,c	;volatile
  3018                           
  3019                           ;TAD_DISPLAY.c: 247:  (LATBbits.LATB1 = 1);
  3020   0018E2  828A               	bsf	138,1,c	;volatile
  3021                           
  3022                           ;TAD_DISPLAY.c: 248:  CantaPartBaixa(Data);
  3023   0018E4  5058               	movf	CantaData@Data^0,w,c
  3024   0018E6  ECA4  F00A         	call	_CantaPartBaixa
  3025                           
  3026                           ;TAD_DISPLAY.c: 249:  (LATBbits.LATB1 = 1);
  3027   0018EA  828A               	bsf	138,1,c	;volatile
  3028                           
  3029                           ;TAD_DISPLAY.c: 250:  (LATBbits.LATB1 = 0);
  3030   0018EC  928A               	bcf	138,1,c	;volatile
  3031                           
  3032                           ;TAD_DISPLAY.c: 251:  (TRISBbits.TRISB4 = TRISBbits.TRISB5 = TRISEbits.TRISE1 = TRISEbit
      +                          s.TRISE0 = 1);
  3033   0018EE  8096               	bsf	150,0,c	;volatile
  3034   0018F0  8296               	bsf	150,1,c	;volatile
  3035   0018F2  8A93               	bsf	147,5,c	;volatile
  3036   0018F4  8893               	bsf	147,4,c	;volatile
  3037   0018F6  0012               	return		;funcret
  3038   0018F8                     __end_of_CantaData:
  3039                           	callstack 0
  3040                           
  3041 ;; *************** function _motor_RFID *****************
  3042 ;; Defined at:
  3043 ;;		line 168 in file "TAD_RFID.c"
  3044 ;; Parameters:    Size  Location     Type
  3045 ;;		None
  3046 ;; Auto vars:     Size  Location     Type
  3047 ;;  flag            1   32[COMRAM] unsigned char 
  3048 ;; Return value:  Size  Location     Type
  3049 ;;                  1    wreg      void 
  3050 ;; Registers used:
  3051 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3052 ;; Tracked objects:
  3053 ;;		On entry : 0/0
  3054 ;;		On exit  : 0/0
  3055 ;;		Unchanged: 0/0
  3056 ;; Data sizes:     COMRAM   BANK0   BANK1
  3057 ;;      Params:         0       0       0
  3058 ;;      Locals:         3       0       0
  3059 ;;      Temps:          2       0       0
  3060 ;;      Totals:         5       0       0
  3061 ;;Total ram usage:        5 bytes
  3062 ;; Hardware stack levels used: 1
  3063 ;; Hardware stack levels required when called: 9
  3064 ;; This function calls:
  3065 ;;		_TI_GetTics
  3066 ;;		_TI_ResetTics
  3067 ;;		_getActualUID
  3068 ;;		_getCurrentUserIndex
  3069 ;;		_motor_Read
  3070 ;;		_motor_Write
  3071 ;;		_motor_setCurrentUser
  3072 ;;		_setIndex
  3073 ;; This function is called by:
  3074 ;;		_main
  3075 ;; This function uses a non-reentrant model
  3076 ;;
  3077                           
  3078                           	psect	text5
  3079   00002A                     __ptext5:
  3080                           	callstack 0
  3081   00002A                     _motor_RFID:
  3082                           	callstack 21
  3083                           
  3084                           ;TAD_RFID.c: 195:     if (operation_pending == 1) {
  3085                           
  3086                           ;incstack = 0
  3087   00002A  0429               	decf	motor_RFID@operation_pending^0,w,c
  3088   00002C  A4D8               	btfss	status,2,c
  3089   00002E  D00C               	goto	l4267
  3090                           
  3091                           ;TAD_RFID.c: 197:         flag = motor_Read(addr);
  3092   000030  5028               	movf	motor_RFID@addr^0,w,c
  3093   000032  EC35  F008         	call	_motor_Read
  3094   000036  6E75               	movwf	motor_RFID@flag^0,c
  3095                           
  3096                           ;TAD_RFID.c: 198:         if (flag != 0xFE) {
  3097   000038  0EFE               	movlw	254
  3098   00003A  1875               	xorwf	motor_RFID@flag^0,w,c
  3099   00003C  B4D8               	btfsc	status,2,c
  3100   00003E  0012               	return	
  3101                           
  3102                           ;TAD_RFID.c: 199:             tempRegValue = flag;
  3103   000040  C075  F030         	movff	motor_RFID@flag,motor_RFID@tempRegValue
  3104                           
  3105                           ;TAD_RFID.c: 200:             operation_pending = 0;
  3106   000044  6A29               	clrf	motor_RFID@operation_pending^0,c
  3107                           
  3108                           ;TAD_RFID.c: 201:         } else {
  3109   000046  0012               	return	
  3110   000048                     l4267:
  3111   000048  0E02               	movlw	2
  3112   00004A  1829               	xorwf	motor_RFID@operation_pending^0,w,c
  3113   00004C  A4D8               	btfss	status,2,c
  3114   00004E  D00B               	goto	l4275
  3115                           
  3116                           ;TAD_RFID.c: 206:         flag = motor_Write(addr, value);
  3117   000050  C027  F05D         	movff	motor_RFID@value,motor_Write@value
  3118   000054  5028               	movf	motor_RFID@addr^0,w,c
  3119   000056  EC6E  F00A         	call	_motor_Write
  3120   00005A  6E75               	movwf	motor_RFID@flag^0,c
  3121                           
  3122                           ;TAD_RFID.c: 207:         if (flag != 0) {
  3123   00005C  5075               	movf	motor_RFID@flag^0,w,c
  3124   00005E  B4D8               	btfsc	status,2,c
  3125   000060  0012               	return	
  3126                           
  3127                           ;TAD_RFID.c: 208:             operation_pending = 0;
  3128   000062  6A29               	clrf	motor_RFID@operation_pending^0,c
  3129                           
  3130                           ;TAD_RFID.c: 209:         } else {
  3131   000064  0012               	return	
  3132   000066                     l4275:
  3133                           
  3134                           ;TAD_RFID.c: 214:         if (state != last_state) {
  3135   000066  502A               	movf	motor_RFID@last_state^0,w,c
  3136   000068  183A               	xorwf	motor_RFID@state^0,w,c
  3137   00006A  B4D8               	btfsc	status,2,c
  3138   00006C  D008               	goto	l4283
  3139                           
  3140                           ;TAD_RFID.c: 215:             last_state = state;
  3141   00006E  C03A  F02A         	movff	motor_RFID@state,motor_RFID@last_state
  3142                           
  3143                           ;TAD_RFID.c: 218:             if (state == 1) {
  3144   000072  043A               	decf	motor_RFID@state^0,w,c
  3145   000074  A4D8               	btfss	status,2,c
  3146   000076  D003               	goto	l4283
  3147                           
  3148                           ;TAD_RFID.c: 219:                 TI_ResetTics(card_timer);
  3149   000078  0E00               	movlw	0
  3150   00007A  ECE5  F00C         	call	_TI_ResetTics
  3151   00007E                     l4283:
  3152                           
  3153                           ;TAD_RFID.c: 225:         if (state == 0 && TI_GetTics(card_timer) > 500) {
  3154   00007E  503A               	movf	motor_RFID@state^0,w,c
  3155   000080  A4D8               	btfss	status,2,c
  3156   000082  D2FB               	goto	l4633
  3157   000084  0E00               	movlw	0
  3158   000086  ECE4  F00B         	call	_TI_GetTics
  3159   00008A  5059               	movf	(?_TI_GetTics+3)^0,w,c
  3160   00008C  1058               	iorwf	(?_TI_GetTics+2)^0,w,c
  3161   00008E  E106               	bnz	u3790
  3162   000090  0EF5               	movlw	245
  3163   000092  5C56               	subwf	?_TI_GetTics^0,w,c
  3164   000094  0E01               	movlw	1
  3165   000096  5857               	subwfb	(?_TI_GetTics+1)^0,w,c
  3166   000098  A0D8               	btfss	status,0,c
  3167   00009A  D2EF               	goto	l4633
  3168   00009C                     u3790:
  3169                           
  3170                           ;TAD_RFID.c: 226:             cardRemoved = 1;
  3171   00009C  0E01               	movlw	1
  3172   00009E  6E2C               	movwf	motor_RFID@cardRemoved^0,c
  3173                           
  3174                           ;TAD_RFID.c: 227:             TI_ResetTics(card_timer);
  3175   0000A0  0E00               	movlw	0
  3176   0000A2  ECE5  F00C         	call	_TI_ResetTics
  3177   0000A6  D2E9               	goto	l4633
  3178   0000A8                     l4291:
  3179                           
  3180                           ;TAD_RFID.c: 235:                         addr = 0x0D;
  3181   0000A8  0E0D               	movlw	13
  3182   0000AA  6E28               	movwf	motor_RFID@addr^0,c
  3183                           
  3184                           ;TAD_RFID.c: 236:                         value = 0x07;
  3185   0000AC  0E07               	movlw	7
  3186   0000AE  6E27               	movwf	motor_RFID@value^0,c
  3187                           
  3188                           ;TAD_RFID.c: 237:                         operation_pending = 2;
  3189   0000B0  0E02               	movlw	2
  3190   0000B2  6E29               	movwf	motor_RFID@operation_pending^0,c
  3191                           
  3192                           ;TAD_RFID.c: 238:                         substate = 1;
  3193   0000B4  0E01               	movlw	1
  3194   0000B6  6E39               	movwf	motor_RFID@substate^0,c
  3195                           
  3196                           ;TAD_RFID.c: 239:                         break;
  3197   0000B8  0012               	return	
  3198   0000BA                     l4293:
  3199                           
  3200                           ;TAD_RFID.c: 241:                         TagType = 0x26;
  3201   0000BA  0E26               	movlw	38
  3202   0000BC  6E33               	movwf	motor_RFID@TagType^0,c
  3203                           
  3204                           ;TAD_RFID.c: 242:                         irqEn = 0x77;
  3205   0000BE  0E77               	movlw	119
  3206   0000C0  6E38               	movwf	motor_RFID@irqEn^0,c
  3207                           
  3208                           ;TAD_RFID.c: 243:                         waitIRq = 0x30;
  3209   0000C2  0E30               	movlw	48
  3210   0000C4  6E37               	movwf	motor_RFID@waitIRq^0,c
  3211                           
  3212                           ;TAD_RFID.c: 244:                         addr = 0x02;
  3213   0000C6  0E02               	movlw	2
  3214   0000C8  6E28               	movwf	motor_RFID@addr^0,c
  3215                           
  3216                           ;TAD_RFID.c: 245:                         value = irqEn | 0x80;
  3217   0000CA  5038               	movf	motor_RFID@irqEn^0,w,c
  3218   0000CC  0980               	iorlw	128
  3219   0000CE  6E27               	movwf	motor_RFID@value^0,c
  3220                           
  3221                           ;TAD_RFID.c: 246:                         operation_pending = 2;
  3222   0000D0  0E02               	movlw	2
  3223   0000D2  6E29               	movwf	motor_RFID@operation_pending^0,c
  3224                           
  3225                           ;TAD_RFID.c: 247:                         substate = 2;
  3226   0000D4  0E02               	movlw	2
  3227   0000D6  6E39               	movwf	motor_RFID@substate^0,c
  3228                           
  3229                           ;TAD_RFID.c: 248:                         break;
  3230   0000D8  0012               	return	
  3231   0000DA                     l4301:
  3232                           
  3233                           ;TAD_RFID.c: 250:                         addr = 0x04;
  3234   0000DA  0E04               	movlw	4
  3235   0000DC  6E28               	movwf	motor_RFID@addr^0,c
  3236                           
  3237                           ;TAD_RFID.c: 251:                         operation_pending = 1;
  3238   0000DE  0E01               	movlw	1
  3239   0000E0  6E29               	movwf	motor_RFID@operation_pending^0,c
  3240                           
  3241                           ;TAD_RFID.c: 252:                         substate = 3;
  3242   0000E2  0E03               	movlw	3
  3243   0000E4  6E39               	movwf	motor_RFID@substate^0,c
  3244                           
  3245                           ;TAD_RFID.c: 253:                         break;
  3246   0000E6  0012               	return	
  3247   0000E8                     l4303:
  3248                           
  3249                           ;TAD_RFID.c: 255:                         if (tempRegValue == 0xFF) {
  3250   0000E8  2830               	incf	motor_RFID@tempRegValue^0,w,c
  3251   0000EA  A4D8               	btfss	status,2,c
  3252   0000EC  D002               	goto	l4307
  3253   0000EE                     u3800:
  3254                           
  3255                           ;TAD_RFID.c: 256:                             substate = 0;
  3256   0000EE  6A39               	clrf	motor_RFID@substate^0,c
  3257                           
  3258                           ;TAD_RFID.c: 257:                         } else {
  3259   0000F0  0012               	return	
  3260   0000F2                     l4307:
  3261                           
  3262                           ;TAD_RFID.c: 258:                             addr = 0x02;
  3263   0000F2  0E02               	movlw	2
  3264   0000F4  6E28               	movwf	motor_RFID@addr^0,c
  3265                           
  3266                           ;TAD_RFID.c: 259:                             value = tempRegValue & ~0x80;
  3267   0000F6  5030               	movf	motor_RFID@tempRegValue^0,w,c
  3268   0000F8  0B7F               	andlw	127
  3269   0000FA  6E27               	movwf	motor_RFID@value^0,c
  3270                           
  3271                           ;TAD_RFID.c: 260:                             operation_pending = 2;
  3272   0000FC  0E02               	movlw	2
  3273   0000FE  6E29               	movwf	motor_RFID@operation_pending^0,c
  3274                           
  3275                           ;TAD_RFID.c: 261:                             substate = 4;
  3276   000100  0E04               	movlw	4
  3277   000102  6E39               	movwf	motor_RFID@substate^0,c
  3278   000104  0012               	return	
  3279   000106                     l4315:
  3280                           
  3281                           ;TAD_RFID.c: 265:                         addr = 0x0A;
  3282   000106  0E0A               	movlw	10
  3283   000108  6E28               	movwf	motor_RFID@addr^0,c
  3284                           
  3285                           ;TAD_RFID.c: 266:                         operation_pending = 1;
  3286   00010A  0E01               	movlw	1
  3287   00010C  6E29               	movwf	motor_RFID@operation_pending^0,c
  3288                           
  3289                           ;TAD_RFID.c: 267:                         substate = 5;
  3290   00010E  0E05               	movlw	5
  3291   000110  6E39               	movwf	motor_RFID@substate^0,c
  3292                           
  3293                           ;TAD_RFID.c: 268:                         break;
  3294   000112  0012               	return	
  3295   000114                     l4317:
  3296                           
  3297                           ;TAD_RFID.c: 270:                         if (tempRegValue == 0xFF) {
  3298   000114  2830               	incf	motor_RFID@tempRegValue^0,w,c
  3299   000116  B4D8               	btfsc	status,2,c
  3300   000118  D7EA               	goto	u3800
  3301                           
  3302                           ;TAD_RFID.c: 273:                             addr = 0x0A;
  3303   00011A  0E0A               	movlw	10
  3304   00011C  6E28               	movwf	motor_RFID@addr^0,c
  3305                           
  3306                           ;TAD_RFID.c: 274:                             value = tempRegValue | 0x80;
  3307   00011E  5030               	movf	motor_RFID@tempRegValue^0,w,c
  3308   000120  0980               	iorlw	128
  3309   000122  6E27               	movwf	motor_RFID@value^0,c
  3310                           
  3311                           ;TAD_RFID.c: 275:                             operation_pending = 2;
  3312   000124  0E02               	movlw	2
  3313   000126  6E29               	movwf	motor_RFID@operation_pending^0,c
  3314                           
  3315                           ;TAD_RFID.c: 276:                             substate = 6;
  3316   000128  0E06               	movlw	6
  3317   00012A  6E39               	movwf	motor_RFID@substate^0,c
  3318   00012C  0012               	return	
  3319   00012E                     l4329:
  3320                           
  3321                           ;TAD_RFID.c: 280:                         addr = 0x01;
  3322   00012E  0E01               	movlw	1
  3323   000130  6E28               	movwf	motor_RFID@addr^0,c
  3324                           
  3325                           ;TAD_RFID.c: 281:                         value = 0x00;
  3326   000132  6A27               	clrf	motor_RFID@value^0,c
  3327                           
  3328                           ;TAD_RFID.c: 282:                         operation_pending = 2;
  3329   000134  0E02               	movlw	2
  3330   000136  6E29               	movwf	motor_RFID@operation_pending^0,c
  3331                           
  3332                           ;TAD_RFID.c: 283:                         substate = 7;
  3333   000138  0E07               	movlw	7
  3334   00013A  6E39               	movwf	motor_RFID@substate^0,c
  3335                           
  3336                           ;TAD_RFID.c: 284:                         break;
  3337   00013C  0012               	return	
  3338   00013E                     l4333:
  3339                           
  3340                           ;TAD_RFID.c: 286:                         addr = 0x09;
  3341   00013E  0E09               	movlw	9
  3342   000140  6E28               	movwf	motor_RFID@addr^0,c
  3343                           
  3344                           ;TAD_RFID.c: 287:                         value = TagType;
  3345   000142  C033  F027         	movff	motor_RFID@TagType,motor_RFID@value
  3346                           
  3347                           ;TAD_RFID.c: 288:                         operation_pending = 2;
  3348   000146  0E02               	movlw	2
  3349   000148  6E29               	movwf	motor_RFID@operation_pending^0,c
  3350                           
  3351                           ;TAD_RFID.c: 289:                         substate = 8;
  3352   00014A  0E08               	movlw	8
  3353   00014C  6E39               	movwf	motor_RFID@substate^0,c
  3354                           
  3355                           ;TAD_RFID.c: 290:                         break;
  3356   00014E  0012               	return	
  3357   000150                     l4337:
  3358                           
  3359                           ;TAD_RFID.c: 292:                         addr = 0x01;
  3360   000150  0E01               	movlw	1
  3361   000152  6E28               	movwf	motor_RFID@addr^0,c
  3362                           
  3363                           ;TAD_RFID.c: 293:                         value = 0x0C;
  3364   000154  0E0C               	movlw	12
  3365   000156  6E27               	movwf	motor_RFID@value^0,c
  3366                           
  3367                           ;TAD_RFID.c: 294:                         operation_pending = 2;
  3368   000158  0E02               	movlw	2
  3369   00015A  6E29               	movwf	motor_RFID@operation_pending^0,c
  3370                           
  3371                           ;TAD_RFID.c: 295:                         substate = 9;
  3372   00015C  0E09               	movlw	9
  3373   00015E  6E39               	movwf	motor_RFID@substate^0,c
  3374                           
  3375                           ;TAD_RFID.c: 296:                         break;
  3376   000160  0012               	return	
  3377   000162                     l4339:
  3378                           
  3379                           ;TAD_RFID.c: 298:                         addr = 0x0D;
  3380   000162  0E0D               	movlw	13
  3381   000164  6E28               	movwf	motor_RFID@addr^0,c
  3382                           
  3383                           ;TAD_RFID.c: 299:                         operation_pending = 1;
  3384   000166  0E01               	movlw	1
  3385   000168  6E29               	movwf	motor_RFID@operation_pending^0,c
  3386                           
  3387                           ;TAD_RFID.c: 300:                         substate = 10;
  3388   00016A  0E0A               	movlw	10
  3389   00016C  6E39               	movwf	motor_RFID@substate^0,c
  3390                           
  3391                           ;TAD_RFID.c: 301:                         break;
  3392   00016E  0012               	return	
  3393   000170                     l4341:
  3394                           
  3395                           ;TAD_RFID.c: 303:                         if (tempRegValue == 0xFF) {
  3396   000170  2830               	incf	motor_RFID@tempRegValue^0,w,c
  3397   000172  B4D8               	btfsc	status,2,c
  3398   000174  D7BC               	goto	u3800
  3399                           
  3400                           ;TAD_RFID.c: 306:                             addr = 0x0D;
  3401   000176  0E0D               	movlw	13
  3402   000178  6E28               	movwf	motor_RFID@addr^0,c
  3403                           
  3404                           ;TAD_RFID.c: 307:                             value = tempRegValue | 0x80;
  3405   00017A  5030               	movf	motor_RFID@tempRegValue^0,w,c
  3406   00017C  0980               	iorlw	128
  3407   00017E  6E27               	movwf	motor_RFID@value^0,c
  3408                           
  3409                           ;TAD_RFID.c: 308:                             operation_pending = 2;
  3410   000180  0E02               	movlw	2
  3411   000182  6E29               	movwf	motor_RFID@operation_pending^0,c
  3412                           
  3413                           ;TAD_RFID.c: 309:                             substate = 11;
  3414   000184  0E0B               	movlw	11
  3415   000186  6E39               	movwf	motor_RFID@substate^0,c
  3416   000188  0012               	return	
  3417   00018A                     l408:
  3418                           
  3419                           ;TAD_RFID.c: 313:                         i = 0xFF;
  3420   00018A  6835               	setf	motor_RFID@i^0,c
  3421                           
  3422                           ;TAD_RFID.c: 314:                         addr = 0x04;
  3423   00018C  0E04               	movlw	4
  3424   00018E  6E28               	movwf	motor_RFID@addr^0,c
  3425                           
  3426                           ;TAD_RFID.c: 315:                         operation_pending = 1;
  3427   000190  0E01               	movlw	1
  3428   000192  6E29               	movwf	motor_RFID@operation_pending^0,c
  3429                           
  3430                           ;TAD_RFID.c: 316:                         substate = 12;
  3431   000194  0E0C               	movlw	12
  3432   000196  6E39               	movwf	motor_RFID@substate^0,c
  3433                           
  3434                           ;TAD_RFID.c: 317:                         break;
  3435   000198  0012               	return	
  3436   00019A                     l4355:
  3437                           
  3438                           ;TAD_RFID.c: 319:                         if (tempRegValue == 0xFF) {
  3439   00019A  2830               	incf	motor_RFID@tempRegValue^0,w,c
  3440   00019C  B4D8               	btfsc	status,2,c
  3441   00019E  D7A7               	goto	u3800
  3442                           
  3443                           ;TAD_RFID.c: 322:                             n = tempRegValue;
  3444   0001A0  C030  F036         	movff	motor_RFID@tempRegValue,motor_RFID@n
  3445                           
  3446                           ;TAD_RFID.c: 323:                             if ((n & 0x01) || (n & waitIRq) || (--i ==
      +                           0)) {
  3447   0001A4  B036               	btfsc	motor_RFID@n^0,0,c
  3448   0001A6  D007               	goto	l4363
  3449   0001A8  5036               	movf	motor_RFID@n^0,w,c
  3450   0001AA  1437               	andwf	motor_RFID@waitIRq^0,w,c
  3451   0001AC  0900               	iorlw	0
  3452   0001AE  A4D8               	btfss	status,2,c
  3453   0001B0  D002               	goto	l4363
  3454   0001B2  2E35               	decfsz	motor_RFID@i^0,f,c
  3455   0001B4  D007               	goto	l4365
  3456   0001B6                     l4363:
  3457                           
  3458                           ;TAD_RFID.c: 324:                                 addr = 0x0D;
  3459   0001B6  0E0D               	movlw	13
  3460   0001B8  6E28               	movwf	motor_RFID@addr^0,c
  3461                           
  3462                           ;TAD_RFID.c: 325:                                 operation_pending = 1;
  3463   0001BA  0E01               	movlw	1
  3464   0001BC  6E29               	movwf	motor_RFID@operation_pending^0,c
  3465                           
  3466                           ;TAD_RFID.c: 326:                                 substate = 13;
  3467   0001BE  0E0D               	movlw	13
  3468   0001C0  6E39               	movwf	motor_RFID@substate^0,c
  3469                           
  3470                           ;TAD_RFID.c: 327:                             } else {
  3471   0001C2  0012               	return	
  3472   0001C4                     l4365:
  3473                           
  3474                           ;TAD_RFID.c: 328:                                 addr = 0x04;
  3475   0001C4  0E04               	movlw	4
  3476   0001C6  6E28               	movwf	motor_RFID@addr^0,c
  3477                           
  3478                           ;TAD_RFID.c: 329:                                 operation_pending = 1;
  3479   0001C8  0E01               	movlw	1
  3480   0001CA  6E29               	movwf	motor_RFID@operation_pending^0,c
  3481   0001CC  0012               	return	
  3482   0001CE                     l4367:
  3483                           
  3484                           ;TAD_RFID.c: 334:                         if (tempRegValue == 0xFF) {
  3485   0001CE  2830               	incf	motor_RFID@tempRegValue^0,w,c
  3486   0001D0  B4D8               	btfsc	status,2,c
  3487   0001D2  D78D               	goto	u3800
  3488   0001D4  5030               	movf	motor_RFID@tempRegValue^0,w,c
  3489   0001D6  B4D8               	btfsc	status,2,c
  3490   0001D8  D00A               	goto	l4381
  3491                           
  3492                           ;TAD_RFID.c: 337:                             addr = 0x0D;
  3493   0001DA  0E0D               	movlw	13
  3494   0001DC  6E28               	movwf	motor_RFID@addr^0,c
  3495                           
  3496                           ;TAD_RFID.c: 338:                             value = tempRegValue & ~0x80;
  3497   0001DE  5030               	movf	motor_RFID@tempRegValue^0,w,c
  3498   0001E0  0B7F               	andlw	127
  3499   0001E2  6E27               	movwf	motor_RFID@value^0,c
  3500                           
  3501                           ;TAD_RFID.c: 339:                             operation_pending = 2;
  3502   0001E4  0E02               	movlw	2
  3503   0001E6  6E29               	movwf	motor_RFID@operation_pending^0,c
  3504                           
  3505                           ;TAD_RFID.c: 340:                             substate = 14;
  3506   0001E8  0E0E               	movlw	14
  3507   0001EA  6E39               	movwf	motor_RFID@substate^0,c
  3508                           
  3509                           ;TAD_RFID.c: 341:                         } else {
  3510   0001EC  0012               	return	
  3511   0001EE                     l4381:
  3512                           
  3513                           ;TAD_RFID.c: 342:                             addr = 0x0D;
  3514   0001EE  0E0D               	movlw	13
  3515   0001F0  6E28               	movwf	motor_RFID@addr^0,c
  3516                           
  3517                           ;TAD_RFID.c: 343:                             operation_pending = 1;
  3518   0001F2  0E01               	movlw	1
  3519   0001F4  6E29               	movwf	motor_RFID@operation_pending^0,c
  3520   0001F6  0012               	return	
  3521   0001F8                     l4383:
  3522                           
  3523                           ;TAD_RFID.c: 348:                         addr = 0x06;
  3524   0001F8  0E06               	movlw	6
  3525   0001FA  6E28               	movwf	motor_RFID@addr^0,c
  3526                           
  3527                           ;TAD_RFID.c: 349:                         operation_pending = 1;
  3528   0001FC  0E01               	movlw	1
  3529   0001FE  6E29               	movwf	motor_RFID@operation_pending^0,c
  3530                           
  3531                           ;TAD_RFID.c: 350:                         substate = 15;
  3532   000200  0E0F               	movlw	15
  3533   000202  6E39               	movwf	motor_RFID@substate^0,c
  3534                           
  3535                           ;TAD_RFID.c: 351:                         break;
  3536   000204  0012               	return	
  3537   000206                     l4385:
  3538                           
  3539                           ;TAD_RFID.c: 353:                         if (tempRegValue == 0xFF) {
  3540   000206  2830               	incf	motor_RFID@tempRegValue^0,w,c
  3541   000208  B4D8               	btfsc	status,2,c
  3542   00020A  D771               	goto	u3800
  3543   00020C  5035               	movf	motor_RFID@i^0,w,c
  3544   00020E  B4D8               	btfsc	status,2,c
  3545   000210  D00D               	goto	l425
  3546   000212  C030  F071         	movff	motor_RFID@tempRegValue,??_motor_RFID
  3547   000216  0E1B               	movlw	27
  3548   000218  1671               	andwf	??_motor_RFID^0,f,c
  3549   00021A  A4D8               	btfss	status,2,c
  3550   00021C  D007               	goto	l425
  3551                           
  3552                           ;TAD_RFID.c: 356:                             addr = 0x0A;
  3553   00021E  0E0A               	movlw	10
  3554   000220  6E28               	movwf	motor_RFID@addr^0,c
  3555                           
  3556                           ;TAD_RFID.c: 357:                             operation_pending = 1;
  3557   000222  0E01               	movlw	1
  3558   000224  6E29               	movwf	motor_RFID@operation_pending^0,c
  3559                           
  3560                           ;TAD_RFID.c: 358:                             substate = 16;
  3561   000226  0E10               	movlw	16
  3562   000228  6E39               	movwf	motor_RFID@substate^0,c
  3563                           
  3564                           ;TAD_RFID.c: 359:                         } else {
  3565   00022A  0012               	return	
  3566   00022C                     l425:
  3567                           
  3568                           ;TAD_RFID.c: 361:                             state = substate = 0;
  3569   00022C  6A39               	clrf	motor_RFID@substate^0,c
  3570   00022E  6A3A               	clrf	motor_RFID@state^0,c
  3571   000230  0012               	return	
  3572   000232                     l4395:
  3573                           
  3574                           ;TAD_RFID.c: 365:                         if (tempRegValue == 0xFF) {
  3575   000232  2830               	incf	motor_RFID@tempRegValue^0,w,c
  3576   000234  B4D8               	btfsc	status,2,c
  3577   000236  D75B               	goto	u3800
  3578                           
  3579                           ;TAD_RFID.c: 368:                             fifoLevel = tempRegValue;
  3580   000238  C030  F02E         	movff	motor_RFID@tempRegValue,motor_RFID@fifoLevel
  3581                           
  3582                           ;TAD_RFID.c: 369:                             addr = 0x0C;
  3583   00023C  0E0C               	movlw	12
  3584   00023E  6E28               	movwf	motor_RFID@addr^0,c
  3585                           
  3586                           ;TAD_RFID.c: 370:                             operation_pending = 1;
  3587   000240  0E01               	movlw	1
  3588   000242  6E29               	movwf	motor_RFID@operation_pending^0,c
  3589                           
  3590                           ;TAD_RFID.c: 371:                             substate = 17;
  3591   000244  0E11               	movlw	17
  3592   000246  6E39               	movwf	motor_RFID@substate^0,c
  3593   000248  0012               	return	
  3594   00024A                     l4401:
  3595                           
  3596                           ;TAD_RFID.c: 375:                         if (tempRegValue == 0xFF) {
  3597   00024A  2830               	incf	motor_RFID@tempRegValue^0,w,c
  3598   00024C  B4D8               	btfsc	status,2,c
  3599   00024E  D74F               	goto	u3800
  3600                           
  3601                           ;TAD_RFID.c: 378:                             lastBitsVal = tempRegValue & 0x07;
  3602   000250  5030               	movf	motor_RFID@tempRegValue^0,w,c
  3603   000252  0B07               	andlw	7
  3604   000254  6E2F               	movwf	motor_RFID@lastBitsVal^0,c
  3605                           
  3606                           ;TAD_RFID.c: 379:                             backBitsCalc = lastBitsVal ? (fifoLevel - 
      +                          1) * 8 + lastBitsVal : fifoLevel * 8;
  3607   000256  502F               	movf	motor_RFID@lastBitsVal^0,w,c
  3608   000258  A4D8               	btfss	status,2,c
  3609   00025A  D007               	goto	l4411
  3610   00025C  502E               	movf	motor_RFID@fifoLevel^0,w,c
  3611   00025E  0D08               	mullw	8
  3612   000260  CFF3 F073          	movff	prodl,_motor_RFID$726
  3613   000264  CFF4 F074          	movff	prodh,_motor_RFID$726+1
  3614   000268  D016               	goto	l4413
  3615   00026A                     l4411:
  3616   00026A  502F               	movf	motor_RFID@lastBitsVal^0,w,c
  3617   00026C  C02E  F071         	movff	motor_RFID@fifoLevel,??_motor_RFID
  3618   000270  6A72               	clrf	(??_motor_RFID+1)^0,c
  3619   000272  90D8               	bcf	status,0,c
  3620   000274  3671               	rlcf	??_motor_RFID^0,f,c
  3621   000276  3672               	rlcf	(??_motor_RFID+1)^0,f,c
  3622   000278  90D8               	bcf	status,0,c
  3623   00027A  3671               	rlcf	??_motor_RFID^0,f,c
  3624   00027C  3672               	rlcf	(??_motor_RFID+1)^0,f,c
  3625   00027E  90D8               	bcf	status,0,c
  3626   000280  3671               	rlcf	??_motor_RFID^0,f,c
  3627   000282  3672               	rlcf	(??_motor_RFID+1)^0,f,c
  3628   000284  2671               	addwf	??_motor_RFID^0,f,c
  3629   000286  0E00               	movlw	0
  3630   000288  2272               	addwfc	(??_motor_RFID+1)^0,f,c
  3631   00028A  0EF8               	movlw	248
  3632   00028C  2471               	addwf	??_motor_RFID^0,w,c
  3633   00028E  6E73               	movwf	_motor_RFID$726^0,c
  3634   000290  0EFF               	movlw	255
  3635   000292  2072               	addwfc	(??_motor_RFID+1)^0,w,c
  3636   000294  6E74               	movwf	(_motor_RFID$726+1)^0,c
  3637   000296                     l4413:
  3638   000296  C073  F02D         	movff	_motor_RFID$726,motor_RFID@backBitsCalc
  3639                           
  3640                           ;TAD_RFID.c: 380:                             if (backBitsCalc == 0x10) {
  3641   00029A  0E10               	movlw	16
  3642   00029C  182D               	xorwf	motor_RFID@backBitsCalc^0,w,c
  3643   00029E  A4D8               	btfss	status,2,c
  3644   0002A0  D7C5               	goto	l425
  3645                           
  3646                           ;TAD_RFID.c: 381:                                 state = 1;
  3647   0002A2  0E01               	movlw	1
  3648   0002A4  6E3A               	movwf	motor_RFID@state^0,c
  3649   0002A6  D723               	goto	u3800
  3650   0002A8                     l4421:
  3651   0002A8  5039               	movf	motor_RFID@substate^0,w,c
  3652                           
  3653                           ; Switch size 1, requested type "simple"
  3654                           ; Number of cases is 18, Range of values is 0 to 17
  3655                           ; switch strategies available:
  3656                           ; Name         Instructions Cycles
  3657                           ; simple_byte           55    28 (average)
  3658                           ;	Chosen strategy is simple_byte
  3659   0002AA  0A00               	xorlw	0	; case 0
  3660   0002AC  B4D8               	btfsc	status,2,c
  3661   0002AE  D6FC               	goto	l4291
  3662   0002B0  0A01               	xorlw	1	; case 1
  3663   0002B2  B4D8               	btfsc	status,2,c
  3664   0002B4  D702               	goto	l4293
  3665   0002B6  0A03               	xorlw	3	; case 2
  3666   0002B8  B4D8               	btfsc	status,2,c
  3667   0002BA  D70F               	goto	l4301
  3668   0002BC  0A01               	xorlw	1	; case 3
  3669   0002BE  B4D8               	btfsc	status,2,c
  3670   0002C0  D713               	goto	l4303
  3671   0002C2  0A07               	xorlw	7	; case 4
  3672   0002C4  B4D8               	btfsc	status,2,c
  3673   0002C6  D71F               	goto	l4315
  3674   0002C8  0A01               	xorlw	1	; case 5
  3675   0002CA  B4D8               	btfsc	status,2,c
  3676   0002CC  D723               	goto	l4317
  3677   0002CE  0A03               	xorlw	3	; case 6
  3678   0002D0  B4D8               	btfsc	status,2,c
  3679   0002D2  D72D               	goto	l4329
  3680   0002D4  0A01               	xorlw	1	; case 7
  3681   0002D6  B4D8               	btfsc	status,2,c
  3682   0002D8  D732               	goto	l4333
  3683   0002DA  0A0F               	xorlw	15	; case 8
  3684   0002DC  B4D8               	btfsc	status,2,c
  3685   0002DE  D738               	goto	l4337
  3686   0002E0  0A01               	xorlw	1	; case 9
  3687   0002E2  B4D8               	btfsc	status,2,c
  3688   0002E4  D73E               	goto	l4339
  3689   0002E6  0A03               	xorlw	3	; case 10
  3690   0002E8  B4D8               	btfsc	status,2,c
  3691   0002EA  D742               	goto	l4341
  3692   0002EC  0A01               	xorlw	1	; case 11
  3693   0002EE  B4D8               	btfsc	status,2,c
  3694   0002F0  D74C               	goto	l408
  3695   0002F2  0A07               	xorlw	7	; case 12
  3696   0002F4  B4D8               	btfsc	status,2,c
  3697   0002F6  D751               	goto	l4355
  3698   0002F8  0A01               	xorlw	1	; case 13
  3699   0002FA  B4D8               	btfsc	status,2,c
  3700   0002FC  D768               	goto	l4367
  3701   0002FE  0A03               	xorlw	3	; case 14
  3702   000300  B4D8               	btfsc	status,2,c
  3703   000302  D77A               	goto	l4383
  3704   000304  0A01               	xorlw	1	; case 15
  3705   000306  B4D8               	btfsc	status,2,c
  3706   000308  D77E               	goto	l4385
  3707   00030A  0A1F               	xorlw	31	; case 16
  3708   00030C  B4D8               	btfsc	status,2,c
  3709   00030E  D791               	goto	l4395
  3710   000310  0A01               	xorlw	1	; case 17
  3711   000312  A4D8               	btfss	status,2,c
  3712   000314  0012               	return	
  3713   000316  D799               	goto	l4401
  3714   000318                     l4423:
  3715                           
  3716                           ;TAD_RFID.c: 394:                         addr = 0x0D;
  3717   000318  0E0D               	movlw	13
  3718   00031A  6E28               	movwf	motor_RFID@addr^0,c
  3719                           
  3720                           ;TAD_RFID.c: 395:                         value = 0x00;
  3721   00031C  6A27               	clrf	motor_RFID@value^0,c
  3722                           
  3723                           ;TAD_RFID.c: 396:                         operation_pending = 2;
  3724   00031E  0E02               	movlw	2
  3725   000320  6E29               	movwf	motor_RFID@operation_pending^0,c
  3726                           
  3727                           ;TAD_RFID.c: 397:                         substate = 1;
  3728   000322  0E01               	movlw	1
  3729   000324  6E39               	movwf	motor_RFID@substate^0,c
  3730                           
  3731                           ;TAD_RFID.c: 398:                         break;
  3732   000326  0012               	return	
  3733   000328                     l4427:
  3734                           
  3735                           ;TAD_RFID.c: 400:                         UID[0] = 0x93;
  3736   000328  0E93               	movlw	147
  3737   00032A  6E01               	movwf	motor_RFID@UID^0,c
  3738                           
  3739                           ;TAD_RFID.c: 401:                         UID[1] = 0x20;
  3740   00032C  0E20               	movlw	32
  3741   00032E  6E02               	movwf	(motor_RFID@UID+1)^0,c
  3742                           
  3743                           ;TAD_RFID.c: 402:                         addr = 0x08;
  3744   000330  0E08               	movlw	8
  3745   000332  6E28               	movwf	motor_RFID@addr^0,c
  3746                           
  3747                           ;TAD_RFID.c: 403:                         operation_pending = 1;
  3748   000334  0E01               	movlw	1
  3749   000336  6E29               	movwf	motor_RFID@operation_pending^0,c
  3750                           
  3751                           ;TAD_RFID.c: 404:                         substate = 2;
  3752   000338  0E02               	movlw	2
  3753   00033A  6E39               	movwf	motor_RFID@substate^0,c
  3754                           
  3755                           ;TAD_RFID.c: 405:                         break;
  3756   00033C  0012               	return	
  3757   00033E                     l4429:
  3758                           
  3759                           ;TAD_RFID.c: 407:                         if (tempRegValue == 0xFF) {
  3760   00033E  2830               	incf	motor_RFID@tempRegValue^0,w,c
  3761   000340  B4D8               	btfsc	status,2,c
  3762   000342  D774               	goto	l425
  3763                           
  3764                           ;TAD_RFID.c: 410:                             addr = 0x08;
  3765   000344  0E08               	movlw	8
  3766   000346  6E28               	movwf	motor_RFID@addr^0,c
  3767                           
  3768                           ;TAD_RFID.c: 411:                             value = tempRegValue & ~0x08;
  3769   000348  5030               	movf	motor_RFID@tempRegValue^0,w,c
  3770   00034A  0BF7               	andlw	247
  3771   00034C  6E27               	movwf	motor_RFID@value^0,c
  3772                           
  3773                           ;TAD_RFID.c: 412:                             operation_pending = 2;
  3774   00034E  0E02               	movlw	2
  3775   000350  6E29               	movwf	motor_RFID@operation_pending^0,c
  3776                           
  3777                           ;TAD_RFID.c: 413:                             substate = 3;
  3778   000352  0E03               	movlw	3
  3779   000354  6E39               	movwf	motor_RFID@substate^0,c
  3780   000356  0012               	return	
  3781   000358                     l4441:
  3782                           
  3783                           ;TAD_RFID.c: 417:                         irqEn = 0x77;
  3784   000358  0E77               	movlw	119
  3785   00035A  6E38               	movwf	motor_RFID@irqEn^0,c
  3786                           
  3787                           ;TAD_RFID.c: 418:                         waitIRq = 0x30;
  3788   00035C  0E30               	movlw	48
  3789   00035E  6E37               	movwf	motor_RFID@waitIRq^0,c
  3790                           
  3791                           ;TAD_RFID.c: 419:                         addr = 0x02;
  3792   000360  0E02               	movlw	2
  3793   000362  6E28               	movwf	motor_RFID@addr^0,c
  3794                           
  3795                           ;TAD_RFID.c: 420:                         value = irqEn | 0x80;
  3796   000364  5038               	movf	motor_RFID@irqEn^0,w,c
  3797   000366  0980               	iorlw	128
  3798   000368  D6C8               	goto	L5
  3799   00036A                     l4449:
  3800                           
  3801                           ;TAD_RFID.c: 425:                         addr = 0x04;
  3802   00036A  0E04               	movlw	4
  3803   00036C  6E28               	movwf	motor_RFID@addr^0,c
  3804                           
  3805                           ;TAD_RFID.c: 426:                         operation_pending = 1;
  3806   00036E  0E01               	movlw	1
  3807   000370  6E29               	movwf	motor_RFID@operation_pending^0,c
  3808                           
  3809                           ;TAD_RFID.c: 427:                         substate = 5;
  3810   000372  0E05               	movlw	5
  3811   000374  6E39               	movwf	motor_RFID@substate^0,c
  3812                           
  3813                           ;TAD_RFID.c: 428:                         break;
  3814   000376  0012               	return	
  3815   000378                     l4451:
  3816                           
  3817                           ;TAD_RFID.c: 430:                         if (tempRegValue == 0xFF) {
  3818   000378  2830               	incf	motor_RFID@tempRegValue^0,w,c
  3819   00037A  B4D8               	btfsc	status,2,c
  3820   00037C  D757               	goto	l425
  3821                           
  3822                           ;TAD_RFID.c: 433:                             addr = 0x04;
  3823   00037E  0E04               	movlw	4
  3824   000380  6E28               	movwf	motor_RFID@addr^0,c
  3825                           
  3826                           ;TAD_RFID.c: 434:                             value = tempRegValue & ~0x80;
  3827   000382  5030               	movf	motor_RFID@tempRegValue^0,w,c
  3828   000384  0B7F               	andlw	127
  3829   000386  D6CD               	goto	L6
  3830   000388                     l4463:
  3831                           
  3832                           ;TAD_RFID.c: 440:                         addr = 0x0A;
  3833   000388  0E0A               	movlw	10
  3834   00038A  6E28               	movwf	motor_RFID@addr^0,c
  3835                           
  3836                           ;TAD_RFID.c: 441:                         operation_pending = 1;
  3837   00038C  0E01               	movlw	1
  3838   00038E  6E29               	movwf	motor_RFID@operation_pending^0,c
  3839                           
  3840                           ;TAD_RFID.c: 442:                         substate = 7;
  3841   000390  0E07               	movlw	7
  3842   000392  6E39               	movwf	motor_RFID@substate^0,c
  3843                           
  3844                           ;TAD_RFID.c: 443:                         break;
  3845   000394  0012               	return	
  3846   000396                     l4465:
  3847                           
  3848                           ;TAD_RFID.c: 445:                         if (tempRegValue == 0xFF) {
  3849   000396  2830               	incf	motor_RFID@tempRegValue^0,w,c
  3850   000398  B4D8               	btfsc	status,2,c
  3851   00039A  D748               	goto	l425
  3852                           
  3853                           ;TAD_RFID.c: 448:                             addr = 0x0A;
  3854   00039C  0E0A               	movlw	10
  3855   00039E  6E28               	movwf	motor_RFID@addr^0,c
  3856                           
  3857                           ;TAD_RFID.c: 449:                             value = tempRegValue | 0x80;
  3858   0003A0  5030               	movf	motor_RFID@tempRegValue^0,w,c
  3859   0003A2  0980               	iorlw	128
  3860   0003A4  6E27               	movwf	motor_RFID@value^0,c
  3861                           
  3862                           ;TAD_RFID.c: 450:                             operation_pending = 2;
  3863   0003A6  0E02               	movlw	2
  3864   0003A8  6E29               	movwf	motor_RFID@operation_pending^0,c
  3865                           
  3866                           ;TAD_RFID.c: 451:                             substate = 8;
  3867   0003AA  0E08               	movlw	8
  3868   0003AC  6E39               	movwf	motor_RFID@substate^0,c
  3869   0003AE  0012               	return	
  3870   0003B0                     l4477:
  3871                           
  3872                           ;TAD_RFID.c: 455:                         addr = 0x01;
  3873   0003B0  0E01               	movlw	1
  3874   0003B2  6E28               	movwf	motor_RFID@addr^0,c
  3875                           
  3876                           ;TAD_RFID.c: 456:                         value = 0x00;
  3877   0003B4  6A27               	clrf	motor_RFID@value^0,c
  3878                           
  3879                           ;TAD_RFID.c: 457:                         operation_pending = 2;
  3880   0003B6  0E02               	movlw	2
  3881   0003B8  6E29               	movwf	motor_RFID@operation_pending^0,c
  3882                           
  3883                           ;TAD_RFID.c: 458:                         substate = 9;
  3884   0003BA  0E09               	movlw	9
  3885   0003BC  6E39               	movwf	motor_RFID@substate^0,c
  3886                           
  3887                           ;TAD_RFID.c: 459:                         break;
  3888   0003BE  0012               	return	
  3889   0003C0                     l4481:
  3890                           
  3891                           ;TAD_RFID.c: 461:                         addr = 0x09;
  3892   0003C0  0E09               	movlw	9
  3893   0003C2  6E28               	movwf	motor_RFID@addr^0,c
  3894                           
  3895                           ;TAD_RFID.c: 462:                         value = UID[0];
  3896   0003C4  C001  F027         	movff	motor_RFID@UID,motor_RFID@value
  3897                           
  3898                           ;TAD_RFID.c: 463:                         operation_pending = 2;
  3899   0003C8  0E02               	movlw	2
  3900   0003CA  6E29               	movwf	motor_RFID@operation_pending^0,c
  3901                           
  3902                           ;TAD_RFID.c: 464:                         substate = 10;
  3903   0003CC  0E0A               	movlw	10
  3904   0003CE  6E39               	movwf	motor_RFID@substate^0,c
  3905                           
  3906                           ;TAD_RFID.c: 465:                         break;
  3907   0003D0  0012               	return	
  3908   0003D2                     l4485:
  3909                           
  3910                           ;TAD_RFID.c: 467:                         addr = 0x09;
  3911   0003D2  0E09               	movlw	9
  3912   0003D4  6E28               	movwf	motor_RFID@addr^0,c
  3913                           
  3914                           ;TAD_RFID.c: 468:                         value = UID[1];
  3915   0003D6  C002  F027         	movff	motor_RFID@UID+1,motor_RFID@value
  3916                           
  3917                           ;TAD_RFID.c: 469:                         operation_pending = 2;
  3918   0003DA  0E02               	movlw	2
  3919   0003DC  6E29               	movwf	motor_RFID@operation_pending^0,c
  3920                           
  3921                           ;TAD_RFID.c: 470:                         substate = 11;
  3922   0003DE  0E0B               	movlw	11
  3923   0003E0  6E39               	movwf	motor_RFID@substate^0,c
  3924                           
  3925                           ;TAD_RFID.c: 471:                         break;
  3926   0003E2  0012               	return	
  3927   0003E4                     l4489:
  3928                           
  3929                           ;TAD_RFID.c: 473:                         addr = 0x01;
  3930   0003E4  0E01               	movlw	1
  3931   0003E6  6E28               	movwf	motor_RFID@addr^0,c
  3932                           
  3933                           ;TAD_RFID.c: 474:                         value = 0x0C;
  3934   0003E8  0E0C               	movlw	12
  3935   0003EA  6E27               	movwf	motor_RFID@value^0,c
  3936                           
  3937                           ;TAD_RFID.c: 475:                         operation_pending = 2;
  3938   0003EC  0E02               	movlw	2
  3939   0003EE  6E29               	movwf	motor_RFID@operation_pending^0,c
  3940                           
  3941                           ;TAD_RFID.c: 476:                         substate = 12;
  3942   0003F0  0E0C               	movlw	12
  3943   0003F2  6E39               	movwf	motor_RFID@substate^0,c
  3944                           
  3945                           ;TAD_RFID.c: 477:                         break;
  3946   0003F4  0012               	return	
  3947   0003F6                     l4493:
  3948                           
  3949                           ;TAD_RFID.c: 484:                         if (tempRegValue == 0xFF) {
  3950   0003F6  2830               	incf	motor_RFID@tempRegValue^0,w,c
  3951   0003F8  B4D8               	btfsc	status,2,c
  3952   0003FA  D718               	goto	l425
  3953                           
  3954                           ;TAD_RFID.c: 487:                             addr = 0x0D;
  3955   0003FC  0E0D               	movlw	13
  3956   0003FE  6E28               	movwf	motor_RFID@addr^0,c
  3957                           
  3958                           ;TAD_RFID.c: 488:                             value = tempRegValue | 0x80;
  3959   000400  5030               	movf	motor_RFID@tempRegValue^0,w,c
  3960   000402  0980               	iorlw	128
  3961   000404  D6EE               	goto	L7
  3962   000406                     l465:
  3963                           
  3964                           ;TAD_RFID.c: 494:                         i = 0xFF;
  3965   000406  6835               	setf	motor_RFID@i^0,c
  3966                           
  3967                           ;TAD_RFID.c: 495:                         addr = 0x04;
  3968   000408  0E04               	movlw	4
  3969   00040A  6E28               	movwf	motor_RFID@addr^0,c
  3970                           
  3971                           ;TAD_RFID.c: 496:                         operation_pending = 1;
  3972   00040C  0E01               	movlw	1
  3973   00040E  6E29               	movwf	motor_RFID@operation_pending^0,c
  3974                           
  3975                           ;TAD_RFID.c: 497:                         substate = 15;
  3976   000410  0E0F               	movlw	15
  3977   000412  6E39               	movwf	motor_RFID@substate^0,c
  3978                           
  3979                           ;TAD_RFID.c: 498:                         break;
  3980   000414  0012               	return	
  3981   000416                     l4507:
  3982                           
  3983                           ;TAD_RFID.c: 500:                         if (tempRegValue == 0xFF) {
  3984   000416  2830               	incf	motor_RFID@tempRegValue^0,w,c
  3985   000418  B4D8               	btfsc	status,2,c
  3986   00041A  D708               	goto	l425
  3987                           
  3988                           ;TAD_RFID.c: 503:                             n = tempRegValue;
  3989   00041C  C030  F036         	movff	motor_RFID@tempRegValue,motor_RFID@n
  3990                           
  3991                           ;TAD_RFID.c: 504:                             if ((n & 0x01) || (n & waitIRq) || (--i ==
      +                           0)) {
  3992   000420  B036               	btfsc	motor_RFID@n^0,0,c
  3993   000422  D007               	goto	l4515
  3994   000424  5036               	movf	motor_RFID@n^0,w,c
  3995   000426  1437               	andwf	motor_RFID@waitIRq^0,w,c
  3996   000428  0900               	iorlw	0
  3997   00042A  A4D8               	btfss	status,2,c
  3998   00042C  D002               	goto	l4515
  3999   00042E  2E35               	decfsz	motor_RFID@i^0,f,c
  4000   000430  D6C9               	goto	l4365
  4001   000432                     l4515:
  4002                           
  4003                           ;TAD_RFID.c: 505:                                 addr = 0x0D;
  4004   000432  0E0D               	movlw	13
  4005   000434  6E28               	movwf	motor_RFID@addr^0,c
  4006                           
  4007                           ;TAD_RFID.c: 506:                                 operation_pending = 1;
  4008   000436  0E01               	movlw	1
  4009   000438  6E29               	movwf	motor_RFID@operation_pending^0,c
  4010                           
  4011                           ;TAD_RFID.c: 507:                                 substate = 16;
  4012   00043A  0E10               	movlw	16
  4013   00043C  6E39               	movwf	motor_RFID@substate^0,c
  4014                           
  4015                           ;TAD_RFID.c: 508:                             } else {
  4016   00043E  0012               	return	
  4017   000440                     l4519:
  4018                           
  4019                           ;TAD_RFID.c: 516:                         if (tempRegValue == 0xFF) {
  4020   000440  2830               	incf	motor_RFID@tempRegValue^0,w,c
  4021   000442  B4D8               	btfsc	status,2,c
  4022   000444  D6F3               	goto	l425
  4023                           
  4024                           ;TAD_RFID.c: 519:                             addr = 0x0D;
  4025   000446  0E0D               	movlw	13
  4026   000448  6E28               	movwf	motor_RFID@addr^0,c
  4027                           
  4028                           ;TAD_RFID.c: 520:                             value = tempRegValue & ~0x80;
  4029   00044A  5030               	movf	motor_RFID@tempRegValue^0,w,c
  4030   00044C  0B7F               	andlw	127
  4031   00044E  6E27               	movwf	motor_RFID@value^0,c
  4032                           
  4033                           ;TAD_RFID.c: 521:                             operation_pending = 2;
  4034   000450  0E02               	movlw	2
  4035   000452  6E29               	movwf	motor_RFID@operation_pending^0,c
  4036                           
  4037                           ;TAD_RFID.c: 522:                             substate = 17;
  4038   000454  0E11               	movlw	17
  4039   000456  6E39               	movwf	motor_RFID@substate^0,c
  4040   000458  0012               	return	
  4041   00045A                     l4531:
  4042                           
  4043                           ;TAD_RFID.c: 526:                         addr = 0x06;
  4044   00045A  0E06               	movlw	6
  4045   00045C  6E28               	movwf	motor_RFID@addr^0,c
  4046                           
  4047                           ;TAD_RFID.c: 527:                         operation_pending = 1;
  4048   00045E  0E01               	movlw	1
  4049   000460  6E29               	movwf	motor_RFID@operation_pending^0,c
  4050                           
  4051                           ;TAD_RFID.c: 528:                         substate = 18;
  4052   000462  0E12               	movlw	18
  4053   000464  6E39               	movwf	motor_RFID@substate^0,c
  4054                           
  4055                           ;TAD_RFID.c: 529:                         break;
  4056   000466  0012               	return	
  4057   000468                     l4533:
  4058                           
  4059                           ;TAD_RFID.c: 531:                         if (tempRegValue == 0xFF) {
  4060   000468  2830               	incf	motor_RFID@tempRegValue^0,w,c
  4061   00046A  B4D8               	btfsc	status,2,c
  4062   00046C  D6DF               	goto	l425
  4063   00046E  5035               	movf	motor_RFID@i^0,w,c
  4064   000470  B4D8               	btfsc	status,2,c
  4065   000472  D6DC               	goto	l425
  4066   000474  C030  F071         	movff	motor_RFID@tempRegValue,??_motor_RFID
  4067   000478  0E1B               	movlw	27
  4068   00047A  1671               	andwf	??_motor_RFID^0,f,c
  4069   00047C  A4D8               	btfss	status,2,c
  4070   00047E  D6D6               	goto	l425
  4071                           
  4072                           ;TAD_RFID.c: 534:                             addr = 0x09;
  4073   000480  0E09               	movlw	9
  4074   000482  6E28               	movwf	motor_RFID@addr^0,c
  4075                           
  4076                           ;TAD_RFID.c: 535:                             operation_pending = 1;
  4077   000484  0E01               	movlw	1
  4078   000486  6E29               	movwf	motor_RFID@operation_pending^0,c
  4079                           
  4080                           ;TAD_RFID.c: 536:                             substate = 19;
  4081   000488  0E13               	movlw	19
  4082   00048A  6E39               	movwf	motor_RFID@substate^0,c
  4083                           
  4084                           ;TAD_RFID.c: 537:                         } else {
  4085   00048C  0012               	return	
  4086   00048E                     l4543:
  4087                           
  4088                           ;TAD_RFID.c: 542:                         if (tempRegValue == 0xFF) {
  4089   00048E  2830               	incf	motor_RFID@tempRegValue^0,w,c
  4090   000490  B4D8               	btfsc	status,2,c
  4091   000492  D6CC               	goto	l425
  4092                           
  4093                           ;TAD_RFID.c: 545:                             UID[0] = tempRegValue;
  4094   000494  C030  F001         	movff	motor_RFID@tempRegValue,motor_RFID@UID
  4095                           
  4096                           ;TAD_RFID.c: 546:                             addr = 0x09;
  4097   000498  0E09               	movlw	9
  4098   00049A  6E28               	movwf	motor_RFID@addr^0,c
  4099                           
  4100                           ;TAD_RFID.c: 547:                             operation_pending = 1;
  4101   00049C  0E01               	movlw	1
  4102   00049E  6E29               	movwf	motor_RFID@operation_pending^0,c
  4103                           
  4104                           ;TAD_RFID.c: 548:                             substate = 20;
  4105   0004A0  0E14               	movlw	20
  4106   0004A2  6E39               	movwf	motor_RFID@substate^0,c
  4107   0004A4  0012               	return	
  4108   0004A6                     l4549:
  4109                           
  4110                           ;TAD_RFID.c: 552:                         if (tempRegValue == 0xFF) {
  4111   0004A6  2830               	incf	motor_RFID@tempRegValue^0,w,c
  4112   0004A8  B4D8               	btfsc	status,2,c
  4113   0004AA  D6C0               	goto	l425
  4114                           
  4115                           ;TAD_RFID.c: 555:                             UID[1] = tempRegValue;
  4116   0004AC  C030  F002         	movff	motor_RFID@tempRegValue,motor_RFID@UID+1
  4117                           
  4118                           ;TAD_RFID.c: 556:                             addr = 0x09;
  4119   0004B0  0E09               	movlw	9
  4120   0004B2  6E28               	movwf	motor_RFID@addr^0,c
  4121                           
  4122                           ;TAD_RFID.c: 557:                             operation_pending = 1;
  4123   0004B4  0E01               	movlw	1
  4124   0004B6  6E29               	movwf	motor_RFID@operation_pending^0,c
  4125                           
  4126                           ;TAD_RFID.c: 558:                             substate = 21;
  4127   0004B8  0E15               	movlw	21
  4128   0004BA  6E39               	movwf	motor_RFID@substate^0,c
  4129   0004BC  0012               	return	
  4130   0004BE                     l4555:
  4131                           
  4132                           ;TAD_RFID.c: 562:                         if (tempRegValue == 0xFF) {
  4133   0004BE  2830               	incf	motor_RFID@tempRegValue^0,w,c
  4134   0004C0  B4D8               	btfsc	status,2,c
  4135   0004C2  D6B4               	goto	l425
  4136                           
  4137                           ;TAD_RFID.c: 565:                             UID[2] = tempRegValue;
  4138   0004C4  C030  F003         	movff	motor_RFID@tempRegValue,motor_RFID@UID+2
  4139                           
  4140                           ;TAD_RFID.c: 566:                             addr = 0x09;
  4141   0004C8  0E09               	movlw	9
  4142   0004CA  6E28               	movwf	motor_RFID@addr^0,c
  4143                           
  4144                           ;TAD_RFID.c: 567:                             operation_pending = 1;
  4145   0004CC  0E01               	movlw	1
  4146   0004CE  6E29               	movwf	motor_RFID@operation_pending^0,c
  4147                           
  4148                           ;TAD_RFID.c: 568:                             substate = 22;
  4149   0004D0  0E16               	movlw	22
  4150   0004D2  6E39               	movwf	motor_RFID@substate^0,c
  4151   0004D4  0012               	return	
  4152   0004D6                     l4561:
  4153                           
  4154                           ;TAD_RFID.c: 572:                         if (tempRegValue == 0xFF) {
  4155   0004D6  2830               	incf	motor_RFID@tempRegValue^0,w,c
  4156   0004D8  B4D8               	btfsc	status,2,c
  4157   0004DA  D6A8               	goto	l425
  4158                           
  4159                           ;TAD_RFID.c: 575:                             UID[3] = tempRegValue;
  4160   0004DC  C030  F004         	movff	motor_RFID@tempRegValue,motor_RFID@UID+3
  4161                           
  4162                           ;TAD_RFID.c: 576:                             addr = 0x09;
  4163   0004E0  0E09               	movlw	9
  4164   0004E2  6E28               	movwf	motor_RFID@addr^0,c
  4165                           
  4166                           ;TAD_RFID.c: 577:                             operation_pending = 1;
  4167   0004E4  0E01               	movlw	1
  4168   0004E6  6E29               	movwf	motor_RFID@operation_pending^0,c
  4169                           
  4170                           ;TAD_RFID.c: 578:                             substate = 23;
  4171   0004E8  0E17               	movlw	23
  4172   0004EA  6E39               	movwf	motor_RFID@substate^0,c
  4173   0004EC  0012               	return	
  4174   0004EE                     l4567:
  4175                           
  4176                           ;TAD_RFID.c: 582:                         if (tempRegValue == 0xFF) {
  4177   0004EE  2830               	incf	motor_RFID@tempRegValue^0,w,c
  4178   0004F0  B4D8               	btfsc	status,2,c
  4179   0004F2  D69C               	goto	l425
  4180                           
  4181                           ;TAD_RFID.c: 585:                             UID[4] = tempRegValue;
  4182   0004F4  C030  F005         	movff	motor_RFID@tempRegValue,motor_RFID@UID+4
  4183                           
  4184                           ;TAD_RFID.c: 586:                             UID[5] = 0;
  4185   0004F8  6A06               	clrf	(motor_RFID@UID+5)^0,c
  4186                           
  4187                           ;TAD_RFID.c: 587:                             checksum = UID[0] ^ UID[1] ^ UID[2] ^ UID[
      +                          3];
  4188   0004FA  5002               	movf	(motor_RFID@UID+1)^0,w,c
  4189   0004FC  1803               	xorwf	(motor_RFID@UID+2)^0,w,c
  4190   0004FE  1804               	xorwf	(motor_RFID@UID+3)^0,w,c
  4191   000500  1801               	xorwf	motor_RFID@UID^0,w,c
  4192   000502  6E32               	movwf	motor_RFID@checksum^0,c
  4193                           
  4194                           ;TAD_RFID.c: 588:                             allZero = ((UID[0] | UID[1] | UID[2] | UID
      +                          [3]) == 0);
  4195   000504  5002               	movf	(motor_RFID@UID+1)^0,w,c
  4196   000506  1003               	iorwf	(motor_RFID@UID+2)^0,w,c
  4197   000508  1004               	iorwf	(motor_RFID@UID+3)^0,w,c
  4198   00050A  1001               	iorwf	motor_RFID@UID^0,w,c
  4199   00050C  0900               	iorlw	0
  4200   00050E  A4D8               	btfss	status,2,c
  4201   000510  D002               	goto	u4110
  4202   000512  0E01               	movlw	1
  4203   000514  D001               	goto	u4120
  4204   000516                     u4110:
  4205   000516  0E00               	movlw	0
  4206   000518                     u4120:
  4207   000518  6E31               	movwf	motor_RFID@allZero^0,c
  4208                           
  4209                           ;TAD_RFID.c: 589:                             substate = 24;
  4210   00051A  0E18               	movlw	24
  4211   00051C  6E39               	movwf	motor_RFID@substate^0,c
  4212   00051E  0012               	return	
  4213   000520                     l4575:
  4214                           
  4215                           ;TAD_RFID.c: 593:                         if (checksum != UID[4] || allZero) {
  4216   000520  5032               	movf	motor_RFID@checksum^0,w,c
  4217   000522  1805               	xorwf	(motor_RFID@UID+4)^0,w,c
  4218   000524  A4D8               	btfss	status,2,c
  4219   000526  D682               	goto	l425
  4220   000528  5031               	movf	motor_RFID@allZero^0,w,c
  4221   00052A  A4D8               	btfss	status,2,c
  4222   00052C  D67F               	goto	l425
  4223                           
  4224                           ;TAD_RFID.c: 597:                             substate = 25;
  4225   00052E  0E19               	movlw	25
  4226   000530  6E39               	movwf	motor_RFID@substate^0,c
  4227   000532  0012               	return	
  4228   000534                     l4581:
  4229                           
  4230                           ;TAD_RFID.c: 603:                         getActualUID(currentUser, 0xFF);
  4231   000534  0E45               	movlw	low motor_RFID@currentUser
  4232   000536  6E56               	movwf	getActualUID@UID^0,c
  4233   000538  0EFF               	movlw	255
  4234   00053A  6E57               	movwf	getActualUID@userIndex^0,c
  4235   00053C  EC37  F00A         	call	_getActualUID	;wreg free
  4236                           
  4237                           ;TAD_RFID.c: 604:                         if (getCurrentUserIndex() != 4) {
  4238   000540  EC97  F00D         	call	_getCurrentUserIndex	;wreg free
  4239   000544  0A04               	xorlw	4
  4240   000546  B4D8               	btfsc	status,2,c
  4241   000548  D003               	goto	l4587
  4242                           
  4243                           ;TAD_RFID.c: 605:                             substate = 26;
  4244   00054A  0E1A               	movlw	26
  4245   00054C  6E39               	movwf	motor_RFID@substate^0,c
  4246                           
  4247                           ;TAD_RFID.c: 606:                         } else if (cardRemoved == 1) {
  4248   00054E  0012               	return	
  4249   000550                     l4587:
  4250   000550  042C               	decf	motor_RFID@cardRemoved^0,w,c
  4251   000552  A4D8               	btfss	status,2,c
  4252   000554  D003               	goto	l4591
  4253   000556                     u4160:
  4254                           
  4255                           ;TAD_RFID.c: 607:                             substate = 27;
  4256   000556  0E1B               	movlw	27
  4257   000558  6E39               	movwf	motor_RFID@substate^0,c
  4258                           
  4259                           ;TAD_RFID.c: 608:                         } else {
  4260   00055A  0012               	return	
  4261   00055C                     l4591:
  4262                           
  4263                           ;TAD_RFID.c: 609:                             substate = 28;
  4264   00055C  0E1C               	movlw	28
  4265   00055E  6E39               	movwf	motor_RFID@substate^0,c
  4266   000560  0012               	return	
  4267   000562                     l4593:
  4268                           
  4269                           ;TAD_RFID.c: 616:                         if(currentUser[0] == UID[0] && currentUser[1] 
      +                          == UID[1] &&
  4270   000562  5001               	movf	motor_RFID@UID^0,w,c
  4271   000564  1845               	xorwf	motor_RFID@currentUser^0,w,c
  4272   000566  A4D8               	btfss	status,2,c
  4273   000568  D7F6               	goto	u4160
  4274   00056A  5002               	movf	(motor_RFID@UID+1)^0,w,c
  4275   00056C  1846               	xorwf	(motor_RFID@currentUser+1)^0,w,c
  4276   00056E  A4D8               	btfss	status,2,c
  4277   000570  D7F2               	goto	u4160
  4278   000572  5003               	movf	(motor_RFID@UID+2)^0,w,c
  4279   000574  1847               	xorwf	(motor_RFID@currentUser+2)^0,w,c
  4280   000576  A4D8               	btfss	status,2,c
  4281   000578  D7EE               	goto	u4160
  4282   00057A  5004               	movf	(motor_RFID@UID+3)^0,w,c
  4283   00057C  1848               	xorwf	(motor_RFID@currentUser+3)^0,w,c
  4284   00057E  A4D8               	btfss	status,2,c
  4285   000580  D7EA               	goto	u4160
  4286   000582  5005               	movf	(motor_RFID@UID+4)^0,w,c
  4287   000584  1849               	xorwf	(motor_RFID@currentUser+4)^0,w,c
  4288   000586  A4D8               	btfss	status,2,c
  4289   000588  D7E6               	goto	u4160
  4290                           
  4291                           ;TAD_RFID.c: 618:                            currentUser[4] == UID[4]) {;TAD_RFID.c: 619
      +                          :                             if (cardRemoved == 1) {
  4292   00058A  042C               	decf	motor_RFID@cardRemoved^0,w,c
  4293   00058C  A4D8               	btfss	status,2,c
  4294   00058E  D7E6               	goto	l4591
  4295                           
  4296                           ;TAD_RFID.c: 621:                                 setIndex(4);
  4297   000590  0E04               	movlw	4
  4298   000592  EC89  F00D         	call	_setIndex
  4299   000596                     l4607:
  4300                           
  4301                           ;TAD_RFID.c: 622:                                 substate = 28;
  4302   000596  0E1C               	movlw	28
  4303   000598  6E39               	movwf	motor_RFID@substate^0,c
  4304                           
  4305                           ;TAD_RFID.c: 623:                                 cardRemoved = 0;
  4306   00059A  6A2C               	clrf	motor_RFID@cardRemoved^0,c
  4307                           
  4308                           ;TAD_RFID.c: 624:                             } else {
  4309   00059C  0012               	return	
  4310   00059E                     l4615:
  4311                           
  4312                           ;TAD_RFID.c: 636:                         if(motor_setCurrentUser(UID[0], UID[1], UID[2]
      +                          , UID[3], UID[4]) == 1) {
  4313   00059E  C002  F06C         	movff	motor_RFID@UID+1,motor_setCurrentUser@UID1
  4314   0005A2  C003  F06D         	movff	motor_RFID@UID+2,motor_setCurrentUser@UID2
  4315   0005A6  C004  F06E         	movff	motor_RFID@UID+3,motor_setCurrentUser@UID3
  4316   0005AA  C005  F06F         	movff	motor_RFID@UID+4,motor_setCurrentUser@UID4
  4317   0005AE  5001               	movf	motor_RFID@UID^0,w,c
  4318   0005B0  ECD1  F005         	call	_motor_setCurrentUser
  4319   0005B4  06E8               	decf	wreg,f,c
  4320   0005B6  A4D8               	btfss	status,2,c
  4321   0005B8  0012               	return	
  4322   0005BA  D7ED               	goto	l4607
  4323   0005BC                     l4621:
  4324                           
  4325                           ;TAD_RFID.c: 644:                         addr = 0x0D;
  4326   0005BC  0E0D               	movlw	13
  4327   0005BE  6E28               	movwf	motor_RFID@addr^0,c
  4328                           
  4329                           ;TAD_RFID.c: 645:                         value = 0x00;
  4330   0005C0  6A27               	clrf	motor_RFID@value^0,c
  4331                           
  4332                           ;TAD_RFID.c: 646:                         operation_pending = 2;
  4333   0005C2  0E02               	movlw	2
  4334   0005C4  6E29               	movwf	motor_RFID@operation_pending^0,c
  4335   0005C6  D632               	goto	l425
  4336   0005C8                     l4629:
  4337   0005C8  5039               	movf	motor_RFID@substate^0,w,c
  4338                           
  4339                           ; Switch size 1, requested type "simple"
  4340                           ; Number of cases is 29, Range of values is 0 to 28
  4341                           ; switch strategies available:
  4342                           ; Name         Instructions Cycles
  4343                           ; simple_byte           88    45 (average)
  4344                           ;	Chosen strategy is simple_byte
  4345   0005CA  0A00               	xorlw	0	; case 0
  4346   0005CC  B4D8               	btfsc	status,2,c
  4347   0005CE  D6A4               	goto	l4423
  4348   0005D0  0A01               	xorlw	1	; case 1
  4349   0005D2  B4D8               	btfsc	status,2,c
  4350   0005D4  D6A9               	goto	l4427
  4351   0005D6  0A03               	xorlw	3	; case 2
  4352   0005D8  B4D8               	btfsc	status,2,c
  4353   0005DA  D6B1               	goto	l4429
  4354   0005DC  0A01               	xorlw	1	; case 3
  4355   0005DE  B4D8               	btfsc	status,2,c
  4356   0005E0  D6BB               	goto	l4441
  4357   0005E2  0A07               	xorlw	7	; case 4
  4358   0005E4  B4D8               	btfsc	status,2,c
  4359   0005E6  D6C1               	goto	l4449
  4360   0005E8  0A01               	xorlw	1	; case 5
  4361   0005EA  B4D8               	btfsc	status,2,c
  4362   0005EC  D6C5               	goto	l4451
  4363   0005EE  0A03               	xorlw	3	; case 6
  4364   0005F0  B4D8               	btfsc	status,2,c
  4365   0005F2  D6CA               	goto	l4463
  4366   0005F4  0A01               	xorlw	1	; case 7
  4367   0005F6  B4D8               	btfsc	status,2,c
  4368   0005F8  D6CE               	goto	l4465
  4369   0005FA  0A0F               	xorlw	15	; case 8
  4370   0005FC  B4D8               	btfsc	status,2,c
  4371   0005FE  D6D8               	goto	l4477
  4372   000600  0A01               	xorlw	1	; case 9
  4373   000602  B4D8               	btfsc	status,2,c
  4374   000604  D6DD               	goto	l4481
  4375   000606  0A03               	xorlw	3	; case 10
  4376   000608  B4D8               	btfsc	status,2,c
  4377   00060A  D6E3               	goto	l4485
  4378   00060C  0A01               	xorlw	1	; case 11
  4379   00060E  B4D8               	btfsc	status,2,c
  4380   000610  D6E9               	goto	l4489
  4381   000612  0A07               	xorlw	7	; case 12
  4382   000614  B4D8               	btfsc	status,2,c
  4383   000616  D5CF               	goto	l4363
  4384   000618  0A01               	xorlw	1	; case 13
  4385   00061A  B4D8               	btfsc	status,2,c
  4386   00061C  D6EC               	goto	l4493
  4387   00061E  0A03               	xorlw	3	; case 14
  4388   000620  B4D8               	btfsc	status,2,c
  4389   000622  D6F1               	goto	l465
  4390   000624  0A01               	xorlw	1	; case 15
  4391   000626  B4D8               	btfsc	status,2,c
  4392   000628  D6F6               	goto	l4507
  4393   00062A  0A1F               	xorlw	31	; case 16
  4394   00062C  B4D8               	btfsc	status,2,c
  4395   00062E  D708               	goto	l4519
  4396   000630  0A01               	xorlw	1	; case 17
  4397   000632  B4D8               	btfsc	status,2,c
  4398   000634  D712               	goto	l4531
  4399   000636  0A03               	xorlw	3	; case 18
  4400   000638  B4D8               	btfsc	status,2,c
  4401   00063A  D716               	goto	l4533
  4402   00063C  0A01               	xorlw	1	; case 19
  4403   00063E  B4D8               	btfsc	status,2,c
  4404   000640  D726               	goto	l4543
  4405   000642  0A07               	xorlw	7	; case 20
  4406   000644  B4D8               	btfsc	status,2,c
  4407   000646  D72F               	goto	l4549
  4408   000648  0A01               	xorlw	1	; case 21
  4409   00064A  B4D8               	btfsc	status,2,c
  4410   00064C  D738               	goto	l4555
  4411   00064E  0A03               	xorlw	3	; case 22
  4412   000650  B4D8               	btfsc	status,2,c
  4413   000652  D741               	goto	l4561
  4414   000654  0A01               	xorlw	1	; case 23
  4415   000656  B4D8               	btfsc	status,2,c
  4416   000658  D74A               	goto	l4567
  4417   00065A  0A0F               	xorlw	15	; case 24
  4418   00065C  B4D8               	btfsc	status,2,c
  4419   00065E  D760               	goto	l4575
  4420   000660  0A01               	xorlw	1	; case 25
  4421   000662  B4D8               	btfsc	status,2,c
  4422   000664  D767               	goto	l4581
  4423   000666  0A03               	xorlw	3	; case 26
  4424   000668  B4D8               	btfsc	status,2,c
  4425   00066A  D77B               	goto	l4593
  4426   00066C  0A01               	xorlw	1	; case 27
  4427   00066E  B4D8               	btfsc	status,2,c
  4428   000670  D796               	goto	l4615
  4429   000672  0A07               	xorlw	7	; case 28
  4430   000674  A4D8               	btfss	status,2,c
  4431   000676  0012               	return	
  4432   000678  D7A1               	goto	l4621
  4433   00067A                     l4633:
  4434   00067A  503A               	movf	motor_RFID@state^0,w,c
  4435                           
  4436                           ; Switch size 1, requested type "simple"
  4437                           ; Number of cases is 2, Range of values is 0 to 1
  4438                           ; switch strategies available:
  4439                           ; Name         Instructions Cycles
  4440                           ; simple_byte            7     4 (average)
  4441                           ;	Chosen strategy is simple_byte
  4442   00067C  0A00               	xorlw	0	; case 0
  4443   00067E  B4D8               	btfsc	status,2,c
  4444   000680  D613               	goto	l4421
  4445   000682  0A01               	xorlw	1	; case 1
  4446   000684  A4D8               	btfss	status,2,c
  4447   000686  0012               	return	
  4448   000688  D79F               	goto	l4629
  4449   00068A                     __end_of_motor_RFID:
  4450                           	callstack 0
  4451                           
  4452 ;; *************** function _setIndex *****************
  4453 ;; Defined at:
  4454 ;;		line 82 in file "TAD_DATOS.c"
  4455 ;; Parameters:    Size  Location     Type
  4456 ;;  indexActual     1    wreg     unsigned char 
  4457 ;; Auto vars:     Size  Location     Type
  4458 ;;  indexActual     1    1[COMRAM] unsigned char 
  4459 ;; Return value:  Size  Location     Type
  4460 ;;                  1    wreg      void 
  4461 ;; Registers used:
  4462 ;;		wreg
  4463 ;; Tracked objects:
  4464 ;;		On entry : 0/0
  4465 ;;		On exit  : 0/0
  4466 ;;		Unchanged: 0/0
  4467 ;; Data sizes:     COMRAM   BANK0   BANK1
  4468 ;;      Params:         0       0       0
  4469 ;;      Locals:         1       0       0
  4470 ;;      Temps:          0       0       0
  4471 ;;      Totals:         1       0       0
  4472 ;;Total ram usage:        1 bytes
  4473 ;; Hardware stack levels used: 1
  4474 ;; Hardware stack levels required when called: 3
  4475 ;; This function calls:
  4476 ;;		Nothing
  4477 ;; This function is called by:
  4478 ;;		_motor_RFID
  4479 ;; This function uses a non-reentrant model
  4480 ;;
  4481                           
  4482                           	psect	text6
  4483   001B12                     __ptext6:
  4484                           	callstack 0
  4485   001B12                     _setIndex:
  4486                           	callstack 26
  4487                           
  4488                           ;incstack = 0
  4489                           ;setIndex@indexActual stored from wreg
  4490   001B12  6E56               	movwf	setIndex@indexActual^0,c
  4491                           
  4492                           ;TAD_DATOS.c: 83:     index = indexActual;
  4493   001B14  C056  F07C         	movff	setIndex@indexActual,_index
  4494   001B18  0012               	return		;funcret
  4495   001B1A                     __end_of_setIndex:
  4496                           	callstack 0
  4497                           
  4498 ;; *************** function _motor_setCurrentUser *****************
  4499 ;; Defined at:
  4500 ;;		line 87 in file "TAD_DATOS.c"
  4501 ;; Parameters:    Size  Location     Type
  4502 ;;  UID0            1    wreg     unsigned char 
  4503 ;;  UID1            1   23[COMRAM] unsigned char 
  4504 ;;  UID2            1   24[COMRAM] unsigned char 
  4505 ;;  UID3            1   25[COMRAM] unsigned char 
  4506 ;;  UID4            1   26[COMRAM] unsigned char 
  4507 ;; Auto vars:     Size  Location     Type
  4508 ;;  UID0            1   27[COMRAM] unsigned char 
  4509 ;; Return value:  Size  Location     Type
  4510 ;;                  1    wreg      unsigned char 
  4511 ;; Registers used:
  4512 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4513 ;; Tracked objects:
  4514 ;;		On entry : 0/0
  4515 ;;		On exit  : 0/0
  4516 ;;		Unchanged: 0/0
  4517 ;; Data sizes:     COMRAM   BANK0   BANK1
  4518 ;;      Params:         4       0       0
  4519 ;;      Locals:         1       0       0
  4520 ;;      Temps:          0       0       0
  4521 ;;      Totals:         5       0       0
  4522 ;;Total ram usage:        5 bytes
  4523 ;; Hardware stack levels used: 1
  4524 ;; Hardware stack levels required when called: 8
  4525 ;; This function calls:
  4526 ;;		_printfUID
  4527 ;; This function is called by:
  4528 ;;		_motor_RFID
  4529 ;; This function uses a non-reentrant model
  4530 ;;
  4531                           
  4532                           	psect	text7
  4533   000BA2                     __ptext7:
  4534                           	callstack 0
  4535   000BA2                     _motor_setCurrentUser:
  4536                           	callstack 21
  4537                           
  4538                           ;incstack = 0
  4539                           ;motor_setCurrentUser@UID0 stored from wreg
  4540   000BA2  6E70               	movwf	motor_setCurrentUser@UID0^0,c
  4541                           
  4542                           ;TAD_DATOS.c: 88:     static char state_setCurrentUser = 0;;TAD_DATOS.c: 90:     switch(
      +                          state_setCurrentUser) {
  4543   000BA4  D081               	goto	l3843
  4544   000BA6                     l3757:
  4545                           
  4546                           ;TAD_DATOS.c: 92:             currentUser[0] = UID0;
  4547   000BA6  C070  F040         	movff	motor_setCurrentUser@UID0,_currentUser
  4548                           
  4549                           ;TAD_DATOS.c: 93:             currentUser[1] = UID1;
  4550   000BAA  C06C  F041         	movff	motor_setCurrentUser@UID1,_currentUser+1
  4551                           
  4552                           ;TAD_DATOS.c: 94:             currentUser[2] = UID2;
  4553   000BAE  C06D  F042         	movff	motor_setCurrentUser@UID2,_currentUser+2
  4554                           
  4555                           ;TAD_DATOS.c: 95:             currentUser[3] = UID3;
  4556   000BB2  C06E  F043         	movff	motor_setCurrentUser@UID3,_currentUser+3
  4557                           
  4558                           ;TAD_DATOS.c: 96:             currentUser[4] = UID4;
  4559   000BB6  C06F  F044         	movff	motor_setCurrentUser@UID4,_currentUser+4
  4560                           
  4561                           ;TAD_DATOS.c: 97:             new_user = 1;
  4562   000BBA  0E01               	movlw	1
  4563   000BBC  6E1B               	movwf	_new_user^0,c
  4564                           
  4565                           ;TAD_DATOS.c: 98:             state_setCurrentUser = 1;
  4566   000BBE  0E01               	movlw	1
  4567   000BC0  D02F               	goto	L10
  4568   000BC2                     l3771:
  4569                           
  4570                           ;TAD_DATOS.c: 102:             if (UID0 == 0x65 && UID1 == 0xDC && UID2 == 0xF9 && UID3 
      +                          == 0x03 && UID4 == 0x43) {
  4571   000BC2  0E65               	movlw	101
  4572   000BC4  1870               	xorwf	motor_setCurrentUser@UID0^0,w,c
  4573   000BC6  A4D8               	btfss	status,2,c
  4574   000BC8  D013               	goto	l3785
  4575   000BCA  0EDC               	movlw	220
  4576   000BCC  186C               	xorwf	motor_setCurrentUser@UID1^0,w,c
  4577   000BCE  A4D8               	btfss	status,2,c
  4578   000BD0  D00F               	goto	l3785
  4579   000BD2  0EF9               	movlw	249
  4580   000BD4  186D               	xorwf	motor_setCurrentUser@UID2^0,w,c
  4581   000BD6  A4D8               	btfss	status,2,c
  4582   000BD8  D00B               	goto	l3785
  4583   000BDA  0E03               	movlw	3
  4584   000BDC  186E               	xorwf	motor_setCurrentUser@UID3^0,w,c
  4585   000BDE  A4D8               	btfss	status,2,c
  4586   000BE0  D007               	goto	l3785
  4587   000BE2  0E43               	movlw	67
  4588   000BE4  186F               	xorwf	motor_setCurrentUser@UID4^0,w,c
  4589   000BE6  A4D8               	btfss	status,2,c
  4590   000BE8  D003               	goto	l3785
  4591                           
  4592                           ;TAD_DATOS.c: 103:                 index = 0;
  4593   000BEA  6A7C               	clrf	_index^0,c
  4594   000BEC                     l3783:
  4595                           
  4596                           ;TAD_DATOS.c: 104:                 state_setCurrentUser = 6;
  4597   000BEC  0E06               	movlw	6
  4598   000BEE  D018               	goto	L10
  4599   000BF0                     l3785:
  4600                           
  4601                           ;TAD_DATOS.c: 107:             state_setCurrentUser = 2;
  4602   000BF0  0E02               	movlw	2
  4603   000BF2  D016               	goto	L10
  4604   000BF4                     l3787:
  4605                           
  4606                           ;TAD_DATOS.c: 110:             if (UID0 == 0xDC && UID1 == 0x0D && UID2 == 0xF9 && UID3 
      +                          == 0x03 && UID4 == 0x2B) {
  4607   000BF4  0EDC               	movlw	220
  4608   000BF6  1870               	xorwf	motor_setCurrentUser@UID0^0,w,c
  4609   000BF8  A4D8               	btfss	status,2,c
  4610   000BFA  D014               	goto	l3799
  4611   000BFC  0E0D               	movlw	13
  4612   000BFE  186C               	xorwf	motor_setCurrentUser@UID1^0,w,c
  4613   000C00  A4D8               	btfss	status,2,c
  4614   000C02  D010               	goto	l3799
  4615   000C04  0EF9               	movlw	249
  4616   000C06  186D               	xorwf	motor_setCurrentUser@UID2^0,w,c
  4617   000C08  A4D8               	btfss	status,2,c
  4618   000C0A  D00C               	goto	l3799
  4619   000C0C  0E03               	movlw	3
  4620   000C0E  186E               	xorwf	motor_setCurrentUser@UID3^0,w,c
  4621   000C10  A4D8               	btfss	status,2,c
  4622   000C12  D008               	goto	l3799
  4623   000C14  0E2B               	movlw	43
  4624   000C16  186F               	xorwf	motor_setCurrentUser@UID4^0,w,c
  4625   000C18  A4D8               	btfss	status,2,c
  4626   000C1A  D004               	goto	l3799
  4627                           
  4628                           ;TAD_DATOS.c: 111:                 index = 1;
  4629   000C1C  0E01               	movlw	1
  4630   000C1E  D035               	goto	L13
  4631   000C20                     L10:
  4632   000C20  6E1A               	movwf	motor_setCurrentUser@state_setCurrentUser^0,c
  4633                           
  4634                           ;TAD_DATOS.c: 113:                 break;
  4635   000C22  D058               	goto	l3845
  4636   000C24                     l3799:
  4637                           
  4638                           ;TAD_DATOS.c: 115:             state_setCurrentUser = 3;
  4639   000C24  0E03               	movlw	3
  4640   000C26  6E1A               	movwf	motor_setCurrentUser@state_setCurrentUser^0,c
  4641   000C28                     l3801:
  4642                           
  4643                           ;TAD_DATOS.c: 117:             if (UID0 == 0xDF && UID1 == 0x8B && UID2 == 0xDF && UID3 
      +                          == 0xC4 && UID4 == 0x4F) {
  4644   000C28  0EDF               	movlw	223
  4645   000C2A  1870               	xorwf	motor_setCurrentUser@UID0^0,w,c
  4646   000C2C  A4D8               	btfss	status,2,c
  4647   000C2E  D012               	goto	l3813
  4648   000C30  0E8B               	movlw	139
  4649   000C32  186C               	xorwf	motor_setCurrentUser@UID1^0,w,c
  4650   000C34  A4D8               	btfss	status,2,c
  4651   000C36  D00E               	goto	l3813
  4652   000C38  0EDF               	movlw	223
  4653   000C3A  186D               	xorwf	motor_setCurrentUser@UID2^0,w,c
  4654   000C3C  A4D8               	btfss	status,2,c
  4655   000C3E  D00A               	goto	l3813
  4656   000C40  0EC4               	movlw	196
  4657   000C42  186E               	xorwf	motor_setCurrentUser@UID3^0,w,c
  4658   000C44  A4D8               	btfss	status,2,c
  4659   000C46  D006               	goto	l3813
  4660   000C48  0E4F               	movlw	79
  4661   000C4A  186F               	xorwf	motor_setCurrentUser@UID4^0,w,c
  4662   000C4C  A4D8               	btfss	status,2,c
  4663   000C4E  D002               	goto	l3813
  4664                           
  4665                           ;TAD_DATOS.c: 118:                 index = 2;
  4666   000C50  0E02               	movlw	2
  4667   000C52  D01B               	goto	L13
  4668   000C54                     l3813:
  4669                           
  4670                           ;TAD_DATOS.c: 122:             state_setCurrentUser = 4;
  4671   000C54  0E04               	movlw	4
  4672   000C56  D7E4               	goto	L10
  4673   000C58                     l3815:
  4674                           
  4675                           ;TAD_DATOS.c: 125:             if (UID0 == 0x21 && UID1 == 0x32 && UID2 == 0xA9 && UID3 
      +                          == 0x89 && UID4 == 0x33) {
  4676   000C58  0E21               	movlw	33
  4677   000C5A  1870               	xorwf	motor_setCurrentUser@UID0^0,w,c
  4678   000C5C  A4D8               	btfss	status,2,c
  4679   000C5E  D012               	goto	l3827
  4680   000C60  0E32               	movlw	50
  4681   000C62  186C               	xorwf	motor_setCurrentUser@UID1^0,w,c
  4682   000C64  A4D8               	btfss	status,2,c
  4683   000C66  D00E               	goto	l3827
  4684   000C68  0EA9               	movlw	169
  4685   000C6A  186D               	xorwf	motor_setCurrentUser@UID2^0,w,c
  4686   000C6C  A4D8               	btfss	status,2,c
  4687   000C6E  D00A               	goto	l3827
  4688   000C70  0E89               	movlw	137
  4689   000C72  186E               	xorwf	motor_setCurrentUser@UID3^0,w,c
  4690   000C74  A4D8               	btfss	status,2,c
  4691   000C76  D006               	goto	l3827
  4692   000C78  0E33               	movlw	51
  4693   000C7A  186F               	xorwf	motor_setCurrentUser@UID4^0,w,c
  4694   000C7C  A4D8               	btfss	status,2,c
  4695   000C7E  D002               	goto	l3827
  4696                           
  4697                           ;TAD_DATOS.c: 126:                 index = 3;
  4698   000C80  0E03               	movlw	3
  4699   000C82  D003               	goto	L13
  4700   000C84                     l3827:
  4701                           
  4702                           ;TAD_DATOS.c: 130:             state_setCurrentUser = 5;
  4703   000C84  0E05               	movlw	5
  4704   000C86  D7CC               	goto	L10
  4705   000C88                     l3829:
  4706                           
  4707                           ;TAD_DATOS.c: 133:             index = 4;
  4708   000C88  0E04               	movlw	4
  4709   000C8A                     L13:
  4710   000C8A  6E7C               	movwf	_index^0,c
  4711   000C8C  D7AF               	goto	l3783
  4712   000C8E                     l3831:
  4713                           
  4714                           ;TAD_DATOS.c: 137:             printfUID(currentUser, index, "\r\nTargeta detectada!");
  4715   000C8E  0E40               	movlw	low _currentUser
  4716   000C90  6E5C               	movwf	printfUID@currentUser^0,c
  4717   000C92  C07C  F05D         	movff	_index,printfUID@userIndex
  4718   000C96  0EBE               	movlw	low STR_15
  4719   000C98  6E5E               	movwf	printfUID@extraString^0,c
  4720   000C9A  0E1F               	movlw	high STR_15
  4721   000C9C  6E5F               	movwf	(printfUID@extraString+1)^0,c
  4722   000C9E  EC45  F003         	call	_printfUID	;wreg free
  4723                           
  4724                           ;TAD_DATOS.c: 138:             state_setCurrentUser = 0;
  4725   000CA2  6A1A               	clrf	motor_setCurrentUser@state_setCurrentUser^0,c
  4726                           
  4727                           ;TAD_DATOS.c: 139:             return 1;
  4728   000CA4  0E01               	movlw	1
  4729   000CA6  0012               	return	
  4730   000CA8                     l3843:
  4731   000CA8  501A               	movf	motor_setCurrentUser@state_setCurrentUser^0,w,c
  4732                           
  4733                           ; Switch size 1, requested type "simple"
  4734                           ; Number of cases is 7, Range of values is 0 to 6
  4735                           ; switch strategies available:
  4736                           ; Name         Instructions Cycles
  4737                           ; simple_byte           22    12 (average)
  4738                           ;	Chosen strategy is simple_byte
  4739   000CAA  0A00               	xorlw	0	; case 0
  4740   000CAC  B4D8               	btfsc	status,2,c
  4741   000CAE  D77B               	goto	l3757
  4742   000CB0  0A01               	xorlw	1	; case 1
  4743   000CB2  B4D8               	btfsc	status,2,c
  4744   000CB4  D786               	goto	l3771
  4745   000CB6  0A03               	xorlw	3	; case 2
  4746   000CB8  B4D8               	btfsc	status,2,c
  4747   000CBA  D79C               	goto	l3787
  4748   000CBC  0A01               	xorlw	1	; case 3
  4749   000CBE  B4D8               	btfsc	status,2,c
  4750   000CC0  D7B3               	goto	l3801
  4751   000CC2  0A07               	xorlw	7	; case 4
  4752   000CC4  B4D8               	btfsc	status,2,c
  4753   000CC6  D7C8               	goto	l3815
  4754   000CC8  0A01               	xorlw	1	; case 5
  4755   000CCA  B4D8               	btfsc	status,2,c
  4756   000CCC  D7DD               	goto	l3829
  4757   000CCE  0A03               	xorlw	3	; case 6
  4758   000CD0  B4D8               	btfsc	status,2,c
  4759   000CD2  D7DD               	goto	l3831
  4760   000CD4                     l3845:
  4761                           
  4762                           ;TAD_DATOS.c: 142:     return 0;
  4763   000CD4  0E00               	movlw	0
  4764   000CD6  0012               	return		;funcret
  4765   000CD8                     __end_of_motor_setCurrentUser:
  4766                           	callstack 0
  4767                           
  4768 ;; *************** function _motor_LEDs *****************
  4769 ;; Defined at:
  4770 ;;		line 37 in file "TAD_LEDS.c"
  4771 ;; Parameters:    Size  Location     Type
  4772 ;;		None
  4773 ;; Auto vars:     Size  Location     Type
  4774 ;;  i               1   23[COMRAM] unsigned char 
  4775 ;;  currentTics     4   19[COMRAM] unsigned long 
  4776 ;;  i               1   24[COMRAM] unsigned char 
  4777 ;; Return value:  Size  Location     Type
  4778 ;;                  1    wreg      void 
  4779 ;; Registers used:
  4780 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4781 ;; Tracked objects:
  4782 ;;		On entry : 0/0
  4783 ;;		On exit  : 0/0
  4784 ;;		Unchanged: 0/0
  4785 ;; Data sizes:     COMRAM   BANK0   BANK1
  4786 ;;      Params:         0       0       0
  4787 ;;      Locals:         6       0       0
  4788 ;;      Temps:          5       0       0
  4789 ;;      Totals:        11       0       0
  4790 ;;Total ram usage:       11 bytes
  4791 ;; Hardware stack levels used: 1
  4792 ;; Hardware stack levels required when called: 4
  4793 ;; This function calls:
  4794 ;;		_TI_GetTics
  4795 ;;		_TI_ResetTics
  4796 ;;		_controlLED
  4797 ;;		_getActualLeds
  4798 ;; This function is called by:
  4799 ;;		_main
  4800 ;; This function uses a non-reentrant model
  4801 ;;
  4802                           
  4803                           	psect	text8
  4804   000EC2                     __ptext8:
  4805                           	callstack 0
  4806   000EC2                     _motor_LEDs:
  4807                           	callstack 26
  4808                           
  4809                           ;TAD_LEDS.c: 39:     getActualLeds(ActualLeds, 20);
  4810                           
  4811                           ;incstack = 0
  4812   000EC2  0EB8               	movlw	low _ActualLeds
  4813   000EC4  6E56               	movwf	getActualLeds@leds^0,c
  4814   000EC6  0E14               	movlw	20
  4815   000EC8  6E57               	movwf	getActualLeds@userIndex^0,c
  4816   000ECA  EC66  F00B         	call	_getActualLeds	;wreg free
  4817                           
  4818                           ;TAD_LEDS.c: 42:     static unsigned long lastTics = 0;;TAD_LEDS.c: 43:     unsigned lon
      +                          g currentTics = TI_GetTics(timer);
  4819   000ECE  5053               	movf	_timer^0,w,c
  4820   000ED0  ECE4  F00B         	call	_TI_GetTics
  4821   000ED4  C056  F068         	movff	?_TI_GetTics,motor_LEDs@currentTics
  4822   000ED8  C057  F069         	movff	?_TI_GetTics+1,motor_LEDs@currentTics+1
  4823   000EDC  C058  F06A         	movff	?_TI_GetTics+2,motor_LEDs@currentTics+2
  4824   000EE0  C059  F06B         	movff	?_TI_GetTics+3,motor_LEDs@currentTics+3
  4825                           
  4826                           ;TAD_LEDS.c: 46:     if (currentTics == lastTics) return;
  4827   000EE4  500B               	movf	motor_LEDs@lastTics^0,w,c
  4828   000EE6  1868               	xorwf	motor_LEDs@currentTics^0,w,c
  4829   000EE8  E10A               	bnz	l212
  4830   000EEA  500C               	movf	(motor_LEDs@lastTics+1)^0,w,c
  4831   000EEC  1869               	xorwf	(motor_LEDs@currentTics+1)^0,w,c
  4832   000EEE  E107               	bnz	l212
  4833   000EF0  500D               	movf	(motor_LEDs@lastTics+2)^0,w,c
  4834   000EF2  186A               	xorwf	(motor_LEDs@currentTics+2)^0,w,c
  4835   000EF4  E104               	bnz	l212
  4836   000EF6  500E               	movf	(motor_LEDs@lastTics+3)^0,w,c
  4837   000EF8  186B               	xorwf	(motor_LEDs@currentTics+3)^0,w,c
  4838   000EFA  B4D8               	btfsc	status,2,c
  4839   000EFC  0012               	return	
  4840   000EFE                     l212:
  4841                           
  4842                           ;TAD_LEDS.c: 47:     lastTics = currentTics;
  4843   000EFE  C068  F00B         	movff	motor_LEDs@currentTics,motor_LEDs@lastTics
  4844   000F02  C069  F00C         	movff	motor_LEDs@currentTics+1,motor_LEDs@lastTics+1
  4845   000F06  C06A  F00D         	movff	motor_LEDs@currentTics+2,motor_LEDs@lastTics+2
  4846   000F0A  C06B  F00E         	movff	motor_LEDs@currentTics+3,motor_LEDs@lastTics+3
  4847                           
  4848                           ;TAD_LEDS.c: 50:     if (currentTics >= 10) {
  4849   000F0E  506B               	movf	(motor_LEDs@currentTics+3)^0,w,c
  4850   000F10  106A               	iorwf	(motor_LEDs@currentTics+2)^0,w,c
  4851   000F12  1069               	iorwf	(motor_LEDs@currentTics+1)^0,w,c
  4852   000F14  E104               	bnz	u4250
  4853   000F16  0E0A               	movlw	10
  4854   000F18  5C68               	subwf	motor_LEDs@currentTics^0,w,c
  4855   000F1A  A0D8               	btfss	status,0,c
  4856   000F1C  D015               	goto	l214
  4857   000F1E                     u4250:
  4858                           
  4859                           ;TAD_LEDS.c: 51:         TI_ResetTics(timer);
  4860   000F1E  5053               	movf	_timer^0,w,c
  4861   000F20  ECE5  F00C         	call	_TI_ResetTics
  4862                           
  4863                           ;TAD_LEDS.c: 53:         char i;;TAD_LEDS.c: 54:         for (i = 0; i < 6; i++) {
  4864   000F24  6A6C               	clrf	motor_LEDs@i^0,c
  4865   000F26                     l4653:
  4866                           
  4867                           ;TAD_LEDS.c: 55:             if (ActualLeds[i] > 0) {
  4868   000F26  506C               	movf	motor_LEDs@i^0,w,c
  4869   000F28  0FB8               	addlw	low _ActualLeds
  4870   000F2A  6ED9               	movwf	fsr2l,c
  4871   000F2C  6ADA               	clrf	fsr2h,c
  4872   000F2E  50DF               	movf	indf2,w,c
  4873   000F30  B4D8               	btfsc	status,2,c
  4874   000F32  D005               	goto	l4657
  4875                           
  4876                           ;TAD_LEDS.c: 56:                 controlLED(i, 1);
  4877   000F34  0E01               	movlw	1
  4878   000F36  6E56               	movwf	controlLED@estado^0,c
  4879   000F38  506C               	movf	motor_LEDs@i^0,w,c
  4880   000F3A  ECBD  F00B         	call	_controlLED
  4881   000F3E                     l4657:
  4882                           
  4883                           ;TAD_LEDS.c: 58:         }
  4884   000F3E  2A6C               	incf	motor_LEDs@i^0,f,c
  4885   000F40  0E05               	movlw	5
  4886   000F42  646C               	cpfsgt	motor_LEDs@i^0,c
  4887   000F44  D7F0               	goto	l4653
  4888   000F46  0012               	return	
  4889   000F48                     l214:
  4890                           
  4891                           ;TAD_LEDS.c: 63:     char i;;TAD_LEDS.c: 64:     for (i = 0; i < 6; i++) {
  4892   000F48  6A6D               	clrf	motor_LEDs@i_461^0,c
  4893   000F4A                     l4665:
  4894                           
  4895                           ;TAD_LEDS.c: 65:         if (ActualLeds[i] < 0xA && currentTics >= ActualLeds[i])
  4896   000F4A  506D               	movf	motor_LEDs@i_461^0,w,c
  4897   000F4C  0FB8               	addlw	low _ActualLeds
  4898   000F4E  6ED9               	movwf	fsr2l,c
  4899   000F50  6ADA               	clrf	fsr2h,c
  4900   000F52  0E0A               	movlw	10
  4901   000F54  60DF               	cpfslt	indf2,c
  4902   000F56  D01A               	goto	l4671
  4903   000F58  506D               	movf	motor_LEDs@i_461^0,w,c
  4904   000F5A  0FB8               	addlw	low _ActualLeds
  4905   000F5C  6ED9               	movwf	fsr2l,c
  4906   000F5E  6ADA               	clrf	fsr2h,c
  4907   000F60  50DF               	movf	indf2,w,c
  4908   000F62  6E63               	movwf	??_motor_LEDs^0,c
  4909   000F64  C063  F064         	movff	??_motor_LEDs,??_motor_LEDs+1
  4910   000F68  6A65               	clrf	(??_motor_LEDs+2)^0,c
  4911   000F6A  6A66               	clrf	(??_motor_LEDs+3)^0,c
  4912   000F6C  6A67               	clrf	(??_motor_LEDs+4)^0,c
  4913   000F6E  5064               	movf	(??_motor_LEDs+1)^0,w,c
  4914   000F70  5C68               	subwf	motor_LEDs@currentTics^0,w,c
  4915   000F72  5065               	movf	(??_motor_LEDs+2)^0,w,c
  4916   000F74  5869               	subwfb	(motor_LEDs@currentTics+1)^0,w,c
  4917   000F76  5066               	movf	(??_motor_LEDs+3)^0,w,c
  4918   000F78  586A               	subwfb	(motor_LEDs@currentTics+2)^0,w,c
  4919   000F7A  5067               	movf	(??_motor_LEDs+4)^0,w,c
  4920   000F7C  586B               	subwfb	(motor_LEDs@currentTics+3)^0,w,c
  4921   000F7E  A0D8               	btfss	status,0,c
  4922   000F80  D005               	goto	l4671
  4923                           
  4924                           ;TAD_LEDS.c: 66:             controlLED(i, 0);
  4925   000F82  0E00               	movlw	0
  4926   000F84  6E56               	movwf	controlLED@estado^0,c
  4927   000F86  506D               	movf	motor_LEDs@i_461^0,w,c
  4928   000F88  ECBD  F00B         	call	_controlLED
  4929   000F8C                     l4671:
  4930                           
  4931                           ;TAD_LEDS.c: 67:     }
  4932   000F8C  2A6D               	incf	motor_LEDs@i_461^0,f,c
  4933   000F8E  0E05               	movlw	5
  4934   000F90  646D               	cpfsgt	motor_LEDs@i_461^0,c
  4935   000F92  D7DB               	goto	l4665
  4936   000F94  0012               	return	
  4937   000F96                     __end_of_motor_LEDs:
  4938                           	callstack 0
  4939                           
  4940 ;; *************** function _controlLED *****************
  4941 ;; Defined at:
  4942 ;;		line 16 in file "TAD_LEDS.c"
  4943 ;; Parameters:    Size  Location     Type
  4944 ;;  ledActual       1    wreg     unsigned char 
  4945 ;;  estado          1    1[COMRAM] unsigned char 
  4946 ;; Auto vars:     Size  Location     Type
  4947 ;;  ledActual       1    4[COMRAM] unsigned char 
  4948 ;; Return value:  Size  Location     Type
  4949 ;;                  1    wreg      void 
  4950 ;; Registers used:
  4951 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  4952 ;; Tracked objects:
  4953 ;;		On entry : 0/0
  4954 ;;		On exit  : 0/0
  4955 ;;		Unchanged: 0/0
  4956 ;; Data sizes:     COMRAM   BANK0   BANK1
  4957 ;;      Params:         1       0       0
  4958 ;;      Locals:         3       0       0
  4959 ;;      Temps:          0       0       0
  4960 ;;      Totals:         4       0       0
  4961 ;;Total ram usage:        4 bytes
  4962 ;; Hardware stack levels used: 1
  4963 ;; Hardware stack levels required when called: 3
  4964 ;; This function calls:
  4965 ;;		Nothing
  4966 ;; This function is called by:
  4967 ;;		_motor_LEDs
  4968 ;; This function uses a non-reentrant model
  4969 ;;
  4970                           
  4971                           	psect	text9
  4972   00177A                     __ptext9:
  4973                           	callstack 0
  4974   00177A                     _controlLED:
  4975                           	callstack 26
  4976                           
  4977                           ;incstack = 0
  4978                           ;controlLED@ledActual stored from wreg
  4979   00177A  6E59               	movwf	controlLED@ledActual^0,c
  4980                           
  4981                           ;TAD_LEDS.c: 18:     static unsigned char ledBits[] = {0x01, 0x02, 0x04, 0x08, 0x10, 0x2
      +                          0};;TAD_LEDS.c: 20:     if (ledActual < 6) {
  4982   00177C  0E06               	movlw	6
  4983   00177E  6059               	cpfslt	controlLED@ledActual^0,c
  4984   001780  D012               	goto	l3601
  4985                           
  4986                           ;TAD_LEDS.c: 22:         if (estado)
  4987   001782  5056               	movf	controlLED@estado^0,w,c
  4988   001784  B4D8               	btfsc	status,2,c
  4989   001786  D007               	goto	l3599
  4990                           
  4991                           ;TAD_LEDS.c: 23:             LATA |= ledBits[ledActual];
  4992   001788  5059               	movf	controlLED@ledActual^0,w,c
  4993   00178A  0FD7               	addlw	low controlLED@ledBits
  4994   00178C  6ED9               	movwf	fsr2l,c
  4995   00178E  6ADA               	clrf	fsr2h,c
  4996   001790  50DF               	movf	indf2,w,c
  4997   001792  1289               	iorwf	137,f,c	;volatile
  4998   001794  0012               	return	
  4999   001796                     l3599:
  5000                           
  5001                           ;TAD_LEDS.c: 25:             LATA &= ~ledBits[ledActual];
  5002   001796  5059               	movf	controlLED@ledActual^0,w,c
  5003   001798  0FD7               	addlw	low controlLED@ledBits
  5004   00179A  6ED9               	movwf	fsr2l,c
  5005   00179C  6ADA               	clrf	fsr2h,c
  5006   00179E  50DF               	movf	indf2,w,c
  5007   0017A0  0AFF               	xorlw	255
  5008   0017A2  1689               	andwf	137,f,c	;volatile
  5009   0017A4  0012               	return	
  5010   0017A6                     l3601:
  5011   0017A6  2859               	incf	controlLED@ledActual^0,w,c
  5012   0017A8  A4D8               	btfss	status,2,c
  5013   0017AA  0012               	return	
  5014                           
  5015                           ;TAD_LEDS.c: 29:         LATA = estado ? 0x3F : 0x00;
  5016   0017AC  5056               	movf	controlLED@estado^0,w,c
  5017   0017AE  A4D8               	btfss	status,2,c
  5018   0017B0  D004               	goto	l3607
  5019   0017B2  0E00               	movlw	0
  5020   0017B4  6E58               	movwf	(_controlLED$455+1)^0,c
  5021   0017B6  0E00               	movlw	0
  5022   0017B8  D003               	goto	L14
  5023   0017BA                     l3607:
  5024   0017BA  0E00               	movlw	0
  5025   0017BC  6E58               	movwf	(_controlLED$455+1)^0,c
  5026   0017BE  0E3F               	movlw	63
  5027   0017C0                     L14:
  5028   0017C0  6E57               	movwf	_controlLED$455^0,c
  5029   0017C2  C057  FF89         	movff	_controlLED$455,3977	;volatile
  5030   0017C6  0012               	return		;funcret
  5031   0017C8                     __end_of_controlLED:
  5032                           	callstack 0
  5033                           
  5034 ;; *************** function _motorTerminal *****************
  5035 ;; Defined at:
  5036 ;;		line 149 in file "TAD_TERMINAL.c"
  5037 ;; Parameters:    Size  Location     Type
  5038 ;;		None
  5039 ;; Auto vars:     Size  Location     Type
  5040 ;;  currentUserI    1   24[COMRAM] unsigned char 
  5041 ;;  opcion          1   23[COMRAM] unsigned char 
  5042 ;; Return value:  Size  Location     Type
  5043 ;;                  1    wreg      void 
  5044 ;; Registers used:
  5045 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5046 ;; Tracked objects:
  5047 ;;		On entry : 0/0
  5048 ;;		On exit  : 0/0
  5049 ;;		Unchanged: 0/0
  5050 ;; Data sizes:     COMRAM   BANK0   BANK1
  5051 ;;      Params:         0       0       0
  5052 ;;      Locals:         2       0       0
  5053 ;;      Temps:          0       0       0
  5054 ;;      Totals:         2       0       0
  5055 ;;Total ram usage:        2 bytes
  5056 ;; Hardware stack levels used: 1
  5057 ;; Hardware stack levels required when called: 8
  5058 ;; This function calls:
  5059 ;;		_Terminal_RXAvailable
  5060 ;;		_Terminal_ReceiveChar
  5061 ;;		_Terminal_SendChar
  5062 ;;		_getActualUID
  5063 ;;		_getCurrentUserIndex
  5064 ;;		_motor_SendString
  5065 ;;		_motor_StartSendString
  5066 ;;		_printfUID
  5067 ;;		_saveHourToData
  5068 ;; This function is called by:
  5069 ;;		_main
  5070 ;; This function uses a non-reentrant model
  5071 ;;
  5072                           
  5073                           	psect	text10
  5074   000978                     __ptext10:
  5075                           	callstack 0
  5076   000978                     _motorTerminal:
  5077                           	callstack 22
  5078                           
  5079                           ;TAD_TERMINAL.c: 150:  static char state = 0;;TAD_TERMINAL.c: 151:  static unsigned char
      +                           hour[4] = "0000";;TAD_TERMINAL.c: 152:  static char index = 0;;TAD_TERMINAL.c: 153:  st
      +                          atic unsigned char leds[6];;TAD_TERMINAL.c: 154:  static unsigned char currentUser[5];;T
      +                          AD_TERMINAL.c: 155:  static char userNumber = 0;;TAD_TERMINAL.c: 157:  if (sending_strin
      +                          g) {
  5080                           
  5081                           ;incstack = 0
  5082   000978  5020               	movf	_sending_string^0,w,c
  5083   00097A  B4D8               	btfsc	status,2,c
  5084   00097C  D0F2               	goto	l4255
  5085                           
  5086                           ;TAD_TERMINAL.c: 158:   if (motor_SendString() == 1) {
  5087   00097E  ECFE  F009         	call	_motor_SendString	;wreg free
  5088   000982  06E8               	decf	wreg,f,c
  5089   000984  A4D8               	btfss	status,2,c
  5090   000986  0012               	return	
  5091                           
  5092                           ;TAD_TERMINAL.c: 159:    sending_string = 0;
  5093   000988  6A20               	clrf	_sending_string^0,c
  5094                           
  5095                           ;TAD_TERMINAL.c: 160:   } else {
  5096   00098A  D0EB               	goto	l4255
  5097   00098C                     l4127:
  5098                           
  5099                           ;TAD_TERMINAL.c: 167:    if (Terminal_RXAvailable() && Terminal_ReceiveChar() == 0x1B ||
      +                           hashtag_pressed) {
  5100   00098C  EC7E  F00D         	call	_Terminal_RXAvailable	;wreg free
  5101   000990  0900               	iorlw	0
  5102   000992  B4D8               	btfsc	status,2,c
  5103   000994  D005               	goto	u3560
  5104   000996  EC99  F00D         	call	_Terminal_ReceiveChar	;wreg free
  5105   00099A  0A1B               	xorlw	27
  5106   00099C  B4D8               	btfsc	status,2,c
  5107   00099E  D003               	goto	u3570
  5108   0009A0                     u3560:
  5109   0009A0  5021               	movf	_hashtag_pressed^0,w,c
  5110   0009A2  B4D8               	btfsc	status,2,c
  5111   0009A4  0012               	return	
  5112   0009A6                     u3570:
  5113                           
  5114                           ;TAD_TERMINAL.c: 168:     motor_StartSendString("---------------\r\n");
  5115   0009A6  0ED3               	movlw	low STR_2
  5116   0009A8  6E5A               	movwf	motor_StartSendString@str^0,c
  5117   0009AA  0E1F               	movlw	high STR_2
  5118   0009AC  6E5B               	movwf	(motor_StartSendString@str+1)^0,c
  5119   0009AE  EC15  F00D         	call	_motor_StartSendString	;wreg free
  5120                           
  5121                           ;TAD_TERMINAL.c: 169:     sending_string = 1;
  5122   0009B2  0E01               	movlw	1
  5123   0009B4  6E20               	movwf	_sending_string^0,c
  5124                           
  5125                           ;TAD_TERMINAL.c: 170:     state = 10;
  5126   0009B6  0E0A               	movlw	10
  5127   0009B8  6E1F               	movwf	motorTerminal@state^0,c
  5128                           
  5129                           ;TAD_TERMINAL.c: 171:     hashtag_pressed = 0;
  5130   0009BA  6A21               	clrf	_hashtag_pressed^0,c
  5131   0009BC  0012               	return	
  5132   0009BE                     l4141:
  5133                           
  5134                           ;TAD_TERMINAL.c: 176:    if (!sending_string) {
  5135   0009BE  5020               	movf	_sending_string^0,w,c
  5136   0009C0  A4D8               	btfss	status,2,c
  5137   0009C2  0012               	return	
  5138                           
  5139                           ;TAD_TERMINAL.c: 177:     motor_StartSendString("MenÃº principal\r\n---------------\r\nT
      +                          ria una opciÃ³:\r\n");
  5140   0009C4  0EE7               	movlw	low STR_3
  5141   0009C6  6E5A               	movwf	motor_StartSendString@str^0,c
  5142   0009C8  0E1E               	movlw	high STR_3
  5143   0009CA  6E5B               	movwf	(motor_StartSendString@str+1)^0,c
  5144   0009CC  EC15  F00D         	call	_motor_StartSendString	;wreg free
  5145                           
  5146                           ;TAD_TERMINAL.c: 178:     sending_string = 1;
  5147   0009D0  0E01               	movlw	1
  5148   0009D2  6E20               	movwf	_sending_string^0,c
  5149                           
  5150                           ;TAD_TERMINAL.c: 179:     state = 13;
  5151   0009D4  0E0D               	movlw	13
  5152   0009D6  6E1F               	movwf	motorTerminal@state^0,c
  5153   0009D8  0012               	return	
  5154   0009DA                     l4149:
  5155                           
  5156                           ;TAD_TERMINAL.c: 184:    if (!sending_string) {
  5157   0009DA  5020               	movf	_sending_string^0,w,c
  5158   0009DC  A4D8               	btfss	status,2,c
  5159   0009DE  0012               	return	
  5160                           
  5161                           ;TAD_TERMINAL.c: 185:     motor_StartSendString("\t1. Qui hi ha a la sala?\r\n\t2. Mostr
      +                          ar configuracions\r\n\t3. Modificar hora del sistema\r\nOpciÃ³: ");
  5162   0009E0  0E88               	movlw	low STR_4
  5163   0009E2  6E5A               	movwf	motor_StartSendString@str^0,c
  5164   0009E4  0E1E               	movlw	high STR_4
  5165   0009E6  6E5B               	movwf	(motor_StartSendString@str+1)^0,c
  5166   0009E8  EC15  F00D         	call	_motor_StartSendString	;wreg free
  5167                           
  5168                           ;TAD_TERMINAL.c: 186:     sending_string = 1;
  5169   0009EC  0E01               	movlw	1
  5170   0009EE  6E20               	movwf	_sending_string^0,c
  5171                           
  5172                           ;TAD_TERMINAL.c: 187:     state = 1;
  5173   0009F0  0E01               	movlw	1
  5174   0009F2  6E1F               	movwf	motorTerminal@state^0,c
  5175   0009F4  0012               	return	
  5176   0009F6                     l4157:
  5177                           
  5178                           ;TAD_TERMINAL.c: 192:    if(Terminal_RXAvailable()) {
  5179   0009F6  EC7E  F00D         	call	_Terminal_RXAvailable	;wreg free
  5180   0009FA  0900               	iorlw	0
  5181   0009FC  B4D8               	btfsc	status,2,c
  5182   0009FE  0012               	return	
  5183                           
  5184                           ;TAD_TERMINAL.c: 193:     char opcion = Terminal_ReceiveChar();
  5185   000A00  EC99  F00D         	call	_Terminal_ReceiveChar	;wreg free
  5186   000A04  6E6C               	movwf	motorTerminal@opcion^0,c
  5187                           
  5188                           ;TAD_TERMINAL.c: 194:     if (opcion >= '1' && opcion <= '3') {
  5189   000A06  0E30               	movlw	48
  5190   000A08  646C               	cpfsgt	motorTerminal@opcion^0,c
  5191   000A0A  D011               	goto	l4171
  5192   000A0C  0E34               	movlw	52
  5193   000A0E  606C               	cpfslt	motorTerminal@opcion^0,c
  5194   000A10  D00E               	goto	l4171
  5195                           
  5196                           ;TAD_TERMINAL.c: 195:      motor_StartSendString("\r\n");
  5197   000A12  0EE2               	movlw	low (STR_2+15)
  5198   000A14  6E5A               	movwf	motor_StartSendString@str^0,c
  5199   000A16  0E1F               	movlw	high (STR_2+15)
  5200   000A18  6E5B               	movwf	(motor_StartSendString@str+1)^0,c
  5201   000A1A  EC15  F00D         	call	_motor_StartSendString	;wreg free
  5202                           
  5203                           ;TAD_TERMINAL.c: 196:      sending_string = 1;
  5204   000A1E  0E01               	movlw	1
  5205   000A20  6E20               	movwf	_sending_string^0,c
  5206                           
  5207                           ;TAD_TERMINAL.c: 197:      state = (opcion - '1') * 10 + 20;
  5208   000A22  506C               	movf	motorTerminal@opcion^0,w,c
  5209   000A24  0D0A               	mullw	10
  5210   000A26  50F3               	movf	243,w,c
  5211   000A28  0F2A               	addlw	42
  5212   000A2A  6E1F               	movwf	motorTerminal@state^0,c
  5213                           
  5214                           ;TAD_TERMINAL.c: 198:     } else {
  5215   000A2C  0012               	return	
  5216   000A2E                     l4171:
  5217                           
  5218                           ;TAD_TERMINAL.c: 199:      motor_StartSendString("ERROR. Valor introduit erroni.\r\n");
  5219   000A2E  0E3D               	movlw	low STR_6
  5220   000A30  6E5A               	movwf	motor_StartSendString@str^0,c
  5221   000A32  0E1F               	movlw	high STR_6
  5222   000A34  6E5B               	movwf	(motor_StartSendString@str+1)^0,c
  5223   000A36  EC15  F00D         	call	_motor_StartSendString	;wreg free
  5224   000A3A                     l4173:
  5225                           
  5226                           ;TAD_TERMINAL.c: 200:      sending_string = 1;
  5227   000A3A  0E01               	movlw	1
  5228   000A3C  6E20               	movwf	_sending_string^0,c
  5229                           
  5230                           ;TAD_TERMINAL.c: 201:      state = 0;
  5231   000A3E  6A1F               	clrf	motorTerminal@state^0,c
  5232   000A40  0012               	return	
  5233   000A42                     l4177:
  5234                           
  5235                           ;TAD_TERMINAL.c: 207:    if (!sending_string) {
  5236   000A42  5020               	movf	_sending_string^0,w,c
  5237   000A44  A4D8               	btfss	status,2,c
  5238   000A46  0012               	return	
  5239                           
  5240                           ;TAD_TERMINAL.c: 208:     unsigned char currentUserIndex = getCurrentUserIndex();
  5241   000A48  EC97  F00D         	call	_getCurrentUserIndex	;wreg free
  5242   000A4C  6E6D               	movwf	motorTerminal@currentUserIndex^0,c
  5243                           
  5244                           ;TAD_TERMINAL.c: 209:     if (currentUserIndex != 4) {
  5245   000A4E  0E04               	movlw	4
  5246   000A50  186D               	xorwf	motorTerminal@currentUserIndex^0,w,c
  5247   000A52  B4D8               	btfsc	status,2,c
  5248   000A54  D013               	goto	l4189
  5249                           
  5250                           ;TAD_TERMINAL.c: 210:      getActualUID(currentUser, currentUserIndex);
  5251   000A56  0EBE               	movlw	low motorTerminal@currentUser
  5252   000A58  6E56               	movwf	getActualUID@UID^0,c
  5253   000A5A  C06D  F057         	movff	motorTerminal@currentUserIndex,getActualUID@userIndex
  5254   000A5E  EC37  F00A         	call	_getActualUID	;wreg free
  5255                           
  5256                           ;TAD_TERMINAL.c: 211:      printfUID(currentUser, currentUserIndex, "Usuari ");
  5257   000A62  0EBE               	movlw	low motorTerminal@currentUser
  5258   000A64  6E5C               	movwf	printfUID@currentUser^0,c
  5259   000A66  C06D  F05D         	movff	motorTerminal@currentUserIndex,printfUID@userIndex
  5260   000A6A  0EF7               	movlw	low STR_7
  5261   000A6C  6E5E               	movwf	printfUID@extraString^0,c
  5262   000A6E  0E1F               	movlw	high STR_7
  5263   000A70  6E5F               	movwf	(printfUID@extraString+1)^0,c
  5264   000A72  EC45  F003         	call	_printfUID	;wreg free
  5265   000A76                     l4187:
  5266                           
  5267                           ;TAD_TERMINAL.c: 212:      state = 25;
  5268   000A76  0E19               	movlw	25
  5269   000A78  6E1F               	movwf	motorTerminal@state^0,c
  5270                           
  5271                           ;TAD_TERMINAL.c: 213:     } else {
  5272   000A7A  0012               	return	
  5273   000A7C                     l4189:
  5274                           
  5275                           ;TAD_TERMINAL.c: 214:      motor_StartSendString("No hi ha cap usuari a la sala.\r\n");
  5276   000A7C  0E1C               	movlw	low STR_8
  5277   000A7E  6E5A               	movwf	motor_StartSendString@str^0,c
  5278   000A80  0E1F               	movlw	high STR_8
  5279   000A82  6E5B               	movwf	(motor_StartSendString@str+1)^0,c
  5280   000A84  EC15  F00D         	call	_motor_StartSendString	;wreg free
  5281                           
  5282                           ;TAD_TERMINAL.c: 215:      sending_string = 1;
  5283   000A88  0E01               	movlw	1
  5284   000A8A  6E20               	movwf	_sending_string^0,c
  5285   000A8C  D7F4               	goto	l4187
  5286   000A8E                     l4195:
  5287                           
  5288                           ;TAD_TERMINAL.c: 222:    if (!sending_string) {
  5289   000A8E  5020               	movf	_sending_string^0,w,c
  5290   000A90  A4D8               	btfss	status,2,c
  5291   000A92  0012               	return	
  5292                           
  5293                           ;TAD_TERMINAL.c: 223:     motor_StartSendString("\r\n");
  5294   000A94  0EE2               	movlw	low (STR_2+15)
  5295   000A96  6E5A               	movwf	motor_StartSendString@str^0,c
  5296   000A98  0E1F               	movlw	high (STR_2+15)
  5297   000A9A  6E5B               	movwf	(motor_StartSendString@str+1)^0,c
  5298   000A9C  EC15  F00D         	call	_motor_StartSendString	;wreg free
  5299   000AA0  D7CC               	goto	l4173
  5300   000AA2                     l4203:
  5301                           
  5302                           ;TAD_TERMINAL.c: 230:    if (!sending_string) {
  5303   000AA2  5020               	movf	_sending_string^0,w,c
  5304   000AA4  A4D8               	btfss	status,2,c
  5305   000AA6  0012               	return	
  5306                           
  5307                           ;TAD_TERMINAL.c: 231:     motor_StartSendString("Configuracions:\r\n");
  5308   000AA8  0EE5               	movlw	low STR_10
  5309   000AAA  6E5A               	movwf	motor_StartSendString@str^0,c
  5310   000AAC  0E1F               	movlw	high STR_10
  5311   000AAE  6E5B               	movwf	(motor_StartSendString@str+1)^0,c
  5312   000AB0  EC15  F00D         	call	_motor_StartSendString	;wreg free
  5313                           
  5314                           ;TAD_TERMINAL.c: 232:     sending_string = 1;
  5315   000AB4  0E01               	movlw	1
  5316   000AB6  6E20               	movwf	_sending_string^0,c
  5317                           
  5318                           ;TAD_TERMINAL.c: 233:     userNumber = 0;
  5319   000AB8  6A1D               	clrf	motorTerminal@userNumber^0,c
  5320                           
  5321                           ;TAD_TERMINAL.c: 234:     state = 32;
  5322   000ABA  0E20               	movlw	32
  5323   000ABC  6E1F               	movwf	motorTerminal@state^0,c
  5324   000ABE  0012               	return	
  5325   000AC0                     l4213:
  5326                           
  5327                           ;TAD_TERMINAL.c: 239:    if (!sending_string) {
  5328   000AC0  5020               	movf	_sending_string^0,w,c
  5329   000AC2  A4D8               	btfss	status,2,c
  5330   000AC4  0012               	return	
  5331                           
  5332                           ;TAD_TERMINAL.c: 240:     if (userNumber < 4) {
  5333   000AC6  0E04               	movlw	4
  5334   000AC8  601D               	cpfslt	motorTerminal@userNumber^0,c
  5335   000ACA  D012               	goto	l4223
  5336                           
  5337                           ;TAD_TERMINAL.c: 242:      getActualUID(currentUser, userNumber);
  5338   000ACC  0EBE               	movlw	low motorTerminal@currentUser
  5339   000ACE  6E56               	movwf	getActualUID@UID^0,c
  5340   000AD0  C01D  F057         	movff	motorTerminal@userNumber,getActualUID@userIndex
  5341   000AD4  EC37  F00A         	call	_getActualUID	;wreg free
  5342                           
  5343                           ;TAD_TERMINAL.c: 244:      printfUID(currentUser, userNumber, "Usuari ");
  5344   000AD8  0EBE               	movlw	low motorTerminal@currentUser
  5345   000ADA  6E5C               	movwf	printfUID@currentUser^0,c
  5346   000ADC  C01D  F05D         	movff	motorTerminal@userNumber,printfUID@userIndex
  5347   000AE0  0EF7               	movlw	low STR_7
  5348   000AE2  6E5E               	movwf	printfUID@extraString^0,c
  5349   000AE4  0E1F               	movlw	high STR_7
  5350   000AE6  6E5F               	movwf	(printfUID@extraString+1)^0,c
  5351   000AE8  EC45  F003         	call	_printfUID	;wreg free
  5352                           
  5353                           ;TAD_TERMINAL.c: 246:      userNumber++;
  5354   000AEC  2A1D               	incf	motorTerminal@userNumber^0,f,c
  5355                           
  5356                           ;TAD_TERMINAL.c: 247:     } else {
  5357   000AEE  0012               	return	
  5358   000AF0                     l4223:
  5359                           
  5360                           ;TAD_TERMINAL.c: 248:      motor_StartSendString("\r\n");
  5361   000AF0  0EE2               	movlw	low (STR_2+15)
  5362   000AF2  6E5A               	movwf	motor_StartSendString@str^0,c
  5363   000AF4  0E1F               	movlw	high (STR_2+15)
  5364   000AF6  6E5B               	movwf	(motor_StartSendString@str+1)^0,c
  5365   000AF8  EC15  F00D         	call	_motor_StartSendString	;wreg free
  5366   000AFC  D79E               	goto	l4173
  5367   000AFE                     l4229:
  5368                           
  5369                           ;TAD_TERMINAL.c: 256:    if (!sending_string) {
  5370   000AFE  5020               	movf	_sending_string^0,w,c
  5371   000B00  A4D8               	btfss	status,2,c
  5372   000B02  0012               	return	
  5373                           
  5374                           ;TAD_TERMINAL.c: 257:     motor_StartSendString("Introduce la hora actual(HHMM): ");
  5375   000B04  0E7F               	movlw	low STR_13
  5376   000B06  6E5A               	movwf	motor_StartSendString@str^0,c
  5377   000B08  0E1F               	movlw	high STR_13
  5378   000B0A  6E5B               	movwf	(motor_StartSendString@str+1)^0,c
  5379   000B0C  EC15  F00D         	call	_motor_StartSendString	;wreg free
  5380                           
  5381                           ;TAD_TERMINAL.c: 258:     sending_string = 1;
  5382   000B10  0E01               	movlw	1
  5383   000B12  6E20               	movwf	_sending_string^0,c
  5384                           
  5385                           ;TAD_TERMINAL.c: 259:     state = 2;
  5386   000B14  0E02               	movlw	2
  5387   000B16  6E1F               	movwf	motorTerminal@state^0,c
  5388                           
  5389                           ;TAD_TERMINAL.c: 260:     index = 0;
  5390   000B18  6A1E               	clrf	motorTerminal@index^0,c
  5391   000B1A  0012               	return	
  5392   000B1C                     l4239:
  5393                           
  5394                           ;TAD_TERMINAL.c: 265:    if(Terminal_RXAvailable()) {
  5395   000B1C  EC7E  F00D         	call	_Terminal_RXAvailable	;wreg free
  5396   000B20  0900               	iorlw	0
  5397   000B22  B4D8               	btfsc	status,2,c
  5398   000B24  0012               	return	
  5399                           
  5400                           ;TAD_TERMINAL.c: 266:     hour[index] = Terminal_ReceiveChar();
  5401   000B26  501E               	movf	motorTerminal@index^0,w,c
  5402   000B28  0FE1               	addlw	low motorTerminal@hour
  5403   000B2A  6ED9               	movwf	fsr2l,c
  5404   000B2C  6ADA               	clrf	fsr2h,c
  5405   000B2E  EC99  F00D         	call	_Terminal_ReceiveChar	;wreg free
  5406   000B32  6EDF               	movwf	indf2,c
  5407                           
  5408                           ;TAD_TERMINAL.c: 267:     Terminal_SendChar(hour[index]);
  5409   000B34  501E               	movf	motorTerminal@index^0,w,c
  5410   000B36  0FE1               	addlw	low motorTerminal@hour
  5411   000B38  6ED9               	movwf	fsr2l,c
  5412   000B3A  6ADA               	clrf	fsr2h,c
  5413   000B3C  50DF               	movf	indf2,w,c
  5414   000B3E  EC51  F00D         	call	_Terminal_SendChar
  5415                           
  5416                           ;TAD_TERMINAL.c: 268:     if(++index == 4) {
  5417   000B42  2A1E               	incf	motorTerminal@index^0,f,c
  5418   000B44  0E04               	movlw	4
  5419   000B46  181E               	xorwf	motorTerminal@index^0,w,c
  5420   000B48  A4D8               	btfss	status,2,c
  5421   000B4A  0012               	return	
  5422                           
  5423                           ;TAD_TERMINAL.c: 269:      saveHourToData(hour);
  5424   000B4C  0EE1               	movlw	low motorTerminal@hour
  5425   000B4E  6E56               	movwf	saveHourToData@hour^0,c
  5426   000B50  ECD2  F00C         	call	_saveHourToData	;wreg free
  5427                           
  5428                           ;TAD_TERMINAL.c: 270:      motor_StartSendString("\r\nHora introduida correctament\r\n")
      +                          ;
  5429   000B54  0E5E               	movlw	low STR_14
  5430   000B56  6E5A               	movwf	motor_StartSendString@str^0,c
  5431   000B58  0E1F               	movlw	high STR_14
  5432   000B5A  6E5B               	movwf	(motor_StartSendString@str+1)^0,c
  5433   000B5C  EC15  F00D         	call	_motor_StartSendString	;wreg free
  5434   000B60  D76C               	goto	l4173
  5435   000B62                     l4255:
  5436   000B62  501F               	movf	motorTerminal@state^0,w,c
  5437                           
  5438                           ; Switch size 1, requested type "simple"
  5439                           ; Number of cases is 10, Range of values is 0 to 40
  5440                           ; switch strategies available:
  5441                           ; Name         Instructions Cycles
  5442                           ; simple_byte           31    16 (average)
  5443                           ;	Chosen strategy is simple_byte
  5444   000B64  0A00               	xorlw	0	; case 0
  5445   000B66  B4D8               	btfsc	status,2,c
  5446   000B68  D711               	goto	l4127
  5447   000B6A  0A01               	xorlw	1	; case 1
  5448   000B6C  B4D8               	btfsc	status,2,c
  5449   000B6E  D743               	goto	l4157
  5450   000B70  0A03               	xorlw	3	; case 2
  5451   000B72  B4D8               	btfsc	status,2,c
  5452   000B74  D7D3               	goto	l4239
  5453   000B76  0A08               	xorlw	8	; case 10
  5454   000B78  B4D8               	btfsc	status,2,c
  5455   000B7A  D721               	goto	l4141
  5456   000B7C  0A07               	xorlw	7	; case 13
  5457   000B7E  B4D8               	btfsc	status,2,c
  5458   000B80  D72C               	goto	l4149
  5459   000B82  0A19               	xorlw	25	; case 20
  5460   000B84  B4D8               	btfsc	status,2,c
  5461   000B86  D75D               	goto	l4177
  5462   000B88  0A0D               	xorlw	13	; case 25
  5463   000B8A  B4D8               	btfsc	status,2,c
  5464   000B8C  D780               	goto	l4195
  5465   000B8E  0A07               	xorlw	7	; case 30
  5466   000B90  B4D8               	btfsc	status,2,c
  5467   000B92  D787               	goto	l4203
  5468   000B94  0A3E               	xorlw	62	; case 32
  5469   000B96  B4D8               	btfsc	status,2,c
  5470   000B98  D793               	goto	l4213
  5471   000B9A  0A08               	xorlw	8	; case 40
  5472   000B9C  A4D8               	btfss	status,2,c
  5473   000B9E  0012               	return	
  5474   000BA0  D7AE               	goto	l4229
  5475   000BA2                     __end_of_motorTerminal:
  5476                           	callstack 0
  5477                           
  5478 ;; *************** function _saveHourToData *****************
  5479 ;; Defined at:
  5480 ;;		line 77 in file "TAD_DATOS.c"
  5481 ;; Parameters:    Size  Location     Type
  5482 ;;  hour            1    1[COMRAM] PTR unsigned char 
  5483 ;;		 -> motorTerminal@hour(4), 
  5484 ;; Auto vars:     Size  Location     Type
  5485 ;;  i               1    2[COMRAM] unsigned char 
  5486 ;; Return value:  Size  Location     Type
  5487 ;;                  1    wreg      void 
  5488 ;; Registers used:
  5489 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
  5490 ;; Tracked objects:
  5491 ;;		On entry : 0/0
  5492 ;;		On exit  : 0/0
  5493 ;;		Unchanged: 0/0
  5494 ;; Data sizes:     COMRAM   BANK0   BANK1
  5495 ;;      Params:         1       0       0
  5496 ;;      Locals:         1       0       0
  5497 ;;      Temps:          0       0       0
  5498 ;;      Totals:         2       0       0
  5499 ;;Total ram usage:        2 bytes
  5500 ;; Hardware stack levels used: 1
  5501 ;; Hardware stack levels required when called: 3
  5502 ;; This function calls:
  5503 ;;		Nothing
  5504 ;; This function is called by:
  5505 ;;		_motorTerminal
  5506 ;; This function uses a non-reentrant model
  5507 ;;
  5508                           
  5509                           	psect	text11
  5510   0019A4                     __ptext11:
  5511                           	callstack 0
  5512   0019A4                     _saveHourToData:
  5513                           	callstack 26
  5514                           
  5515                           ;TAD_DATOS.c: 78:     if(!hour) return;
  5516                           
  5517                           ;incstack = 0
  5518   0019A4  5056               	movf	saveHourToData@hour^0,w,c
  5519   0019A6  B4D8               	btfsc	status,2,c
  5520   0019A8  0012               	return	
  5521                           
  5522                           ;TAD_DATOS.c: 79:     for(char i = 0; i < 4; i++) currentTime[i] = hour[i];
  5523   0019AA  6A57               	clrf	saveHourToData@i^0,c
  5524   0019AC                     l3881:
  5525   0019AC  5056               	movf	saveHourToData@hour^0,w,c
  5526   0019AE  2457               	addwf	saveHourToData@i^0,w,c
  5527   0019B0  6ED9               	movwf	fsr2l,c
  5528   0019B2  6ADA               	clrf	fsr2h,c
  5529   0019B4  5057               	movf	saveHourToData@i^0,w,c
  5530   0019B6  0FDD               	addlw	low _currentTime
  5531   0019B8  6EE1               	movwf	fsr1l,c
  5532   0019BA  6AE2               	clrf	fsr1h,c
  5533   0019BC  CFDF FFE7          	movff	indf2,indf1
  5534   0019C0  2A57               	incf	saveHourToData@i^0,f,c
  5535   0019C2  0E03               	movlw	3
  5536   0019C4  6457               	cpfsgt	saveHourToData@i^0,c
  5537   0019C6  D7F2               	goto	l3881
  5538   0019C8  0012               	return	
  5539   0019CA                     __end_of_saveHourToData:
  5540                           	callstack 0
  5541                           
  5542 ;; *************** function _printfUID *****************
  5543 ;; Defined at:
  5544 ;;		line 68 in file "TAD_TERMINAL.c"
  5545 ;; Parameters:    Size  Location     Type
  5546 ;;  currentUser     1    7[COMRAM] PTR unsigned char 
  5547 ;;		 -> currentUser(5), motorTerminal@currentUser(5), 
  5548 ;;  userIndex       1    8[COMRAM] unsigned char 
  5549 ;;  extraString     2    9[COMRAM] PTR const unsigned char 
  5550 ;;		 -> STR_15(21), STR_11(8), STR_7(8), 
  5551 ;; Auto vars:     Size  Location     Type
  5552 ;;  val             1   19[COMRAM] unsigned char 
  5553 ;;  leds            6   13[COMRAM] unsigned char [6]
  5554 ;;  ptr             2   21[COMRAM] PTR unsigned char 
  5555 ;;		 -> printfUID@buffer(80), 
  5556 ;;  i               1   20[COMRAM] unsigned char 
  5557 ;; Return value:  Size  Location     Type
  5558 ;;                  1    wreg      void 
  5559 ;; Registers used:
  5560 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5561 ;; Tracked objects:
  5562 ;;		On entry : 0/0
  5563 ;;		On exit  : 0/0
  5564 ;;		Unchanged: 0/0
  5565 ;; Data sizes:     COMRAM   BANK0   BANK1
  5566 ;;      Params:         4       0       0
  5567 ;;      Locals:        10       0       0
  5568 ;;      Temps:          2       0       0
  5569 ;;      Totals:        16       0       0
  5570 ;;Total ram usage:       16 bytes
  5571 ;; Hardware stack levels used: 1
  5572 ;; Hardware stack levels required when called: 7
  5573 ;; This function calls:
  5574 ;;		_getActualLeds
  5575 ;;		_motor_StartSendString
  5576 ;; This function is called by:
  5577 ;;		_motorTerminal
  5578 ;;		_motor_setCurrentUser
  5579 ;; This function uses a non-reentrant model
  5580 ;;
  5581                           
  5582                           	psect	text12
  5583   00068A                     __ptext12:
  5584                           	callstack 0
  5585   00068A                     _printfUID:
  5586                           	callstack 21
  5587                           
  5588                           ;TAD_TERMINAL.c: 70:     static const char hex[] = "0123456789ABCDEF";;TAD_TERMINAL.c: 7
      +                          2:     static char buffer[80];;TAD_TERMINAL.c: 73:     char *ptr = buffer;
  5589                           
  5590                           ;incstack = 0
  5591   00068A  0E00               	movlw	low printfUID@buffer
  5592   00068C  6E6A               	movwf	printfUID@ptr^0,c
  5593   00068E  0E01               	movlw	high printfUID@buffer
  5594   000690  6E6B               	movwf	(printfUID@ptr+1)^0,c
  5595                           
  5596                           ;TAD_TERMINAL.c: 76:     if (currentUser == 0 || *currentUser == 0) {
  5597   000692  505C               	movf	printfUID@currentUser^0,w,c
  5598   000694  B4D8               	btfsc	status,2,c
  5599   000696  D006               	goto	u2610
  5600   000698  505C               	movf	printfUID@currentUser^0,w,c
  5601   00069A  6ED9               	movwf	fsr2l,c
  5602   00069C  6ADA               	clrf	fsr2h,c
  5603   00069E  50DF               	movf	indf2,w,c
  5604   0006A0  A4D8               	btfss	status,2,c
  5605   0006A2  D007               	goto	l3391
  5606   0006A4                     u2610:
  5607                           
  5608                           ;TAD_TERMINAL.c: 77:         motor_StartSendString("\tNo hay usuario configurado\r\n");
  5609   0006A4  0EA0               	movlw	low STR_1
  5610   0006A6  6E5A               	movwf	motor_StartSendString@str^0,c
  5611   0006A8  0E1F               	movlw	high STR_1
  5612   0006AA  6E5B               	movwf	(motor_StartSendString@str+1)^0,c
  5613   0006AC  EC15  F00D         	call	_motor_StartSendString	;wreg free
  5614   0006B0  0012               	return	
  5615   0006B2                     l3391:
  5616                           
  5617                           ;TAD_TERMINAL.c: 82:     if (extraString) {
  5618   0006B2  505E               	movf	printfUID@extraString^0,w,c
  5619   0006B4  105F               	iorwf	(printfUID@extraString+1)^0,w,c
  5620   0006B6  A4D8               	btfss	status,2,c
  5621   0006B8  D010               	goto	l3401
  5622   0006BA  D066               	goto	l3433
  5623   0006BC                     l3395:
  5624                           
  5625                           ;TAD_TERMINAL.c: 84:             *ptr++ = *extraString++;
  5626   0006BC  C05E  FFF6         	movff	printfUID@extraString,tblptrl
  5627   0006C0  C05F  FFF7         	movff	printfUID@extraString+1,tblptrh
  5628   0006C4                     	if	0	;tblptru may be non-zero
  5629   0006C4                     	endif
  5630   0006C4                     	if	0	;tblptru may be non-zero
  5631   0006C4                     	endif
  5632   0006C4  C06A  FFD9         	movff	printfUID@ptr,fsr2l
  5633   0006C8  C06B  FFDA         	movff	printfUID@ptr+1,fsr2h
  5634   0006CC  0008               	tblrd		*
  5635   0006CE  CFF5 FFDF          	movff	tablat,indf2
  5636   0006D2  4A5E               	infsnz	printfUID@extraString^0,f,c
  5637   0006D4  2A5F               	incf	(printfUID@extraString+1)^0,f,c
  5638   0006D6  4A6A               	infsnz	printfUID@ptr^0,f,c
  5639   0006D8  2A6B               	incf	(printfUID@ptr+1)^0,f,c
  5640   0006DA                     l3401:
  5641                           
  5642                           ;TAD_TERMINAL.c: 83:         while (*extraString) {
  5643   0006DA  C05E  FFF6         	movff	printfUID@extraString,tblptrl
  5644   0006DE  C05F  FFF7         	movff	printfUID@extraString+1,tblptrh
  5645   0006E2                     	if	0	;tblptru may be non-zero
  5646   0006E2                     	endif
  5647   0006E2                     	if	0	;tblptru may be non-zero
  5648   0006E2                     	endif
  5649   0006E2  0008               	tblrd		*
  5650   0006E4  50F5               	movf	tablat,w,c
  5651   0006E6  0900               	iorlw	0
  5652   0006E8  A4D8               	btfss	status,2,c
  5653   0006EA  D7E8               	goto	l3395
  5654                           
  5655                           ;TAD_TERMINAL.c: 87:         if (buffer[0] == 'U' && buffer[1] == 's' && buffer[2] == 'u
      +                          ' &&
  5656   0006EC  0E55               	movlw	85
  5657   0006EE  0101               	movlb	1	; () banked
  5658   0006F0  1900               	xorwf	printfUID@buffer& (0+255),w,b
  5659   0006F2  A4D8               	btfss	status,2,c
  5660   0006F4  D031               	goto	l3425
  5661                           
  5662                           ; BSR set to: 1
  5663   0006F6  0E73               	movlw	115
  5664   0006F8  1901               	xorwf	(printfUID@buffer+1)& (0+255),w,b
  5665   0006FA  A4D8               	btfss	status,2,c
  5666   0006FC  D02D               	goto	l3425
  5667                           
  5668                           ; BSR set to: 1
  5669   0006FE  0E75               	movlw	117
  5670   000700  1902               	xorwf	(printfUID@buffer+2)& (0+255),w,b
  5671   000702  A4D8               	btfss	status,2,c
  5672   000704  D029               	goto	l3425
  5673                           
  5674                           ; BSR set to: 1
  5675   000706  0E61               	movlw	97
  5676   000708  1903               	xorwf	(printfUID@buffer+3)& (0+255),w,b
  5677   00070A  A4D8               	btfss	status,2,c
  5678   00070C  D025               	goto	l3425
  5679                           
  5680                           ; BSR set to: 1
  5681   00070E  0E72               	movlw	114
  5682   000710  1904               	xorwf	(printfUID@buffer+4)& (0+255),w,b
  5683   000712  A4D8               	btfss	status,2,c
  5684   000714  D021               	goto	l3425
  5685                           
  5686                           ; BSR set to: 1
  5687   000716  0E69               	movlw	105
  5688   000718  1905               	xorwf	(printfUID@buffer+5)& (0+255),w,b
  5689   00071A  A4D8               	btfss	status,2,c
  5690   00071C  D01D               	goto	l3425
  5691                           
  5692                           ; BSR set to: 1
  5693   00071E  0E20               	movlw	32
  5694   000720  1906               	xorwf	(printfUID@buffer+6)& (0+255),w,b
  5695   000722  A4D8               	btfss	status,2,c
  5696   000724  D019               	goto	l3425
  5697                           
  5698                           ; BSR set to: 1
  5699                           ;TAD_TERMINAL.c: 89:             buffer[6] == ' ') {;TAD_TERMINAL.c: 90:             *pt
      +                          r++ = '1' + userIndex;
  5700   000726  505D               	movf	printfUID@userIndex^0,w,c
  5701   000728  0F31               	addlw	49
  5702   00072A  C06A  FFD9         	movff	printfUID@ptr,fsr2l
  5703   00072E  C06B  FFDA         	movff	printfUID@ptr+1,fsr2h
  5704   000732  6EDF               	movwf	indf2,c
  5705                           
  5706                           ; BSR set to: 1
  5707   000734  4A6A               	infsnz	printfUID@ptr^0,f,c
  5708   000736  2A6B               	incf	(printfUID@ptr+1)^0,f,c
  5709                           
  5710                           ;TAD_TERMINAL.c: 91:             *ptr++ = ':';
  5711   000738  C06A  FFD9         	movff	printfUID@ptr,fsr2l
  5712   00073C  C06B  FFDA         	movff	printfUID@ptr+1,fsr2h
  5713   000740  0E3A               	movlw	58
  5714   000742  6EDF               	movwf	indf2,c
  5715                           
  5716                           ; BSR set to: 1
  5717   000744  4A6A               	infsnz	printfUID@ptr^0,f,c
  5718   000746  2A6B               	incf	(printfUID@ptr+1)^0,f,c
  5719                           
  5720                           ; BSR set to: 1
  5721                           ;TAD_TERMINAL.c: 92:             *ptr++ = ' ';
  5722   000748  C06A  FFD9         	movff	printfUID@ptr,fsr2l
  5723   00074C  C06B  FFDA         	movff	printfUID@ptr+1,fsr2h
  5724   000750  0E20               	movlw	32
  5725   000752  6EDF               	movwf	indf2,c
  5726   000754  4A6A               	infsnz	printfUID@ptr^0,f,c
  5727   000756  2A6B               	incf	(printfUID@ptr+1)^0,f,c
  5728   000758                     l3425:
  5729                           
  5730                           ; BSR set to: 1
  5731                           ;TAD_TERMINAL.c: 94:         *ptr++ = '\r';
  5732   000758  C06A  FFD9         	movff	printfUID@ptr,fsr2l
  5733   00075C  C06B  FFDA         	movff	printfUID@ptr+1,fsr2h
  5734   000760  0E0D               	movlw	13
  5735   000762  6EDF               	movwf	indf2,c
  5736                           
  5737                           ; BSR set to: 1
  5738   000764  4A6A               	infsnz	printfUID@ptr^0,f,c
  5739   000766  2A6B               	incf	(printfUID@ptr+1)^0,f,c
  5740                           
  5741                           ;TAD_TERMINAL.c: 95:         *ptr++ = '\n';
  5742   000768  C06A  FFD9         	movff	printfUID@ptr,fsr2l
  5743   00076C  C06B  FFDA         	movff	printfUID@ptr+1,fsr2h
  5744   000770  0E0A               	movlw	10
  5745   000772  6EDF               	movwf	indf2,c
  5746                           
  5747                           ; BSR set to: 1
  5748   000774  4A6A               	infsnz	printfUID@ptr^0,f,c
  5749   000776  2A6B               	incf	(printfUID@ptr+1)^0,f,c
  5750                           
  5751                           ; BSR set to: 1
  5752                           ;TAD_TERMINAL.c: 96:         *ptr++ = '\t';
  5753   000778  C06A  FFD9         	movff	printfUID@ptr,fsr2l
  5754   00077C  C06B  FFDA         	movff	printfUID@ptr+1,fsr2h
  5755   000780  0E09               	movlw	9
  5756   000782  6EDF               	movwf	indf2,c
  5757   000784  4A6A               	infsnz	printfUID@ptr^0,f,c
  5758   000786  2A6B               	incf	(printfUID@ptr+1)^0,f,c
  5759   000788                     l3433:
  5760                           
  5761                           ;TAD_TERMINAL.c: 99:     *ptr++ = 'U';
  5762   000788  C06A  FFD9         	movff	printfUID@ptr,fsr2l
  5763   00078C  C06B  FFDA         	movff	printfUID@ptr+1,fsr2h
  5764   000790  0E55               	movlw	85
  5765   000792  6EDF               	movwf	indf2,c
  5766   000794  4A6A               	infsnz	printfUID@ptr^0,f,c
  5767   000796  2A6B               	incf	(printfUID@ptr+1)^0,f,c
  5768                           
  5769                           ;TAD_TERMINAL.c: 100:     *ptr++ = 'I';
  5770   000798  C06A  FFD9         	movff	printfUID@ptr,fsr2l
  5771   00079C  C06B  FFDA         	movff	printfUID@ptr+1,fsr2h
  5772   0007A0  0E49               	movlw	73
  5773   0007A2  6EDF               	movwf	indf2,c
  5774   0007A4  4A6A               	infsnz	printfUID@ptr^0,f,c
  5775   0007A6  2A6B               	incf	(printfUID@ptr+1)^0,f,c
  5776                           
  5777                           ;TAD_TERMINAL.c: 101:     *ptr++ = 'D';
  5778   0007A8  C06A  FFD9         	movff	printfUID@ptr,fsr2l
  5779   0007AC  C06B  FFDA         	movff	printfUID@ptr+1,fsr2h
  5780   0007B0  0E44               	movlw	68
  5781   0007B2  6EDF               	movwf	indf2,c
  5782   0007B4  4A6A               	infsnz	printfUID@ptr^0,f,c
  5783   0007B6  2A6B               	incf	(printfUID@ptr+1)^0,f,c
  5784                           
  5785                           ;TAD_TERMINAL.c: 102:     *ptr++ = ':';
  5786   0007B8  C06A  FFD9         	movff	printfUID@ptr,fsr2l
  5787   0007BC  C06B  FFDA         	movff	printfUID@ptr+1,fsr2h
  5788   0007C0  0E3A               	movlw	58
  5789   0007C2  6EDF               	movwf	indf2,c
  5790   0007C4  4A6A               	infsnz	printfUID@ptr^0,f,c
  5791   0007C6  2A6B               	incf	(printfUID@ptr+1)^0,f,c
  5792                           
  5793                           ;TAD_TERMINAL.c: 103:     *ptr++ = ' ';
  5794   0007C8  C06A  FFD9         	movff	printfUID@ptr,fsr2l
  5795   0007CC  C06B  FFDA         	movff	printfUID@ptr+1,fsr2h
  5796   0007D0  0E20               	movlw	32
  5797   0007D2  6EDF               	movwf	indf2,c
  5798   0007D4  4A6A               	infsnz	printfUID@ptr^0,f,c
  5799   0007D6  2A6B               	incf	(printfUID@ptr+1)^0,f,c
  5800                           
  5801                           ;TAD_TERMINAL.c: 106:     char i;;TAD_TERMINAL.c: 107:     for(i = 0; i < 5; i++) {
  5802   0007D8  6A69               	clrf	printfUID@i^0,c
  5803   0007DA                     l3453:
  5804                           
  5805                           ;TAD_TERMINAL.c: 108:         unsigned char val = currentUser[i];
  5806   0007DA  505C               	movf	printfUID@currentUser^0,w,c
  5807   0007DC  2469               	addwf	printfUID@i^0,w,c
  5808   0007DE  6ED9               	movwf	fsr2l,c
  5809   0007E0  6ADA               	clrf	fsr2h,c
  5810   0007E2  50DF               	movf	indf2,w,c
  5811   0007E4  6E68               	movwf	printfUID@val^0,c
  5812                           
  5813                           ;TAD_TERMINAL.c: 109:         *ptr++ = hex[val >> 4];
  5814   0007E6  3868               	swapf	printfUID@val^0,w,c
  5815   0007E8  0B0F               	andlw	15
  5816   0007EA  6E60               	movwf	??_printfUID^0,c
  5817   0007EC  6A61               	clrf	(??_printfUID+1)^0,c
  5818   0007EE  0E6B               	movlw	low printfUID@hex
  5819   0007F0  2460               	addwf	??_printfUID^0,w,c
  5820   0007F2  6EF6               	movwf	tblptrl,c
  5821   0007F4  0E1E               	movlw	high printfUID@hex
  5822   0007F6  2061               	addwfc	(??_printfUID+1)^0,w,c
  5823   0007F8  6EF7               	movwf	tblptrh,c
  5824   0007FA                     	if	0	;There are less than 3 active tblptr bytes
  5825   0007FA                     	endif
  5826   0007FA  C06A  FFD9         	movff	printfUID@ptr,fsr2l
  5827   0007FE  C06B  FFDA         	movff	printfUID@ptr+1,fsr2h
  5828   000802  0008               	tblrd		*
  5829   000804  CFF5 FFDF          	movff	tablat,indf2
  5830   000808  4A6A               	infsnz	printfUID@ptr^0,f,c
  5831   00080A  2A6B               	incf	(printfUID@ptr+1)^0,f,c
  5832                           
  5833                           ;TAD_TERMINAL.c: 110:         *ptr++ = hex[val & 0x0F];
  5834   00080C  5068               	movf	printfUID@val^0,w,c
  5835   00080E  0B0F               	andlw	15
  5836   000810  6E60               	movwf	??_printfUID^0,c
  5837   000812  6A61               	clrf	(??_printfUID+1)^0,c
  5838   000814  0E6B               	movlw	low printfUID@hex
  5839   000816  2460               	addwf	??_printfUID^0,w,c
  5840   000818  6EF6               	movwf	tblptrl,c
  5841   00081A  0E1E               	movlw	high printfUID@hex
  5842   00081C  2061               	addwfc	(??_printfUID+1)^0,w,c
  5843   00081E  6EF7               	movwf	tblptrh,c
  5844   000820                     	if	0	;There are less than 3 active tblptr bytes
  5845   000820                     	endif
  5846   000820  C06A  FFD9         	movff	printfUID@ptr,fsr2l
  5847   000824  C06B  FFDA         	movff	printfUID@ptr+1,fsr2h
  5848   000828  0008               	tblrd		*
  5849   00082A  CFF5 FFDF          	movff	tablat,indf2
  5850   00082E  4A6A               	infsnz	printfUID@ptr^0,f,c
  5851   000830  2A6B               	incf	(printfUID@ptr+1)^0,f,c
  5852                           
  5853                           ;TAD_TERMINAL.c: 111:         if(i < 4) *ptr++ = '-';
  5854   000832  0E04               	movlw	4
  5855   000834  6069               	cpfslt	printfUID@i^0,c
  5856   000836  D008               	goto	l3469
  5857   000838  C06A  FFD9         	movff	printfUID@ptr,fsr2l
  5858   00083C  C06B  FFDA         	movff	printfUID@ptr+1,fsr2h
  5859   000840  0E2D               	movlw	45
  5860   000842  6EDF               	movwf	indf2,c
  5861   000844  4A6A               	infsnz	printfUID@ptr^0,f,c
  5862   000846  2A6B               	incf	(printfUID@ptr+1)^0,f,c
  5863   000848                     l3469:
  5864                           
  5865                           ;TAD_TERMINAL.c: 112:     }
  5866   000848  2A69               	incf	printfUID@i^0,f,c
  5867   00084A  0E04               	movlw	4
  5868   00084C  6469               	cpfsgt	printfUID@i^0,c
  5869   00084E  D7C5               	goto	l3453
  5870                           
  5871                           ;TAD_TERMINAL.c: 113:     *ptr++ = '\r';
  5872   000850  C06A  FFD9         	movff	printfUID@ptr,fsr2l
  5873   000854  C06B  FFDA         	movff	printfUID@ptr+1,fsr2h
  5874   000858  0E0D               	movlw	13
  5875   00085A  6EDF               	movwf	indf2,c
  5876   00085C  4A6A               	infsnz	printfUID@ptr^0,f,c
  5877   00085E  2A6B               	incf	(printfUID@ptr+1)^0,f,c
  5878                           
  5879                           ;TAD_TERMINAL.c: 114:     *ptr++ = '\n';
  5880   000860  C06A  FFD9         	movff	printfUID@ptr,fsr2l
  5881   000864  C06B  FFDA         	movff	printfUID@ptr+1,fsr2h
  5882   000868  0E0A               	movlw	10
  5883   00086A  6EDF               	movwf	indf2,c
  5884   00086C  4A6A               	infsnz	printfUID@ptr^0,f,c
  5885   00086E  2A6B               	incf	(printfUID@ptr+1)^0,f,c
  5886                           
  5887                           ;TAD_TERMINAL.c: 115:     *ptr++ = '\t';
  5888   000870  C06A  FFD9         	movff	printfUID@ptr,fsr2l
  5889   000874  C06B  FFDA         	movff	printfUID@ptr+1,fsr2h
  5890   000878  0E09               	movlw	9
  5891   00087A  6EDF               	movwf	indf2,c
  5892   00087C  4A6A               	infsnz	printfUID@ptr^0,f,c
  5893   00087E  2A6B               	incf	(printfUID@ptr+1)^0,f,c
  5894                           
  5895                           ;TAD_TERMINAL.c: 117:     unsigned char leds[6];;TAD_TERMINAL.c: 118:     getActualLeds(
      +                          leds, userIndex);
  5896   000880  0E62               	movlw	low printfUID@leds
  5897   000882  6E56               	movwf	getActualLeds@leds^0,c
  5898   000884  C05D  F057         	movff	printfUID@userIndex,getActualLeds@userIndex
  5899   000888  EC66  F00B         	call	_getActualLeds	;wreg free
  5900                           
  5901                           ;TAD_TERMINAL.c: 121:     for(i = 0; i < 6; i++) {
  5902   00088C  6A69               	clrf	printfUID@i^0,c
  5903   00088E                     l3491:
  5904                           
  5905                           ;TAD_TERMINAL.c: 123:         *ptr++ = 'L';
  5906   00088E  C06A  FFD9         	movff	printfUID@ptr,fsr2l
  5907   000892  C06B  FFDA         	movff	printfUID@ptr+1,fsr2h
  5908   000896  0E4C               	movlw	76
  5909   000898  6EDF               	movwf	indf2,c
  5910   00089A  4A6A               	infsnz	printfUID@ptr^0,f,c
  5911   00089C  2A6B               	incf	(printfUID@ptr+1)^0,f,c
  5912                           
  5913                           ;TAD_TERMINAL.c: 124:         *ptr++ = '0' + i;
  5914   00089E  5069               	movf	printfUID@i^0,w,c
  5915   0008A0  0F30               	addlw	48
  5916   0008A2  C06A  FFD9         	movff	printfUID@ptr,fsr2l
  5917   0008A6  C06B  FFDA         	movff	printfUID@ptr+1,fsr2h
  5918   0008AA  6EDF               	movwf	indf2,c
  5919   0008AC  4A6A               	infsnz	printfUID@ptr^0,f,c
  5920   0008AE  2A6B               	incf	(printfUID@ptr+1)^0,f,c
  5921                           
  5922                           ;TAD_TERMINAL.c: 125:         *ptr++ = ':';
  5923   0008B0  C06A  FFD9         	movff	printfUID@ptr,fsr2l
  5924   0008B4  C06B  FFDA         	movff	printfUID@ptr+1,fsr2h
  5925   0008B8  0E3A               	movlw	58
  5926   0008BA  6EDF               	movwf	indf2,c
  5927   0008BC  4A6A               	infsnz	printfUID@ptr^0,f,c
  5928   0008BE  2A6B               	incf	(printfUID@ptr+1)^0,f,c
  5929                           
  5930                           ;TAD_TERMINAL.c: 126:         *ptr++ = ' ';
  5931   0008C0  C06A  FFD9         	movff	printfUID@ptr,fsr2l
  5932   0008C4  C06B  FFDA         	movff	printfUID@ptr+1,fsr2h
  5933   0008C8  0E20               	movlw	32
  5934   0008CA  6EDF               	movwf	indf2,c
  5935   0008CC  4A6A               	infsnz	printfUID@ptr^0,f,c
  5936   0008CE  2A6B               	incf	(printfUID@ptr+1)^0,f,c
  5937                           
  5938                           ;TAD_TERMINAL.c: 127:         *ptr++ = hex[leds[i] & 0x0F];
  5939   0008D0  5069               	movf	printfUID@i^0,w,c
  5940   0008D2  0F62               	addlw	low printfUID@leds
  5941   0008D4  6ED9               	movwf	fsr2l,c
  5942   0008D6  6ADA               	clrf	fsr2h,c
  5943   0008D8  50DF               	movf	indf2,w,c
  5944   0008DA  0B0F               	andlw	15
  5945   0008DC  6E60               	movwf	??_printfUID^0,c
  5946   0008DE  6A61               	clrf	(??_printfUID+1)^0,c
  5947   0008E0  0E6B               	movlw	low printfUID@hex
  5948   0008E2  2460               	addwf	??_printfUID^0,w,c
  5949   0008E4  6EF6               	movwf	tblptrl,c
  5950   0008E6  0E1E               	movlw	high printfUID@hex
  5951   0008E8  2061               	addwfc	(??_printfUID+1)^0,w,c
  5952   0008EA  6EF7               	movwf	tblptrh,c
  5953   0008EC                     	if	0	;There are less than 3 active tblptr bytes
  5954   0008EC                     	endif
  5955   0008EC  C06A  FFD9         	movff	printfUID@ptr,fsr2l
  5956   0008F0  C06B  FFDA         	movff	printfUID@ptr+1,fsr2h
  5957   0008F4  0008               	tblrd		*
  5958   0008F6  CFF5 FFDF          	movff	tablat,indf2
  5959   0008FA  4A6A               	infsnz	printfUID@ptr^0,f,c
  5960   0008FC  2A6B               	incf	(printfUID@ptr+1)^0,f,c
  5961                           
  5962                           ;TAD_TERMINAL.c: 130:         if(i < 5) {
  5963   0008FE  0E05               	movlw	5
  5964   000900  6069               	cpfslt	printfUID@i^0,c
  5965   000902  D018               	goto	l3517
  5966                           
  5967                           ;TAD_TERMINAL.c: 131:             *ptr++ = ' ';
  5968   000904  C06A  FFD9         	movff	printfUID@ptr,fsr2l
  5969   000908  C06B  FFDA         	movff	printfUID@ptr+1,fsr2h
  5970   00090C  0E20               	movlw	32
  5971   00090E  6EDF               	movwf	indf2,c
  5972   000910  4A6A               	infsnz	printfUID@ptr^0,f,c
  5973   000912  2A6B               	incf	(printfUID@ptr+1)^0,f,c
  5974                           
  5975                           ;TAD_TERMINAL.c: 132:             *ptr++ = '-';
  5976   000914  C06A  FFD9         	movff	printfUID@ptr,fsr2l
  5977   000918  C06B  FFDA         	movff	printfUID@ptr+1,fsr2h
  5978   00091C  0E2D               	movlw	45
  5979   00091E  6EDF               	movwf	indf2,c
  5980   000920  4A6A               	infsnz	printfUID@ptr^0,f,c
  5981   000922  2A6B               	incf	(printfUID@ptr+1)^0,f,c
  5982                           
  5983                           ;TAD_TERMINAL.c: 133:             *ptr++ = ' ';
  5984   000924  C06A  FFD9         	movff	printfUID@ptr,fsr2l
  5985   000928  C06B  FFDA         	movff	printfUID@ptr+1,fsr2h
  5986   00092C  0E20               	movlw	32
  5987   00092E  6EDF               	movwf	indf2,c
  5988   000930  4A6A               	infsnz	printfUID@ptr^0,f,c
  5989   000932  2A6B               	incf	(printfUID@ptr+1)^0,f,c
  5990   000934                     l3517:
  5991                           
  5992                           ;TAD_TERMINAL.c: 135:     }
  5993   000934  2A69               	incf	printfUID@i^0,f,c
  5994   000936  0E05               	movlw	5
  5995   000938  6469               	cpfsgt	printfUID@i^0,c
  5996   00093A  D7A9               	goto	l3491
  5997                           
  5998                           ;TAD_TERMINAL.c: 138:     *ptr++ = '\r';
  5999   00093C  C06A  FFD9         	movff	printfUID@ptr,fsr2l
  6000   000940  C06B  FFDA         	movff	printfUID@ptr+1,fsr2h
  6001   000944  0E0D               	movlw	13
  6002   000946  6EDF               	movwf	indf2,c
  6003   000948  4A6A               	infsnz	printfUID@ptr^0,f,c
  6004   00094A  2A6B               	incf	(printfUID@ptr+1)^0,f,c
  6005                           
  6006                           ;TAD_TERMINAL.c: 139:     *ptr++ = '\n';
  6007   00094C  C06A  FFD9         	movff	printfUID@ptr,fsr2l
  6008   000950  C06B  FFDA         	movff	printfUID@ptr+1,fsr2h
  6009   000954  0E0A               	movlw	10
  6010   000956  6EDF               	movwf	indf2,c
  6011   000958  4A6A               	infsnz	printfUID@ptr^0,f,c
  6012   00095A  2A6B               	incf	(printfUID@ptr+1)^0,f,c
  6013                           
  6014                           ;TAD_TERMINAL.c: 140:     *ptr = '\0';
  6015   00095C  C06A  FFD9         	movff	printfUID@ptr,fsr2l
  6016   000960  C06B  FFDA         	movff	printfUID@ptr+1,fsr2h
  6017   000964  6ADF               	clrf	indf2,c
  6018                           
  6019                           ;TAD_TERMINAL.c: 143:     motor_StartSendString(buffer);
  6020   000966  0E00               	movlw	low printfUID@buffer
  6021   000968  6E5A               	movwf	motor_StartSendString@str^0,c
  6022   00096A  0E01               	movlw	high printfUID@buffer
  6023   00096C  6E5B               	movwf	(motor_StartSendString@str+1)^0,c
  6024   00096E  EC15  F00D         	call	_motor_StartSendString	;wreg free
  6025                           
  6026                           ;TAD_TERMINAL.c: 144:     sending_string = 1;
  6027   000972  0E01               	movlw	1
  6028   000974  6E20               	movwf	_sending_string^0,c
  6029   000976  0012               	return		;funcret
  6030   000978                     __end_of_printfUID:
  6031                           	callstack 0
  6032                           
  6033 ;; *************** function _motor_StartSendString *****************
  6034 ;; Defined at:
  6035 ;;		line 58 in file "TAD_TERMINAL.c"
  6036 ;; Parameters:    Size  Location     Type
  6037 ;;  str             2    5[COMRAM] PTR const unsigned char 
  6038 ;;		 -> STR_14(33), STR_13(33), STR_12(3), STR_10(18), 
  6039 ;;		 -> STR_9(3), STR_8(33), STR_6(33), STR_5(3), 
  6040 ;;		 -> STR_4(95), STR_3(53), STR_2(18), STR_1(30), 
  6041 ;;		 -> printfUID@buffer(80), 
  6042 ;; Auto vars:     Size  Location     Type
  6043 ;;		None
  6044 ;; Return value:  Size  Location     Type
  6045 ;;                  1    wreg      void 
  6046 ;; Registers used:
  6047 ;;		wreg, fsr1l, fsr1h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  6048 ;; Tracked objects:
  6049 ;;		On entry : 0/0
  6050 ;;		On exit  : 0/0
  6051 ;;		Unchanged: 0/0
  6052 ;; Data sizes:     COMRAM   BANK0   BANK1
  6053 ;;      Params:         2       0       0
  6054 ;;      Locals:         0       0       0
  6055 ;;      Temps:          0       0       0
  6056 ;;      Totals:         2       0       0
  6057 ;;Total ram usage:        2 bytes
  6058 ;; Hardware stack levels used: 1
  6059 ;; Hardware stack levels required when called: 6
  6060 ;; This function calls:
  6061 ;;		_motor_SendString
  6062 ;; This function is called by:
  6063 ;;		_printfUID
  6064 ;;		_motorTerminal
  6065 ;; This function uses a non-reentrant model
  6066 ;;
  6067                           
  6068                           	psect	text13
  6069   001A2A                     __ptext13:
  6070                           	callstack 0
  6071   001A2A                     _motor_StartSendString:
  6072                           	callstack 21
  6073                           
  6074                           ;TAD_TERMINAL.c: 59:  if (motor_SendString() == 1) {
  6075                           
  6076                           ;incstack = 0
  6077   001A2A  ECFE  F009         	call	_motor_SendString	;wreg free
  6078   001A2E  06E8               	decf	wreg,f,c
  6079   001A30  A4D8               	btfss	status,2,c
  6080   001A32  0012               	return	
  6081                           
  6082                           ;TAD_TERMINAL.c: 60:   str_ptr = str;
  6083   001A34  C05A  F00F         	movff	motor_StartSendString@str,_str_ptr
  6084   001A38  C05B  F010         	movff	motor_StartSendString@str+1,_str_ptr+1
  6085                           
  6086                           ;TAD_TERMINAL.c: 61:   state_str = 1;
  6087   001A3C  0E01               	movlw	1
  6088   001A3E  6E22               	movwf	_state_str^0,c
  6089   001A40  0012               	return		;funcret
  6090   001A42                     __end_of_motor_StartSendString:
  6091                           	callstack 0
  6092                           
  6093 ;; *************** function _motor_SendString *****************
  6094 ;; Defined at:
  6095 ;;		line 44 in file "TAD_TERMINAL.c"
  6096 ;; Parameters:    Size  Location     Type
  6097 ;;		None
  6098 ;; Auto vars:     Size  Location     Type
  6099 ;;		None
  6100 ;; Return value:  Size  Location     Type
  6101 ;;                  1    wreg      unsigned char 
  6102 ;; Registers used:
  6103 ;;		wreg, fsr1l, fsr1h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  6104 ;; Tracked objects:
  6105 ;;		On entry : 0/0
  6106 ;;		On exit  : 0/0
  6107 ;;		Unchanged: 0/0
  6108 ;; Data sizes:     COMRAM   BANK0   BANK1
  6109 ;;      Params:         0       0       0
  6110 ;;      Locals:         0       0       0
  6111 ;;      Temps:          0       0       0
  6112 ;;      Totals:         0       0       0
  6113 ;;Total ram usage:        0 bytes
  6114 ;; Hardware stack levels used: 1
  6115 ;; Hardware stack levels required when called: 5
  6116 ;; This function calls:
  6117 ;;		_motor_SendChar
  6118 ;; This function is called by:
  6119 ;;		_motor_StartSendString
  6120 ;;		_motorTerminal
  6121 ;; This function uses a non-reentrant model
  6122 ;;
  6123                           
  6124                           	psect	text14
  6125   0013FC                     __ptext14:
  6126                           	callstack 0
  6127   0013FC                     _motor_SendString:
  6128                           	callstack 21
  6129                           
  6130                           ;TAD_TERMINAL.c: 45:     switch(state_str) {
  6131                           
  6132                           ;incstack = 0
  6133   0013FC  D030               	goto	l3253
  6134   0013FE                     l3231:
  6135   0013FE  0E01               	movlw	1
  6136   001400  0012               	return	
  6137   001402                     l3235:
  6138                           
  6139                           ;TAD_TERMINAL.c: 48:    if (!*str_ptr) {
  6140   001402  C00F  FFF6         	movff	_str_ptr,tblptrl
  6141   001406  C010  FFF7         	movff	_str_ptr+1,tblptrh
  6142   00140A  6AF8               	clrf	tblptru,c
  6143   00140C  0E01               	movlw	(high __ramtop+-1)
  6144   00140E  64F7               	cpfsgt	tblptrh,c
  6145   001410  D003               	bra	u2437
  6146   001412  0008               	tblrd		*
  6147   001414  50F5               	movf	tablat,w,c
  6148   001416  D005               	bra	u2430
  6149   001418                     u2437:
  6150   001418  CFF6 FFE1          	movff	tblptrl,fsr1l
  6151   00141C  CFF7 FFE2          	movff	tblptrh,fsr1h
  6152   001420  50E7               	movf	indf1,w,c
  6153   001422                     u2430:
  6154   001422  0900               	iorlw	0
  6155   001424  A4D8               	btfss	status,2,c
  6156   001426  D002               	goto	l3243
  6157                           
  6158                           ;TAD_TERMINAL.c: 49:     state_str = 0;
  6159   001428  6A22               	clrf	_state_str^0,c
  6160   00142A  D7E9               	goto	l3231
  6161   00142C                     l3243:
  6162                           
  6163                           ;TAD_TERMINAL.c: 52:    if (motor_SendChar(*str_ptr)) str_ptr++;
  6164   00142C  C00F  FFF6         	movff	_str_ptr,tblptrl
  6165   001430  C010  FFF7         	movff	_str_ptr+1,tblptrh
  6166   001434  6AF8               	clrf	tblptru,c
  6167   001436  0E01               	movlw	(high __ramtop+-1)
  6168   001438  64F7               	cpfsgt	tblptrh,c
  6169   00143A  D003               	bra	u2457
  6170   00143C  0008               	tblrd		*
  6171   00143E  50F5               	movf	tablat,w,c
  6172   001440  D005               	bra	u2450
  6173   001442                     u2457:
  6174   001442  CFF6 FFE1          	movff	tblptrl,fsr1l
  6175   001446  CFF7 FFE2          	movff	tblptrh,fsr1h
  6176   00144A  50E7               	movf	indf1,w,c
  6177   00144C                     u2450:
  6178   00144C  EC08  F00D         	call	_motor_SendChar
  6179   001450  0900               	iorlw	0
  6180   001452  B4D8               	btfsc	status,2,c
  6181   001454  D002               	goto	l3247
  6182   001456  4A0F               	infsnz	_str_ptr^0,f,c
  6183   001458  2A10               	incf	(_str_ptr+1)^0,f,c
  6184   00145A                     l3247:
  6185                           
  6186                           ;TAD_TERMINAL.c: 53:    return 0;
  6187   00145A  0E00               	movlw	0
  6188   00145C  0012               	return	
  6189   00145E                     l3253:
  6190   00145E  5022               	movf	_state_str^0,w,c
  6191                           
  6192                           ; Switch size 1, requested type "simple"
  6193                           ; Number of cases is 2, Range of values is 0 to 1
  6194                           ; switch strategies available:
  6195                           ; Name         Instructions Cycles
  6196                           ; simple_byte            7     4 (average)
  6197                           ;	Chosen strategy is simple_byte
  6198   001460  0A00               	xorlw	0	; case 0
  6199   001462  B4D8               	btfsc	status,2,c
  6200   001464  D7CC               	goto	l3231
  6201   001466  0A01               	xorlw	1	; case 1
  6202   001468  B4D8               	btfsc	status,2,c
  6203   00146A  D7CB               	goto	l3235
  6204   00146C  D7F6               	goto	l3247
  6205   00146E                     __end_of_motor_SendString:
  6206                           	callstack 0
  6207                           
  6208 ;; *************** function _motor_SendChar *****************
  6209 ;; Defined at:
  6210 ;;		line 37 in file "TAD_TERMINAL.c"
  6211 ;; Parameters:    Size  Location     Type
  6212 ;;  c               1    wreg     unsigned char 
  6213 ;; Auto vars:     Size  Location     Type
  6214 ;;  c               1    4[COMRAM] unsigned char 
  6215 ;; Return value:  Size  Location     Type
  6216 ;;                  1    wreg      unsigned char 
  6217 ;; Registers used:
  6218 ;;		wreg, status,2, status,0, cstack
  6219 ;; Tracked objects:
  6220 ;;		On entry : 0/0
  6221 ;;		On exit  : 0/0
  6222 ;;		Unchanged: 0/0
  6223 ;; Data sizes:     COMRAM   BANK0   BANK1
  6224 ;;      Params:         0       0       0
  6225 ;;      Locals:         1       0       0
  6226 ;;      Temps:          0       0       0
  6227 ;;      Totals:         1       0       0
  6228 ;;Total ram usage:        1 bytes
  6229 ;; Hardware stack levels used: 1
  6230 ;; Hardware stack levels required when called: 4
  6231 ;; This function calls:
  6232 ;;		_Terminal_TXAvailable
  6233 ;; This function is called by:
  6234 ;;		_motor_SendString
  6235 ;; This function uses a non-reentrant model
  6236 ;;
  6237                           
  6238                           	psect	text15
  6239   001A10                     __ptext15:
  6240                           	callstack 0
  6241   001A10                     _motor_SendChar:
  6242                           	callstack 21
  6243                           
  6244                           ;incstack = 0
  6245                           ;motor_SendChar@c stored from wreg
  6246   001A10  6E59               	movwf	motor_SendChar@c^0,c
  6247                           
  6248                           ;TAD_TERMINAL.c: 38:  if (!Terminal_TXAvailable()) return 0;
  6249   001A12  EC5B  F00D         	call	_Terminal_TXAvailable	;wreg free
  6250   001A16  5056               	movf	?_Terminal_TXAvailable^0,w,c
  6251   001A18  1057               	iorwf	(?_Terminal_TXAvailable+1)^0,w,c
  6252   001A1A  A4D8               	btfss	status,2,c
  6253   001A1C  D002               	goto	l645
  6254   001A1E  0E00               	movlw	0
  6255   001A20  0012               	return	
  6256   001A22                     l645:
  6257                           
  6258                           ;TAD_TERMINAL.c: 39:  TXREG = c;
  6259   001A22  C059  FFAD         	movff	motor_SendChar@c,4013	;volatile
  6260                           
  6261                           ;TAD_TERMINAL.c: 40:  return 1;
  6262   001A26  0E01               	movlw	1
  6263   001A28  0012               	return		;funcret
  6264   001A2A                     __end_of_motor_SendChar:
  6265                           	callstack 0
  6266                           
  6267 ;; *************** function _getActualLeds *****************
  6268 ;; Defined at:
  6269 ;;		line 57 in file "TAD_DATOS.c"
  6270 ;; Parameters:    Size  Location     Type
  6271 ;;  leds            1    1[COMRAM] PTR unsigned char 
  6272 ;;		 -> printfUID@leds(6), ActualLeds(6), 
  6273 ;;  userIndex       1    2[COMRAM] unsigned char 
  6274 ;; Auto vars:     Size  Location     Type
  6275 ;;  i               1    4[COMRAM] unsigned char 
  6276 ;;  i               1    3[COMRAM] unsigned char 
  6277 ;; Return value:  Size  Location     Type
  6278 ;;                  1    wreg      void 
  6279 ;; Registers used:
  6280 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  6281 ;; Tracked objects:
  6282 ;;		On entry : 0/0
  6283 ;;		On exit  : 0/0
  6284 ;;		Unchanged: 0/0
  6285 ;; Data sizes:     COMRAM   BANK0   BANK1
  6286 ;;      Params:         2       0       0
  6287 ;;      Locals:         2       0       0
  6288 ;;      Temps:          0       0       0
  6289 ;;      Totals:         4       0       0
  6290 ;;Total ram usage:        4 bytes
  6291 ;; Hardware stack levels used: 1
  6292 ;; Hardware stack levels required when called: 3
  6293 ;; This function calls:
  6294 ;;		Nothing
  6295 ;; This function is called by:
  6296 ;;		_motor_LEDs
  6297 ;;		_printfUID
  6298 ;; This function uses a non-reentrant model
  6299 ;;
  6300                           
  6301                           	psect	text16
  6302   0016CC                     __ptext16:
  6303                           	callstack 0
  6304   0016CC                     _getActualLeds:
  6305                           	callstack 24
  6306                           
  6307                           ;TAD_DATOS.c: 58:     if(!leds) return;
  6308                           
  6309                           ;incstack = 0
  6310   0016CC  5056               	movf	getActualLeds@leds^0,w,c
  6311   0016CE  B4D8               	btfsc	status,2,c
  6312   0016D0  0012               	return	
  6313                           
  6314                           ;TAD_DATOS.c: 59:     if(userIndex == 20) {
  6315   0016D2  0E14               	movlw	20
  6316   0016D4  1857               	xorwf	getActualLeds@userIndex^0,w,c
  6317   0016D6  A4D8               	btfss	status,2,c
  6318   0016D8  D013               	goto	l782
  6319                           
  6320                           ;TAD_DATOS.c: 61:         for(char i = 0; i < 6; i++) {
  6321   0016DA  6A58               	clrf	getActualLeds@i^0,c
  6322   0016DC                     l3291:
  6323                           
  6324                           ;TAD_DATOS.c: 62:             leds[i] = configurations[index][i];
  6325   0016DC  507C               	movf	_index^0,w,c
  6326   0016DE  0D06               	mullw	6
  6327   0016E0  50F3               	movf	243,w,c
  6328   0016E2  0F80               	addlw	low _configurations
  6329   0016E4  2458               	addwf	getActualLeds@i^0,w,c
  6330   0016E6  6ED9               	movwf	fsr2l,c
  6331   0016E8  6ADA               	clrf	fsr2h,c
  6332   0016EA  5056               	movf	getActualLeds@leds^0,w,c
  6333   0016EC  2458               	addwf	getActualLeds@i^0,w,c
  6334   0016EE  6EE1               	movwf	fsr1l,c
  6335   0016F0  6AE2               	clrf	fsr1h,c
  6336   0016F2  CFDF FFE7          	movff	indf2,indf1
  6337                           
  6338                           ;TAD_DATOS.c: 63:         }
  6339   0016F6  2A58               	incf	getActualLeds@i^0,f,c
  6340   0016F8  0E05               	movlw	5
  6341   0016FA  6458               	cpfsgt	getActualLeds@i^0,c
  6342   0016FC  D7EF               	goto	l3291
  6343   0016FE  0012               	return	
  6344   001700                     l782:
  6345                           
  6346                           ;TAD_DATOS.c: 66:         for(char i = 0; i < 6; i++) {
  6347   001700  6A59               	clrf	getActualLeds@i_895^0,c
  6348   001702                     l3301:
  6349                           
  6350                           ;TAD_DATOS.c: 67:             leds[i] = configurations[userIndex][i];
  6351   001702  5057               	movf	getActualLeds@userIndex^0,w,c
  6352   001704  0D06               	mullw	6
  6353   001706  50F3               	movf	243,w,c
  6354   001708  0F80               	addlw	low _configurations
  6355   00170A  2459               	addwf	getActualLeds@i_895^0,w,c
  6356   00170C  6ED9               	movwf	fsr2l,c
  6357   00170E  6ADA               	clrf	fsr2h,c
  6358   001710  5056               	movf	getActualLeds@leds^0,w,c
  6359   001712  2459               	addwf	getActualLeds@i_895^0,w,c
  6360   001714  6EE1               	movwf	fsr1l,c
  6361   001716  6AE2               	clrf	fsr1h,c
  6362   001718  CFDF FFE7          	movff	indf2,indf1
  6363                           
  6364                           ;TAD_DATOS.c: 68:         }
  6365   00171C  2A59               	incf	getActualLeds@i_895^0,f,c
  6366   00171E  0E05               	movlw	5
  6367   001720  6459               	cpfsgt	getActualLeds@i_895^0,c
  6368   001722  D7EF               	goto	l3301
  6369   001724  0012               	return	
  6370   001726                     __end_of_getActualLeds:
  6371                           	callstack 0
  6372                           
  6373 ;; *************** function _getCurrentUserIndex *****************
  6374 ;; Defined at:
  6375 ;;		line 214 in file "TAD_DATOS.c"
  6376 ;; Parameters:    Size  Location     Type
  6377 ;;		None
  6378 ;; Auto vars:     Size  Location     Type
  6379 ;;		None
  6380 ;; Return value:  Size  Location     Type
  6381 ;;                  1    wreg      unsigned char 
  6382 ;; Registers used:
  6383 ;;		wreg, status,2
  6384 ;; Tracked objects:
  6385 ;;		On entry : 0/0
  6386 ;;		On exit  : 0/0
  6387 ;;		Unchanged: 0/0
  6388 ;; Data sizes:     COMRAM   BANK0   BANK1
  6389 ;;      Params:         0       0       0
  6390 ;;      Locals:         0       0       0
  6391 ;;      Temps:          0       0       0
  6392 ;;      Totals:         0       0       0
  6393 ;;Total ram usage:        0 bytes
  6394 ;; Hardware stack levels used: 1
  6395 ;; Hardware stack levels required when called: 3
  6396 ;; This function calls:
  6397 ;;		Nothing
  6398 ;; This function is called by:
  6399 ;;		_motor_RFID
  6400 ;;		_motorTerminal
  6401 ;; This function uses a non-reentrant model
  6402 ;;
  6403                           
  6404                           	psect	text17
  6405   001B2E                     __ptext17:
  6406                           	callstack 0
  6407   001B2E                     _getCurrentUserIndex:
  6408                           	callstack 26
  6409                           
  6410                           ;TAD_DATOS.c: 215:     return index;
  6411                           
  6412                           ;incstack = 0
  6413   001B2E  507C               	movf	_index^0,w,c
  6414   001B30  0012               	return		;funcret
  6415   001B32                     __end_of_getCurrentUserIndex:
  6416                           	callstack 0
  6417                           
  6418 ;; *************** function _getActualUID *****************
  6419 ;; Defined at:
  6420 ;;		line 37 in file "TAD_DATOS.c"
  6421 ;; Parameters:    Size  Location     Type
  6422 ;;  UID             1    1[COMRAM] PTR unsigned char 
  6423 ;;		 -> motorTerminal@currentUser(5), motor_RFID@currentUser(5), 
  6424 ;;  userIndex       1    2[COMRAM] unsigned char 
  6425 ;; Auto vars:     Size  Location     Type
  6426 ;;  i               1    3[COMRAM] unsigned char 
  6427 ;;  i               1    4[COMRAM] unsigned char 
  6428 ;;  i               1    5[COMRAM] unsigned char 
  6429 ;; Return value:  Size  Location     Type
  6430 ;;                  1    wreg      void 
  6431 ;; Registers used:
  6432 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  6433 ;; Tracked objects:
  6434 ;;		On entry : 0/0
  6435 ;;		On exit  : 0/0
  6436 ;;		Unchanged: 0/0
  6437 ;; Data sizes:     COMRAM   BANK0   BANK1
  6438 ;;      Params:         2       0       0
  6439 ;;      Locals:         3       0       0
  6440 ;;      Temps:          0       0       0
  6441 ;;      Totals:         5       0       0
  6442 ;;Total ram usage:        5 bytes
  6443 ;; Hardware stack levels used: 1
  6444 ;; Hardware stack levels required when called: 3
  6445 ;; This function calls:
  6446 ;;		Nothing
  6447 ;; This function is called by:
  6448 ;;		_motor_RFID
  6449 ;;		_motorTerminal
  6450 ;; This function uses a non-reentrant model
  6451 ;;
  6452                           
  6453                           	psect	text18
  6454   00146E                     __ptext18:
  6455                           	callstack 0
  6456   00146E                     _getActualUID:
  6457                           	callstack 26
  6458                           
  6459                           ;TAD_DATOS.c: 38:     if(!UID) return;
  6460                           
  6461                           ;incstack = 0
  6462   00146E  5056               	movf	getActualUID@UID^0,w,c
  6463   001470  B4D8               	btfsc	status,2,c
  6464   001472  0012               	return	
  6465                           
  6466                           ;TAD_DATOS.c: 39:     if (userIndex == 0xFF) {
  6467   001474  2857               	incf	getActualUID@userIndex^0,w,c
  6468   001476  A4D8               	btfss	status,2,c
  6469   001478  D01E               	goto	l768
  6470                           
  6471                           ;TAD_DATOS.c: 40:         if (currentUser[0]) {
  6472   00147A  5040               	movf	_currentUser^0,w,c
  6473   00147C  B4D8               	btfsc	status,2,c
  6474   00147E  D010               	goto	l769
  6475                           
  6476                           ;TAD_DATOS.c: 41:             for(unsigned char i = 0; i < 5; i++) {
  6477   001480  6A59               	clrf	getActualUID@i^0,c
  6478   001482                     l3723:
  6479                           
  6480                           ;TAD_DATOS.c: 42:                 UID[i] = currentUser[i];
  6481   001482  5059               	movf	getActualUID@i^0,w,c
  6482   001484  0F40               	addlw	low _currentUser
  6483   001486  6ED9               	movwf	fsr2l,c
  6484   001488  6ADA               	clrf	fsr2h,c
  6485   00148A  5056               	movf	getActualUID@UID^0,w,c
  6486   00148C  2459               	addwf	getActualUID@i^0,w,c
  6487   00148E  6EE1               	movwf	fsr1l,c
  6488   001490  6AE2               	clrf	fsr1h,c
  6489   001492  CFDF FFE7          	movff	indf2,indf1
  6490                           
  6491                           ;TAD_DATOS.c: 43:             }
  6492   001496  2A59               	incf	getActualUID@i^0,f,c
  6493   001498  0E04               	movlw	4
  6494   00149A  6459               	cpfsgt	getActualUID@i^0,c
  6495   00149C  D7F2               	goto	l3723
  6496   00149E  0012               	return	
  6497   0014A0                     l769:
  6498                           
  6499                           ;TAD_DATOS.c: 45:             for(unsigned char i = 0; i < 5; i++) {
  6500   0014A0  6A58               	clrf	getActualUID@i_889^0,c
  6501   0014A2                     l3733:
  6502                           
  6503                           ;TAD_DATOS.c: 46:                 UID[i] = 0x00;
  6504   0014A2  5056               	movf	getActualUID@UID^0,w,c
  6505   0014A4  2458               	addwf	getActualUID@i_889^0,w,c
  6506   0014A6  6ED9               	movwf	fsr2l,c
  6507   0014A8  6ADA               	clrf	fsr2h,c
  6508   0014AA  6ADF               	clrf	indf2,c
  6509                           
  6510                           ;TAD_DATOS.c: 47:             }
  6511   0014AC  2A58               	incf	getActualUID@i_889^0,f,c
  6512   0014AE  0E04               	movlw	4
  6513   0014B0  6458               	cpfsgt	getActualUID@i_889^0,c
  6514   0014B2  D7F7               	goto	l3733
  6515   0014B4  0012               	return	
  6516   0014B6                     l768:
  6517                           
  6518                           ;TAD_DATOS.c: 50:         for(unsigned char i = 0; i < 5; i++) {
  6519   0014B6  6A5A               	clrf	getActualUID@i_890^0,c
  6520   0014B8                     l3743:
  6521                           
  6522                           ;TAD_DATOS.c: 51:             UID[i] = userUIDs[userIndex][i];
  6523   0014B8  5057               	movf	getActualUID@userIndex^0,w,c
  6524   0014BA  0D05               	mullw	5
  6525   0014BC  50F3               	movf	243,w,c
  6526   0014BE  0FC3               	addlw	low _userUIDs
  6527   0014C0  245A               	addwf	getActualUID@i_890^0,w,c
  6528   0014C2  6ED9               	movwf	fsr2l,c
  6529   0014C4  6ADA               	clrf	fsr2h,c
  6530   0014C6  5056               	movf	getActualUID@UID^0,w,c
  6531   0014C8  245A               	addwf	getActualUID@i_890^0,w,c
  6532   0014CA  6EE1               	movwf	fsr1l,c
  6533   0014CC  6AE2               	clrf	fsr1h,c
  6534   0014CE  CFDF FFE7          	movff	indf2,indf1
  6535                           
  6536                           ;TAD_DATOS.c: 52:         }
  6537   0014D2  2A5A               	incf	getActualUID@i_890^0,f,c
  6538   0014D4  0E04               	movlw	4
  6539   0014D6  645A               	cpfsgt	getActualUID@i_890^0,c
  6540   0014D8  D7EF               	goto	l3743
  6541   0014DA  0012               	return	
  6542   0014DC                     __end_of_getActualUID:
  6543                           	callstack 0
  6544                           
  6545 ;; *************** function _Terminal_SendChar *****************
  6546 ;; Defined at:
  6547 ;;		line 25 in file "TAD_TERMINAL.c"
  6548 ;; Parameters:    Size  Location     Type
  6549 ;;  c               1    wreg     unsigned char 
  6550 ;; Auto vars:     Size  Location     Type
  6551 ;;  c               1    4[COMRAM] unsigned char 
  6552 ;; Return value:  Size  Location     Type
  6553 ;;                  1    wreg      void 
  6554 ;; Registers used:
  6555 ;;		wreg, status,2, status,0, cstack
  6556 ;; Tracked objects:
  6557 ;;		On entry : 0/0
  6558 ;;		On exit  : 0/0
  6559 ;;		Unchanged: 0/0
  6560 ;; Data sizes:     COMRAM   BANK0   BANK1
  6561 ;;      Params:         0       0       0
  6562 ;;      Locals:         1       0       0
  6563 ;;      Temps:          0       0       0
  6564 ;;      Totals:         1       0       0
  6565 ;;Total ram usage:        1 bytes
  6566 ;; Hardware stack levels used: 1
  6567 ;; Hardware stack levels required when called: 4
  6568 ;; This function calls:
  6569 ;;		_Terminal_TXAvailable
  6570 ;; This function is called by:
  6571 ;;		_motorTerminal
  6572 ;; This function uses a non-reentrant model
  6573 ;;
  6574                           
  6575                           	psect	text19
  6576   001AA2                     __ptext19:
  6577                           	callstack 0
  6578   001AA2                     _Terminal_SendChar:
  6579                           	callstack 25
  6580                           
  6581                           ;incstack = 0
  6582                           ;Terminal_SendChar@c stored from wreg
  6583   001AA2  6E59               	movwf	Terminal_SendChar@c^0,c
  6584   001AA4                     
  6585                           ;TAD_TERMINAL.c: 26:  while (!Terminal_TXAvailable());
  6586   001AA4  EC5B  F00D         	call	_Terminal_TXAvailable	;wreg free
  6587   001AA8  5056               	movf	?_Terminal_TXAvailable^0,w,c
  6588   001AAA  1057               	iorwf	(?_Terminal_TXAvailable+1)^0,w,c
  6589   001AAC  B4D8               	btfsc	status,2,c
  6590   001AAE  D7FA               	goto	l3869
  6591                           
  6592                           ;TAD_TERMINAL.c: 27:  TXREG = c;
  6593   001AB0  C059  FFAD         	movff	Terminal_SendChar@c,4013	;volatile
  6594   001AB4  0012               	return		;funcret
  6595   001AB6                     __end_of_Terminal_SendChar:
  6596                           	callstack 0
  6597                           
  6598 ;; *************** function _Terminal_TXAvailable *****************
  6599 ;; Defined at:
  6600 ;;		line 20 in file "TAD_TERMINAL.c"
  6601 ;; Parameters:    Size  Location     Type
  6602 ;;		None
  6603 ;; Auto vars:     Size  Location     Type
  6604 ;;		None
  6605 ;; Return value:  Size  Location     Type
  6606 ;;                  2    1[COMRAM] int 
  6607 ;; Registers used:
  6608 ;;		wreg, status,2
  6609 ;; Tracked objects:
  6610 ;;		On entry : 0/0
  6611 ;;		On exit  : 0/0
  6612 ;;		Unchanged: 0/0
  6613 ;; Data sizes:     COMRAM   BANK0   BANK1
  6614 ;;      Params:         2       0       0
  6615 ;;      Locals:         0       0       0
  6616 ;;      Temps:          1       0       0
  6617 ;;      Totals:         3       0       0
  6618 ;;Total ram usage:        3 bytes
  6619 ;; Hardware stack levels used: 1
  6620 ;; Hardware stack levels required when called: 3
  6621 ;; This function calls:
  6622 ;;		Nothing
  6623 ;; This function is called by:
  6624 ;;		_Terminal_SendChar
  6625 ;;		_motor_SendChar
  6626 ;; This function uses a non-reentrant model
  6627 ;;
  6628                           
  6629                           	psect	text20
  6630   001AB6                     __ptext20:
  6631                           	callstack 0
  6632   001AB6                     _Terminal_TXAvailable:
  6633                           	callstack 21
  6634                           
  6635                           ;incstack = 0
  6636   001AB6  A89E               	btfss	158,4,c	;volatile
  6637   001AB8  D003               	goto	u2240
  6638   001ABA  6A58               	clrf	??_Terminal_TXAvailable^0,c
  6639   001ABC  2A58               	incf	??_Terminal_TXAvailable^0,f,c
  6640   001ABE  D001               	goto	u2248
  6641   001AC0                     u2240:
  6642   001AC0  6A58               	clrf	??_Terminal_TXAvailable^0,c
  6643   001AC2                     u2248:
  6644   001AC2  5058               	movf	??_Terminal_TXAvailable^0,w,c
  6645   001AC4  6E56               	movwf	?_Terminal_TXAvailable^0,c
  6646   001AC6  6A57               	clrf	(?_Terminal_TXAvailable+1)^0,c
  6647   001AC8  0012               	return		;funcret
  6648   001ACA                     __end_of_Terminal_TXAvailable:
  6649                           	callstack 0
  6650                           
  6651 ;; *************** function _Terminal_ReceiveChar *****************
  6652 ;; Defined at:
  6653 ;;		line 22 in file "TAD_TERMINAL.c"
  6654 ;; Parameters:    Size  Location     Type
  6655 ;;		None
  6656 ;; Auto vars:     Size  Location     Type
  6657 ;;		None
  6658 ;; Return value:  Size  Location     Type
  6659 ;;                  1    wreg      unsigned char 
  6660 ;; Registers used:
  6661 ;;		wreg, status,2
  6662 ;; Tracked objects:
  6663 ;;		On entry : 0/0
  6664 ;;		On exit  : 0/0
  6665 ;;		Unchanged: 0/0
  6666 ;; Data sizes:     COMRAM   BANK0   BANK1
  6667 ;;      Params:         0       0       0
  6668 ;;      Locals:         0       0       0
  6669 ;;      Temps:          0       0       0
  6670 ;;      Totals:         0       0       0
  6671 ;;Total ram usage:        0 bytes
  6672 ;; Hardware stack levels used: 1
  6673 ;; Hardware stack levels required when called: 3
  6674 ;; This function calls:
  6675 ;;		Nothing
  6676 ;; This function is called by:
  6677 ;;		_motorTerminal
  6678 ;; This function uses a non-reentrant model
  6679 ;;
  6680                           
  6681                           	psect	text21
  6682   001B32                     __ptext21:
  6683                           	callstack 0
  6684   001B32                     _Terminal_ReceiveChar:
  6685                           	callstack 26
  6686                           
  6687                           ;incstack = 0
  6688   001B32  50AE               	movf	174,w,c	;volatile
  6689   001B34  0012               	return		;funcret
  6690   001B36                     __end_of_Terminal_ReceiveChar:
  6691                           	callstack 0
  6692                           
  6693 ;; *************** function _Terminal_RXAvailable *****************
  6694 ;; Defined at:
  6695 ;;		line 21 in file "TAD_TERMINAL.c"
  6696 ;; Parameters:    Size  Location     Type
  6697 ;;		None
  6698 ;; Auto vars:     Size  Location     Type
  6699 ;;		None
  6700 ;; Return value:  Size  Location     Type
  6701 ;;                  1    wreg      unsigned char 
  6702 ;; Registers used:
  6703 ;;		wreg
  6704 ;; Tracked objects:
  6705 ;;		On entry : 0/0
  6706 ;;		On exit  : 0/0
  6707 ;;		Unchanged: 0/0
  6708 ;; Data sizes:     COMRAM   BANK0   BANK1
  6709 ;;      Params:         0       0       0
  6710 ;;      Locals:         0       0       0
  6711 ;;      Temps:          0       0       0
  6712 ;;      Totals:         0       0       0
  6713 ;;Total ram usage:        0 bytes
  6714 ;; Hardware stack levels used: 1
  6715 ;; Hardware stack levels required when called: 3
  6716 ;; This function calls:
  6717 ;;		Nothing
  6718 ;; This function is called by:
  6719 ;;		_motorTerminal
  6720 ;; This function uses a non-reentrant model
  6721 ;;
  6722                           
  6723                           	psect	text22
  6724   001AFC                     __ptext22:
  6725                           	callstack 0
  6726   001AFC                     _Terminal_RXAvailable:
  6727                           	callstack 26
  6728                           
  6729                           ;incstack = 0
  6730   001AFC  AA9E               	btfss	158,5,c	;volatile
  6731   001AFE  D002               	goto	u3250
  6732   001B00  0E01               	movlw	1
  6733   001B02  0012               	return	
  6734   001B04                     u3250:
  6735   001B04  0E00               	movlw	0
  6736   001B06  0012               	return		;funcret
  6737   001B08                     __end_of_Terminal_RXAvailable:
  6738                           	callstack 0
  6739                           
  6740 ;; *************** function _motorTeclado *****************
  6741 ;; Defined at:
  6742 ;;		line 72 in file "TAD_TECLADO.c"
  6743 ;; Parameters:    Size  Location     Type
  6744 ;;		None
  6745 ;; Auto vars:     Size  Location     Type
  6746 ;;		None
  6747 ;; Return value:  Size  Location     Type
  6748 ;;                  1    wreg      void 
  6749 ;; Registers used:
  6750 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6751 ;; Tracked objects:
  6752 ;;		On entry : 0/0
  6753 ;;		On exit  : 0/0
  6754 ;;		Unchanged: 0/0
  6755 ;; Data sizes:     COMRAM   BANK0   BANK1
  6756 ;;      Params:         0       0       0
  6757 ;;      Locals:         0       0       0
  6758 ;;      Temps:          0       0       0
  6759 ;;      Totals:         0       0       0
  6760 ;;Total ram usage:        0 bytes
  6761 ;; Hardware stack levels used: 1
  6762 ;; Hardware stack levels required when called: 5
  6763 ;; This function calls:
  6764 ;;		_GetTecla
  6765 ;;		_TI_GetTics
  6766 ;;		_TI_ResetTics
  6767 ;;		_hashtag_pressed3s
  6768 ;;		_setLed
  6769 ;;		_writeColumnas
  6770 ;; This function is called by:
  6771 ;;		_main
  6772 ;; This function uses a non-reentrant model
  6773 ;;
  6774                           
  6775                           	psect	text23
  6776   000CD8                     __ptext23:
  6777                           	callstack 0
  6778   000CD8                     _motorTeclado:
  6779                           	callstack 25
  6780                           
  6781                           ;TAD_TECLADO.c: 74:     Filas = (PORTD & 0x0F);
  6782                           
  6783                           ;incstack = 0
  6784   000CD8  5083               	movf	131,w,c	;volatile
  6785   000CDA  0B0F               	andlw	15
  6786   000CDC  6E26               	movwf	_Filas^0,c
  6787                           
  6788                           ;TAD_TECLADO.c: 76:     switch(state) {
  6789   000CDE  D066               	goto	l4119
  6790   000CE0                     l4043:
  6791                           
  6792                           ;TAD_TECLADO.c: 78:             if (Filas) {
  6793   000CE0  5026               	movf	_Filas^0,w,c
  6794   000CE2  B4D8               	btfsc	status,2,c
  6795   000CE4  D006               	goto	l567
  6796                           
  6797                           ;TAD_TECLADO.c: 79:                 TI_ResetTics(timer);
  6798   000CE6  504A               	movf	_timer@TAD_TECLADO$F744^0,w,c
  6799   000CE8  ECE5  F00C         	call	_TI_ResetTics
  6800   000CEC                     l4047:
  6801                           
  6802                           ;TAD_TECLADO.c: 80:                 state = 3;
  6803   000CEC  0E03               	movlw	3
  6804   000CEE  6E23               	movwf	_state^0,c
  6805                           
  6806                           ;TAD_TECLADO.c: 81:             } else {
  6807   000CF0  0012               	return	
  6808   000CF2                     l567:
  6809                           
  6810                           ;TAD_TECLADO.c: 82:                 Columnas = 0;
  6811   000CF2  6A25               	clrf	_Columnas^0,c
  6812                           
  6813                           ;TAD_TECLADO.c: 83:                 writeColumnas();
  6814   000CF4  EC21  F00D         	call	_writeColumnas	;wreg free
  6815                           
  6816                           ;TAD_TECLADO.c: 84:                 state = 1;
  6817   000CF8  0E01               	movlw	1
  6818   000CFA  6E23               	movwf	_state^0,c
  6819   000CFC  0012               	return	
  6820   000CFE                     l4053:
  6821                           
  6822                           ;TAD_TECLADO.c: 89:             if (Filas) {
  6823   000CFE  5026               	movf	_Filas^0,w,c
  6824   000D00  B4D8               	btfsc	status,2,c
  6825   000D02  D004               	goto	l4059
  6826                           
  6827                           ;TAD_TECLADO.c: 90:                 TI_ResetTics(timer);
  6828   000D04  504A               	movf	_timer@TAD_TECLADO$F744^0,w,c
  6829   000D06  ECE5  F00C         	call	_TI_ResetTics
  6830   000D0A  D7F0               	goto	l4047
  6831   000D0C                     l4059:
  6832                           
  6833                           ;TAD_TECLADO.c: 93:                 Columnas = 1;
  6834   000D0C  0E01               	movlw	1
  6835   000D0E  6E25               	movwf	_Columnas^0,c
  6836                           
  6837                           ;TAD_TECLADO.c: 94:                 writeColumnas();
  6838   000D10  EC21  F00D         	call	_writeColumnas	;wreg free
  6839                           
  6840                           ;TAD_TECLADO.c: 95:                 state = 2;
  6841   000D14  0E02               	movlw	2
  6842   000D16  6E23               	movwf	_state^0,c
  6843   000D18  0012               	return	
  6844   000D1A                     l4065:
  6845                           
  6846                           ;TAD_TECLADO.c: 100:             if (Filas) {
  6847   000D1A  5026               	movf	_Filas^0,w,c
  6848   000D1C  B4D8               	btfsc	status,2,c
  6849   000D1E  D004               	goto	l4071
  6850                           
  6851                           ;TAD_TECLADO.c: 101:                 TI_ResetTics(timer);
  6852   000D20  504A               	movf	_timer@TAD_TECLADO$F744^0,w,c
  6853   000D22  ECE5  F00C         	call	_TI_ResetTics
  6854   000D26  D7E2               	goto	l4047
  6855   000D28                     l4071:
  6856                           
  6857                           ;TAD_TECLADO.c: 104:                 Columnas = 2;
  6858   000D28  0E02               	movlw	2
  6859   000D2A  6E25               	movwf	_Columnas^0,c
  6860                           
  6861                           ;TAD_TECLADO.c: 105:                 writeColumnas();
  6862   000D2C  EC21  F00D         	call	_writeColumnas	;wreg free
  6863   000D30                     l4075:
  6864                           
  6865                           ;TAD_TECLADO.c: 106:                 state = 0;
  6866   000D30  6A23               	clrf	_state^0,c
  6867   000D32  0012               	return	
  6868   000D34                     l4077:
  6869                           
  6870                           ;TAD_TECLADO.c: 111:             tecla = GetTecla();
  6871   000D34  EC08  F00B         	call	_GetTecla	;wreg free
  6872   000D38  6E24               	movwf	_tecla^0,c
  6873                           
  6874                           ;TAD_TECLADO.c: 112:             if (!Filas) {
  6875   000D3A  5026               	movf	_Filas^0,w,c
  6876   000D3C  B4D8               	btfsc	status,2,c
  6877   000D3E  D7F4               	goto	l4071
  6878   000D40  504A               	movf	_timer@TAD_TECLADO$F744^0,w,c
  6879   000D42  ECE4  F00B         	call	_TI_GetTics
  6880   000D46  5059               	movf	(?_TI_GetTics+3)^0,w,c
  6881   000D48  1058               	iorwf	(?_TI_GetTics+2)^0,w,c
  6882   000D4A  1057               	iorwf	(?_TI_GetTics+1)^0,w,c
  6883   000D4C  E104               	bnz	u3480
  6884   000D4E  0E05               	movlw	5
  6885   000D50  5C56               	subwf	?_TI_GetTics^0,w,c
  6886   000D52  A0D8               	btfss	status,0,c
  6887   000D54  0012               	return	
  6888   000D56                     u3480:
  6889                           
  6890                           ;TAD_TECLADO.c: 117:                 if (tecla != 0x0B) {
  6891   000D56  0E0B               	movlw	11
  6892   000D58  1824               	xorwf	_tecla^0,w,c
  6893   000D5A  B4D8               	btfsc	status,2,c
  6894   000D5C  D006               	goto	l4095
  6895                           
  6896                           ;TAD_TECLADO.c: 118:                     setLed(tecla);
  6897   000D5E  5024               	movf	_tecla^0,w,c
  6898   000D60  ECAA  F00C         	call	_setLed
  6899   000D64                     l4093:
  6900                           
  6901                           ;TAD_TECLADO.c: 119:                     state = 5;
  6902   000D64  0E05               	movlw	5
  6903   000D66  6E23               	movwf	_state^0,c
  6904                           
  6905                           ;TAD_TECLADO.c: 120:                 } else {
  6906   000D68  0012               	return	
  6907   000D6A                     l4095:
  6908                           
  6909                           ;TAD_TECLADO.c: 121:                     TI_ResetTics(timer);
  6910   000D6A  504A               	movf	_timer@TAD_TECLADO$F744^0,w,c
  6911   000D6C  ECE5  F00C         	call	_TI_ResetTics
  6912                           
  6913                           ;TAD_TECLADO.c: 122:                     state = 4;
  6914   000D70  0E04               	movlw	4
  6915   000D72  6E23               	movwf	_state^0,c
  6916   000D74  0012               	return	
  6917   000D76                     l4099:
  6918                           
  6919                           ;TAD_TECLADO.c: 128:             if (!Filas) {
  6920   000D76  5026               	movf	_Filas^0,w,c
  6921   000D78  B4D8               	btfsc	status,2,c
  6922   000D7A  D7DA               	goto	l4075
  6923   000D7C  504A               	movf	_timer@TAD_TECLADO$F744^0,w,c
  6924   000D7E  ECE4  F00B         	call	_TI_GetTics
  6925   000D82  5059               	movf	(?_TI_GetTics+3)^0,w,c
  6926   000D84  1058               	iorwf	(?_TI_GetTics+2)^0,w,c
  6927   000D86  E106               	bnz	u3510
  6928   000D88  0EDD               	movlw	221
  6929   000D8A  5C56               	subwf	?_TI_GetTics^0,w,c
  6930   000D8C  0E05               	movlw	5
  6931   000D8E  5857               	subwfb	(?_TI_GetTics+1)^0,w,c
  6932   000D90  A0D8               	btfss	status,0,c
  6933   000D92  0012               	return	
  6934   000D94                     u3510:
  6935                           
  6936                           ;TAD_TECLADO.c: 131:                 hashtag_pressed3s();
  6937   000D94  EC94  F00D         	call	_hashtag_pressed3s	;wreg free
  6938   000D98  D7E5               	goto	l4093
  6939   000D9A                     l4109:
  6940                           
  6941                           ;TAD_TECLADO.c: 137:             if (!Filas) {
  6942   000D9A  5026               	movf	_Filas^0,w,c
  6943   000D9C  A4D8               	btfss	status,2,c
  6944   000D9E  0012               	return	
  6945                           
  6946                           ;TAD_TECLADO.c: 138:                 state = 0;
  6947   000DA0  6A23               	clrf	_state^0,c
  6948                           
  6949                           ;TAD_TECLADO.c: 139:                 Columnas = 2;
  6950   000DA2  0E02               	movlw	2
  6951   000DA4  6E25               	movwf	_Columnas^0,c
  6952                           
  6953                           ;TAD_TECLADO.c: 140:                 writeColumnas();
  6954   000DA6  EC21  F00D         	call	_writeColumnas	;wreg free
  6955   000DAA  0012               	return	
  6956   000DAC                     l4119:
  6957   000DAC  5023               	movf	_state^0,w,c
  6958                           
  6959                           ; Switch size 1, requested type "simple"
  6960                           ; Number of cases is 6, Range of values is 0 to 5
  6961                           ; switch strategies available:
  6962                           ; Name         Instructions Cycles
  6963                           ; simple_byte           19    10 (average)
  6964                           ;	Chosen strategy is simple_byte
  6965   000DAE  0A00               	xorlw	0	; case 0
  6966   000DB0  B4D8               	btfsc	status,2,c
  6967   000DB2  D796               	goto	l4043
  6968   000DB4  0A01               	xorlw	1	; case 1
  6969   000DB6  B4D8               	btfsc	status,2,c
  6970   000DB8  D7A2               	goto	l4053
  6971   000DBA  0A03               	xorlw	3	; case 2
  6972   000DBC  B4D8               	btfsc	status,2,c
  6973   000DBE  D7AD               	goto	l4065
  6974   000DC0  0A01               	xorlw	1	; case 3
  6975   000DC2  B4D8               	btfsc	status,2,c
  6976   000DC4  D7B7               	goto	l4077
  6977   000DC6  0A07               	xorlw	7	; case 4
  6978   000DC8  B4D8               	btfsc	status,2,c
  6979   000DCA  D7D5               	goto	l4099
  6980   000DCC  0A01               	xorlw	1	; case 5
  6981   000DCE  A4D8               	btfss	status,2,c
  6982   000DD0  0012               	return	
  6983   000DD2  D7E3               	goto	l4109
  6984   000DD4                     __end_of_motorTeclado:
  6985                           	callstack 0
  6986                           
  6987 ;; *************** function _writeColumnas *****************
  6988 ;; Defined at:
  6989 ;;		line 43 in file "TAD_TECLADO.c"
  6990 ;; Parameters:    Size  Location     Type
  6991 ;;		None
  6992 ;; Auto vars:     Size  Location     Type
  6993 ;;		None
  6994 ;; Return value:  Size  Location     Type
  6995 ;;                  1    wreg      void 
  6996 ;; Registers used:
  6997 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  6998 ;; Tracked objects:
  6999 ;;		On entry : 0/0
  7000 ;;		On exit  : 0/0
  7001 ;;		Unchanged: 0/0
  7002 ;; Data sizes:     COMRAM   BANK0   BANK1
  7003 ;;      Params:         0       0       0
  7004 ;;      Locals:         0       0       0
  7005 ;;      Temps:          0       0       0
  7006 ;;      Totals:         0       0       0
  7007 ;;Total ram usage:        0 bytes
  7008 ;; Hardware stack levels used: 1
  7009 ;; Hardware stack levels required when called: 3
  7010 ;; This function calls:
  7011 ;;		Nothing
  7012 ;; This function is called by:
  7013 ;;		_motorTeclado
  7014 ;; This function uses a non-reentrant model
  7015 ;;
  7016                           
  7017                           	psect	text24
  7018   001A42                     __ptext24:
  7019                           	callstack 0
  7020   001A42                     _writeColumnas:
  7021                           	callstack 26
  7022                           
  7023                           ;TAD_TECLADO.c: 44:     if (Columnas < 3) {
  7024                           
  7025                           ;incstack = 0
  7026   001A42  0E03               	movlw	3
  7027   001A44  6025               	cpfslt	_Columnas^0,c
  7028   001A46  D007               	goto	l550
  7029                           
  7030                           ;TAD_TECLADO.c: 45:         LATD = colValues[Columnas];
  7031   001A48  5025               	movf	_Columnas^0,w,c
  7032   001A4A  0F77               	addlw	low _colValues
  7033   001A4C  6ED9               	movwf	fsr2l,c
  7034   001A4E  6ADA               	clrf	fsr2h,c
  7035   001A50  50DF               	movf	indf2,w,c
  7036   001A52  6E8C               	movwf	140,c	;volatile
  7037                           
  7038                           ;TAD_TECLADO.c: 46:     } else {
  7039   001A54  0012               	return	
  7040   001A56                     l550:
  7041                           
  7042                           ;TAD_TECLADO.c: 47:         LATD = 0;
  7043   001A56  6A8C               	clrf	140,c	;volatile
  7044   001A58  0012               	return		;funcret
  7045   001A5A                     __end_of_writeColumnas:
  7046                           	callstack 0
  7047                           
  7048 ;; *************** function _setLed *****************
  7049 ;; Defined at:
  7050 ;;		line 199 in file "TAD_DATOS.c"
  7051 ;; Parameters:    Size  Location     Type
  7052 ;;  tecla           1    wreg     unsigned char 
  7053 ;; Auto vars:     Size  Location     Type
  7054 ;;  tecla           1    4[COMRAM] unsigned char 
  7055 ;; Return value:  Size  Location     Type
  7056 ;;                  1    wreg      void 
  7057 ;; Registers used:
  7058 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7059 ;; Tracked objects:
  7060 ;;		On entry : 0/0
  7061 ;;		On exit  : 0/0
  7062 ;;		Unchanged: 0/0
  7063 ;; Data sizes:     COMRAM   BANK0   BANK1
  7064 ;;      Params:         0       0       0
  7065 ;;      Locals:         1       0       0
  7066 ;;      Temps:          0       0       0
  7067 ;;      Totals:         1       0       0
  7068 ;;Total ram usage:        1 bytes
  7069 ;; Hardware stack levels used: 1
  7070 ;; Hardware stack levels required when called: 4
  7071 ;; This function calls:
  7072 ;;		_setLEDIntensity
  7073 ;; This function is called by:
  7074 ;;		_motorTeclado
  7075 ;; This function uses a non-reentrant model
  7076 ;;
  7077                           
  7078                           	psect	text25
  7079   001954                     __ptext25:
  7080                           	callstack 0
  7081   001954                     _setLed:
  7082                           	callstack 25
  7083                           
  7084                           ;incstack = 0
  7085                           ;setLed@tecla stored from wreg
  7086   001954  6E59               	movwf	setLed@tecla^0,c
  7087                           
  7088                           ;TAD_DATOS.c: 200:     static char modeLED = 0;;TAD_DATOS.c: 201:     static char ledInd
      +                          ex = 0;;TAD_DATOS.c: 203:     if(!modeLED) {
  7089   001956  5016               	movf	setLed@modeLED^0,w,c
  7090   001958  A4D8               	btfss	status,2,c
  7091   00195A  D005               	goto	l3855
  7092                           
  7093                           ;TAD_DATOS.c: 204:         ledIndex = tecla - 1;
  7094   00195C  0459               	decf	setLed@tecla^0,w,c
  7095   00195E  6E15               	movwf	setLed@ledIndex^0,c
  7096                           
  7097                           ;TAD_DATOS.c: 205:         modeLED = 1;
  7098   001960  0E01               	movlw	1
  7099   001962  6E16               	movwf	setLed@modeLED^0,c
  7100                           
  7101                           ;TAD_DATOS.c: 206:     } else {
  7102   001964  0012               	return	
  7103   001966                     l3855:
  7104                           
  7105                           ;TAD_DATOS.c: 207:         setLEDIntensity(index, ledIndex, tecla);
  7106   001966  C015  F056         	movff	setLed@ledIndex,setLEDIntensity@ledIndex
  7107   00196A  C059  F057         	movff	setLed@tecla,setLEDIntensity@intensity
  7108   00196E  507C               	movf	_index^0,w,c
  7109   001970  ECBE  F00C         	call	_setLEDIntensity
  7110                           
  7111                           ;TAD_DATOS.c: 208:         new_configuration = 1;
  7112   001974  0E01               	movlw	1
  7113   001976  6E1C               	movwf	_new_configuration^0,c
  7114                           
  7115                           ;TAD_DATOS.c: 209:         modeLED = 0;
  7116   001978  6A16               	clrf	setLed@modeLED^0,c
  7117   00197A  0012               	return		;funcret
  7118   00197C                     __end_of_setLed:
  7119                           	callstack 0
  7120                           
  7121 ;; *************** function _setLEDIntensity *****************
  7122 ;; Defined at:
  7123 ;;		line 192 in file "TAD_DATOS.c"
  7124 ;; Parameters:    Size  Location     Type
  7125 ;;  userIndex       1    wreg     unsigned char 
  7126 ;;  ledIndex        1    1[COMRAM] unsigned char 
  7127 ;;  intensity       1    2[COMRAM] unsigned char 
  7128 ;; Auto vars:     Size  Location     Type
  7129 ;;  userIndex       1    3[COMRAM] unsigned char 
  7130 ;; Return value:  Size  Location     Type
  7131 ;;                  1    wreg      void 
  7132 ;; Registers used:
  7133 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  7134 ;; Tracked objects:
  7135 ;;		On entry : 0/0
  7136 ;;		On exit  : 0/0
  7137 ;;		Unchanged: 0/0
  7138 ;; Data sizes:     COMRAM   BANK0   BANK1
  7139 ;;      Params:         2       0       0
  7140 ;;      Locals:         1       0       0
  7141 ;;      Temps:          0       0       0
  7142 ;;      Totals:         3       0       0
  7143 ;;Total ram usage:        3 bytes
  7144 ;; Hardware stack levels used: 1
  7145 ;; Hardware stack levels required when called: 3
  7146 ;; This function calls:
  7147 ;;		Nothing
  7148 ;; This function is called by:
  7149 ;;		_setLed
  7150 ;; This function uses a non-reentrant model
  7151 ;;
  7152                           
  7153                           	psect	text26
  7154   00197C                     __ptext26:
  7155                           	callstack 0
  7156   00197C                     _setLEDIntensity:
  7157                           	callstack 25
  7158                           
  7159                           ;incstack = 0
  7160                           ;setLEDIntensity@userIndex stored from wreg
  7161   00197C  6E58               	movwf	setLEDIntensity@userIndex^0,c
  7162                           
  7163                           ;TAD_DATOS.c: 193:     if(userIndex < 4 && ledIndex < 6 && intensity <= 0xA) {
  7164   00197E  0E04               	movlw	4
  7165   001980  6058               	cpfslt	setLEDIntensity@userIndex^0,c
  7166   001982  0012               	return	
  7167   001984  0E06               	movlw	6
  7168   001986  6056               	cpfslt	setLEDIntensity@ledIndex^0,c
  7169   001988  0012               	return	
  7170   00198A  0E0B               	movlw	11
  7171   00198C  6057               	cpfslt	setLEDIntensity@intensity^0,c
  7172   00198E  0012               	return	
  7173                           
  7174                           ;TAD_DATOS.c: 194:         configurations[userIndex][ledIndex] = intensity;
  7175   001990  5058               	movf	setLEDIntensity@userIndex^0,w,c
  7176   001992  0D06               	mullw	6
  7177   001994  50F3               	movf	243,w,c
  7178   001996  0F80               	addlw	low _configurations
  7179   001998  2456               	addwf	setLEDIntensity@ledIndex^0,w,c
  7180   00199A  6ED9               	movwf	fsr2l,c
  7181   00199C  6ADA               	clrf	fsr2h,c
  7182   00199E  C057  FFDF         	movff	setLEDIntensity@intensity,indf2
  7183   0019A2  0012               	return		;funcret
  7184   0019A4                     __end_of_setLEDIntensity:
  7185                           	callstack 0
  7186                           
  7187 ;; *************** function _hashtag_pressed3s *****************
  7188 ;; Defined at:
  7189 ;;		line 65 in file "TAD_TERMINAL.c"
  7190 ;; Parameters:    Size  Location     Type
  7191 ;;		None
  7192 ;; Auto vars:     Size  Location     Type
  7193 ;;		None
  7194 ;; Return value:  Size  Location     Type
  7195 ;;                  1    wreg      void 
  7196 ;; Registers used:
  7197 ;;		wreg, status,2
  7198 ;; Tracked objects:
  7199 ;;		On entry : 0/0
  7200 ;;		On exit  : 0/0
  7201 ;;		Unchanged: 0/0
  7202 ;; Data sizes:     COMRAM   BANK0   BANK1
  7203 ;;      Params:         0       0       0
  7204 ;;      Locals:         0       0       0
  7205 ;;      Temps:          0       0       0
  7206 ;;      Totals:         0       0       0
  7207 ;;Total ram usage:        0 bytes
  7208 ;; Hardware stack levels used: 1
  7209 ;; Hardware stack levels required when called: 3
  7210 ;; This function calls:
  7211 ;;		Nothing
  7212 ;; This function is called by:
  7213 ;;		_motorTeclado
  7214 ;; This function uses a non-reentrant model
  7215 ;;
  7216                           
  7217                           	psect	text27
  7218   001B28                     __ptext27:
  7219                           	callstack 0
  7220   001B28                     _hashtag_pressed3s:
  7221                           	callstack 26
  7222                           
  7223                           ;incstack = 0
  7224   001B28  0E01               	movlw	1
  7225   001B2A  6E21               	movwf	_hashtag_pressed^0,c
  7226   001B2C  0012               	return		;funcret
  7227   001B2E                     __end_of_hashtag_pressed3s:
  7228                           	callstack 0
  7229                           
  7230 ;; *************** function _GetTecla *****************
  7231 ;; Defined at:
  7232 ;;		line 52 in file "TAD_TECLADO.c"
  7233 ;; Parameters:    Size  Location     Type
  7234 ;;		None
  7235 ;; Auto vars:     Size  Location     Type
  7236 ;;  fila            1    4[COMRAM] unsigned char 
  7237 ;;  columna         1    3[COMRAM] unsigned char 
  7238 ;; Return value:  Size  Location     Type
  7239 ;;                  1    wreg      unsigned char 
  7240 ;; Registers used:
  7241 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
  7242 ;; Tracked objects:
  7243 ;;		On entry : 0/0
  7244 ;;		On exit  : 0/0
  7245 ;;		Unchanged: 0/0
  7246 ;; Data sizes:     COMRAM   BANK0   BANK1
  7247 ;;      Params:         0       0       0
  7248 ;;      Locals:         2       0       0
  7249 ;;      Temps:          2       0       0
  7250 ;;      Totals:         4       0       0
  7251 ;;Total ram usage:        4 bytes
  7252 ;; Hardware stack levels used: 1
  7253 ;; Hardware stack levels required when called: 3
  7254 ;; This function calls:
  7255 ;;		Nothing
  7256 ;; This function is called by:
  7257 ;;		_motorTeclado
  7258 ;; This function uses a non-reentrant model
  7259 ;;
  7260                           
  7261                           	psect	text28
  7262   001610                     __ptext28:
  7263                           	callstack 0
  7264   001610                     _GetTecla:
  7265                           	callstack 26
  7266                           
  7267                           ;incstack = 0
  7268   001610  6A58               	clrf	GetTecla@columna^0,c
  7269                           
  7270                           ;TAD_TECLADO.c: 56:     switch(Filas) {
  7271   001612  D00B               	goto	l2267
  7272   001614                     l556:
  7273   001614  6A59               	clrf	GetTecla@fila^0,c
  7274   001616  D017               	goto	l557
  7275   001618                     l2255:
  7276   001618  0E01               	movlw	1
  7277   00161A  D003               	goto	L16
  7278   00161C                     l2257:
  7279   00161C  0E02               	movlw	2
  7280   00161E  D001               	goto	L16
  7281   001620                     l2259:
  7282   001620  0E03               	movlw	3
  7283   001622                     L16:
  7284   001622  6E59               	movwf	GetTecla@fila^0,c
  7285   001624  D010               	goto	l557
  7286   001626                     l2261:
  7287   001626  0EFF               	movlw	255
  7288   001628  0012               	return	
  7289   00162A                     l2267:
  7290   00162A  5026               	movf	_Filas^0,w,c
  7291                           
  7292                           ; Switch size 1, requested type "simple"
  7293                           ; Number of cases is 4, Range of values is 1 to 8
  7294                           ; switch strategies available:
  7295                           ; Name         Instructions Cycles
  7296                           ; simple_byte           13     7 (average)
  7297                           ;	Chosen strategy is simple_byte
  7298   00162C  0A01               	xorlw	1	; case 1
  7299   00162E  B4D8               	btfsc	status,2,c
  7300   001630  D7F1               	goto	l556
  7301   001632  0A03               	xorlw	3	; case 2
  7302   001634  B4D8               	btfsc	status,2,c
  7303   001636  D7F0               	goto	l2255
  7304   001638  0A06               	xorlw	6	; case 4
  7305   00163A  B4D8               	btfsc	status,2,c
  7306   00163C  D7EF               	goto	l2257
  7307   00163E  0A0C               	xorlw	12	; case 8
  7308   001640  B4D8               	btfsc	status,2,c
  7309   001642  D7EE               	goto	l2259
  7310   001644  D7F0               	goto	l2261
  7311   001646                     l557:
  7312                           
  7313                           ;TAD_TECLADO.c: 65:     columna = Columnas;
  7314   001646  C025  F058         	movff	_Columnas,GetTecla@columna
  7315                           
  7316                           ;TAD_TECLADO.c: 68:     return keymap[fila * 3 + columna];
  7317   00164A  5059               	movf	GetTecla@fila^0,w,c
  7318   00164C  0D03               	mullw	3
  7319   00164E  0E7C               	movlw	low _keymap
  7320   001650  24F3               	addwf	243,w,c
  7321   001652  6E56               	movwf	??_GetTecla^0,c
  7322   001654  0E1E               	movlw	high _keymap
  7323   001656  20F4               	addwfc	prodh,w,c
  7324   001658  6E57               	movwf	(??_GetTecla+1)^0,c
  7325   00165A  5058               	movf	GetTecla@columna^0,w,c
  7326   00165C  2656               	addwf	??_GetTecla^0,f,c
  7327   00165E  0E00               	movlw	0
  7328   001660  2257               	addwfc	(??_GetTecla+1)^0,f,c
  7329   001662  C056  FFF6         	movff	??_GetTecla,tblptrl
  7330   001666  C057  FFF7         	movff	??_GetTecla+1,tblptrh
  7331   00166A                     	if	0	;tblptru may be non-zero
  7332   00166A                     	endif
  7333   00166A                     	if	0	;tblptru may be non-zero
  7334   00166A                     	endif
  7335   00166A  0008               	tblrd		*
  7336   00166C  50F5               	movf	tablat,w,c
  7337   00166E  0012               	return		;funcret
  7338   001670                     __end_of_GetTecla:
  7339                           	callstack 0
  7340                           
  7341 ;; *************** function _initTeclado *****************
  7342 ;; Defined at:
  7343 ;;		line 30 in file "TAD_TECLADO.c"
  7344 ;; Parameters:    Size  Location     Type
  7345 ;;		None
  7346 ;; Auto vars:     Size  Location     Type
  7347 ;;		None
  7348 ;; Return value:  Size  Location     Type
  7349 ;;                  1    wreg      void 
  7350 ;; Registers used:
  7351 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7352 ;; Tracked objects:
  7353 ;;		On entry : 0/0
  7354 ;;		On exit  : 0/0
  7355 ;;		Unchanged: 0/0
  7356 ;; Data sizes:     COMRAM   BANK0   BANK1
  7357 ;;      Params:         0       0       0
  7358 ;;      Locals:         0       0       0
  7359 ;;      Temps:          0       0       0
  7360 ;;      Totals:         0       0       0
  7361 ;;Total ram usage:        0 bytes
  7362 ;; Hardware stack levels used: 1
  7363 ;; Hardware stack levels required when called: 4
  7364 ;; This function calls:
  7365 ;;		_TI_NewTimer
  7366 ;; This function is called by:
  7367 ;;		_main
  7368 ;; This function uses a non-reentrant model
  7369 ;;
  7370                           
  7371                           	psect	text29
  7372   001A5A                     __ptext29:
  7373                           	callstack 0
  7374   001A5A                     _initTeclado:
  7375                           	callstack 26
  7376                           
  7377                           ;TAD_TECLADO.c: 32:     TRISD = 0x0F;
  7378                           
  7379                           ;incstack = 0
  7380   001A5A  0E0F               	movlw	15
  7381   001A5C  6E95               	movwf	149,c	;volatile
  7382                           
  7383                           ;TAD_TECLADO.c: 33:     LATD = 0x00;
  7384   001A5E  6A8C               	clrf	140,c	;volatile
  7385                           
  7386                           ;TAD_TECLADO.c: 36:     Filas = Columnas = tecla = state = 0;
  7387   001A60  6A23               	clrf	_state^0,c
  7388   001A62  6A24               	clrf	_tecla^0,c
  7389   001A64  6A25               	clrf	_Columnas^0,c
  7390   001A66  6A26               	clrf	_Filas^0,c
  7391                           
  7392                           ;TAD_TECLADO.c: 39:     TI_NewTimer(&timer);
  7393   001A68  0E4A               	movlw	low _timer@TAD_TECLADO$F744
  7394   001A6A  6E56               	movwf	TI_NewTimer@TimerHandle^0,c
  7395   001A6C  EC2B  F00C         	call	_TI_NewTimer	;wreg free
  7396   001A70  0012               	return		;funcret
  7397   001A72                     __end_of_initTeclado:
  7398                           	callstack 0
  7399                           
  7400 ;; *************** function _initRFID *****************
  7401 ;; Defined at:
  7402 ;;		line 126 in file "TAD_RFID.c"
  7403 ;; Parameters:    Size  Location     Type
  7404 ;;		None
  7405 ;; Auto vars:     Size  Location     Type
  7406 ;;  regVal          1   12[COMRAM] unsigned char 
  7407 ;; Return value:  Size  Location     Type
  7408 ;;                  1    wreg      void 
  7409 ;; Registers used:
  7410 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7411 ;; Tracked objects:
  7412 ;;		On entry : 0/0
  7413 ;;		On exit  : 0/0
  7414 ;;		Unchanged: 0/0
  7415 ;; Data sizes:     COMRAM   BANK0   BANK1
  7416 ;;      Params:         0       0       0
  7417 ;;      Locals:         1       0       0
  7418 ;;      Temps:          0       0       0
  7419 ;;      Totals:         1       0       0
  7420 ;;Total ram usage:        1 bytes
  7421 ;; Hardware stack levels used: 1
  7422 ;; Hardware stack levels required when called: 6
  7423 ;; This function calls:
  7424 ;;		_TI_NewTimer
  7425 ;;		_TI_ResetTics
  7426 ;;		_delay_us
  7427 ;;		_motor_Read
  7428 ;;		_motor_Write
  7429 ;; This function is called by:
  7430 ;;		_main
  7431 ;; This function uses a non-reentrant model
  7432 ;;
  7433                           
  7434                           	psect	text30
  7435   000F96                     __ptext30:
  7436                           	callstack 0
  7437   000F96                     _initRFID:
  7438                           	callstack 24
  7439                           
  7440                           ;TAD_RFID.c: 128:     TRISCbits.TRISC0 = 1;
  7441                           
  7442                           ;incstack = 0
  7443   000F96  8094               	bsf	148,0,c	;volatile
  7444                           
  7445                           ;TAD_RFID.c: 129:     TRISCbits.TRISC1 = 0;
  7446   000F98  9294               	bcf	148,1,c	;volatile
  7447                           
  7448                           ;TAD_RFID.c: 130:     TRISCbits.TRISC2 = 0;
  7449   000F9A  9494               	bcf	148,2,c	;volatile
  7450                           
  7451                           ;TAD_RFID.c: 131:     TRISCbits.TRISC3 = 0;
  7452   000F9C  9694               	bcf	148,3,c	;volatile
  7453                           
  7454                           ;TAD_RFID.c: 132:     TRISCbits.TRISC4 = 0;
  7455   000F9E  9894               	bcf	148,4,c	;volatile
  7456                           
  7457                           ;TAD_RFID.c: 134:     state_read = state_write = 0;
  7458   000FA0  6A51               	clrf	_state_write^0,c
  7459   000FA2  6A52               	clrf	_state_read^0,c
  7460                           
  7461                           ;TAD_RFID.c: 135:     LATCbits.LATC3 = LATCbits.LATC2 = 1;
  7462   000FA4  848B               	bsf	139,2,c	;volatile
  7463   000FA6  868B               	bsf	139,3,c	;volatile
  7464                           
  7465                           ;TAD_RFID.c: 136:     LATCbits.LATC4 = 1;
  7466   000FA8  888B               	bsf	139,4,c	;volatile
  7467                           
  7468                           ;TAD_RFID.c: 137:     delay_us(1);
  7469   000FAA  0E01               	movlw	1
  7470   000FAC  EC39  F00D         	call	_delay_us
  7471                           
  7472                           ;TAD_RFID.c: 138:     LATCbits.LATC4 = 0;
  7473   000FB0  988B               	bcf	139,4,c	;volatile
  7474                           
  7475                           ;TAD_RFID.c: 139:     delay_us(1);
  7476   000FB2  0E01               	movlw	1
  7477   000FB4  EC39  F00D         	call	_delay_us
  7478                           
  7479                           ;TAD_RFID.c: 140:     LATCbits.LATC4 = 1;
  7480   000FB8  888B               	bsf	139,4,c	;volatile
  7481                           
  7482                           ;TAD_RFID.c: 141:     delay_us(1);
  7483   000FBA  0E01               	movlw	1
  7484   000FBC  EC39  F00D         	call	_delay_us
  7485   000FC0                     l3921:
  7486   000FC0  0E0F               	movlw	15
  7487   000FC2  6E5D               	movwf	motor_Write@value^0,c
  7488   000FC4  0E01               	movlw	1
  7489   000FC6  EC6E  F00A         	call	_motor_Write
  7490   000FCA  0900               	iorlw	0
  7491   000FCC  B4D8               	btfsc	status,2,c
  7492   000FCE  D7F8               	goto	l3921
  7493                           
  7494                           ;TAD_RFID.c: 145:     delay_us(1);
  7495   000FD0  0E01               	movlw	1
  7496   000FD2  EC39  F00D         	call	_delay_us
  7497   000FD6                     l3925:
  7498   000FD6  0E8D               	movlw	141
  7499   000FD8  6E5D               	movwf	motor_Write@value^0,c
  7500   000FDA  0E2A               	movlw	42
  7501   000FDC  EC6E  F00A         	call	_motor_Write
  7502   000FE0  0900               	iorlw	0
  7503   000FE2  B4D8               	btfsc	status,2,c
  7504   000FE4  D7F8               	goto	l3925
  7505   000FE6                     u3310:
  7506   000FE6  0E3E               	movlw	62
  7507   000FE8  6E5D               	movwf	motor_Write@value^0,c
  7508   000FEA  0E2B               	movlw	43
  7509   000FEC  EC6E  F00A         	call	_motor_Write
  7510   000FF0  0900               	iorlw	0
  7511   000FF2  B4D8               	btfsc	status,2,c
  7512   000FF4  D7F8               	goto	u3310
  7513   000FF6                     u3320:
  7514   000FF6  0E1E               	movlw	30
  7515   000FF8  6E5D               	movwf	motor_Write@value^0,c
  7516   000FFA  0E2D               	movlw	45
  7517   000FFC  EC6E  F00A         	call	_motor_Write
  7518   001000  0900               	iorlw	0
  7519   001002  B4D8               	btfsc	status,2,c
  7520   001004  D7F8               	goto	u3320
  7521   001006                     u3330:
  7522   001006  0E00               	movlw	0
  7523   001008  6E5D               	movwf	motor_Write@value^0,c
  7524   00100A  0E2C               	movlw	44
  7525   00100C  EC6E  F00A         	call	_motor_Write
  7526   001010  0900               	iorlw	0
  7527   001012  B4D8               	btfsc	status,2,c
  7528   001014  D7F8               	goto	u3330
  7529   001016                     u3340:
  7530   001016  0E40               	movlw	64
  7531   001018  6E5D               	movwf	motor_Write@value^0,c
  7532   00101A  0E15               	movlw	21
  7533   00101C  EC6E  F00A         	call	_motor_Write
  7534   001020  0900               	iorlw	0
  7535   001022  B4D8               	btfsc	status,2,c
  7536   001024  D7F8               	goto	u3340
  7537   001026                     u3350:
  7538   001026  0E3D               	movlw	61
  7539   001028  6E5D               	movwf	motor_Write@value^0,c
  7540   00102A  0E11               	movlw	17
  7541   00102C  EC6E  F00A         	call	_motor_Write
  7542   001030  0900               	iorlw	0
  7543   001032  B4D8               	btfsc	status,2,c
  7544   001034  D7F8               	goto	u3350
  7545   001036                     u3360:
  7546                           
  7547                           ;TAD_RFID.c: 158:         regVal = motor_Read(0x14);
  7548   001036  0E14               	movlw	20
  7549   001038  EC35  F008         	call	_motor_Read
  7550   00103C  6E61               	movwf	initRFID@regVal^0,c
  7551                           
  7552                           ;TAD_RFID.c: 159:     } while (regVal == 0xFE);
  7553   00103E  0EFE               	movlw	254
  7554   001040  1861               	xorwf	initRFID@regVal^0,w,c
  7555   001042  B4D8               	btfsc	status,2,c
  7556   001044  D7F8               	goto	u3360
  7557                           
  7558                           ;TAD_RFID.c: 160:     regVal |= 0x03;
  7559   001046  0E03               	movlw	3
  7560   001048  1261               	iorwf	initRFID@regVal^0,f,c
  7561   00104A                     l3943:
  7562   00104A  C061  F05D         	movff	initRFID@regVal,motor_Write@value
  7563   00104E  0E14               	movlw	20
  7564   001050  EC6E  F00A         	call	_motor_Write
  7565   001054  0900               	iorlw	0
  7566   001056  B4D8               	btfsc	status,2,c
  7567   001058  D7F8               	goto	l3943
  7568                           
  7569                           ;TAD_RFID.c: 164:     TI_NewTimer(&card_timer);
  7570   00105A  0E50               	movlw	low _card_timer
  7571   00105C  6E56               	movwf	TI_NewTimer@TimerHandle^0,c
  7572   00105E  EC2B  F00C         	call	_TI_NewTimer	;wreg free
  7573                           
  7574                           ;TAD_RFID.c: 165:     TI_ResetTics(card_timer);
  7575   001062  5050               	movf	_card_timer^0,w,c
  7576   001064  ECE5  F00C         	call	_TI_ResetTics
  7577   001068  0012               	return		;funcret
  7578   00106A                     __end_of_initRFID:
  7579                           	callstack 0
  7580                           
  7581 ;; *************** function _motor_Write *****************
  7582 ;; Defined at:
  7583 ;;		line 46 in file "TAD_RFID.c"
  7584 ;; Parameters:    Size  Location     Type
  7585 ;;  addr            1    wreg     unsigned char 
  7586 ;;  value           1    8[COMRAM] unsigned char 
  7587 ;; Auto vars:     Size  Location     Type
  7588 ;;  addr            1    9[COMRAM] unsigned char 
  7589 ;; Return value:  Size  Location     Type
  7590 ;;                  1    wreg      unsigned char 
  7591 ;; Registers used:
  7592 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7593 ;; Tracked objects:
  7594 ;;		On entry : 0/0
  7595 ;;		On exit  : 0/0
  7596 ;;		Unchanged: 0/0
  7597 ;; Data sizes:     COMRAM   BANK0   BANK1
  7598 ;;      Params:         1       0       0
  7599 ;;      Locals:         1       0       0
  7600 ;;      Temps:          0       0       0
  7601 ;;      Totals:         2       0       0
  7602 ;;Total ram usage:        2 bytes
  7603 ;; Hardware stack levels used: 1
  7604 ;; Hardware stack levels required when called: 5
  7605 ;; This function calls:
  7606 ;;		_processBit
  7607 ;; This function is called by:
  7608 ;;		_initRFID
  7609 ;;		_motor_RFID
  7610 ;; This function uses a non-reentrant model
  7611 ;;
  7612                           
  7613                           	psect	text31
  7614   0014DC                     __ptext31:
  7615                           	callstack 0
  7616   0014DC                     _motor_Write:
  7617                           	callstack 24
  7618                           
  7619                           ;incstack = 0
  7620                           ;motor_Write@addr stored from wreg
  7621   0014DC  6E5E               	movwf	motor_Write@addr^0,c
  7622                           
  7623                           ;TAD_RFID.c: 47:     static char bit_count = 0;;TAD_RFID.c: 48:     static unsigned char
      +                           ucAddr;;TAD_RFID.c: 49:     static unsigned char ucValue;;TAD_RFID.c: 51:     switch (s
      +                          tate_write) {
  7624   0014DE  D028               	goto	l3635
  7625   0014E0                     l268:
  7626                           
  7627                           ;TAD_RFID.c: 53:             LATCbits.LATC2 = 0;
  7628   0014E0  948B               	bcf	139,2,c	;volatile
  7629                           
  7630                           ;TAD_RFID.c: 54:             LATCbits.LATC3 = 0;
  7631   0014E2  968B               	bcf	139,3,c	;volatile
  7632                           
  7633                           ;TAD_RFID.c: 55:             ucAddr = ((addr << 1) & 0x7E);
  7634   0014E4  505E               	movf	motor_Write@addr^0,w,c
  7635   0014E6  245E               	addwf	motor_Write@addr^0,w,c
  7636   0014E8  0B7E               	andlw	126
  7637   0014EA  6E4E               	movwf	motor_Write@ucAddr^0,c
  7638                           
  7639                           ;TAD_RFID.c: 56:             ucValue = value;
  7640   0014EC  C05D  F04D         	movff	motor_Write@value,motor_Write@ucValue
  7641                           
  7642                           ;TAD_RFID.c: 57:             bit_count = 0;
  7643   0014F0  6A4F               	clrf	motor_Write@bit_count^0,c
  7644                           
  7645                           ;TAD_RFID.c: 58:             state_write = 1;
  7646   0014F2  0E01               	movlw	1
  7647   0014F4  6E51               	movwf	_state_write^0,c
  7648                           
  7649                           ;TAD_RFID.c: 59:             break;
  7650   0014F6  D026               	goto	l3637
  7651   0014F8                     l3621:
  7652                           
  7653                           ;TAD_RFID.c: 62:             processBit(&ucAddr, &bit_count, &state_write, 2);
  7654   0014F8  0E4E               	movlw	low motor_Write@ucAddr
  7655   0014FA  6E58               	movwf	processBit@val^0,c
  7656   0014FC  0E4F               	movlw	low motor_Write@bit_count
  7657   0014FE  6E59               	movwf	processBit@bit_count^0,c
  7658   001500  0E51               	movlw	low _state_write
  7659   001502  6E5A               	movwf	processBit@state^0,c
  7660   001504  0E02               	movlw	2
  7661   001506  6E5B               	movwf	processBit@next_state^0,c
  7662   001508  EC38  F00B         	call	_processBit	;wreg free
  7663                           
  7664                           ;TAD_RFID.c: 63:             break;
  7665   00150C  D01B               	goto	l3637
  7666   00150E                     l3623:
  7667                           
  7668                           ;TAD_RFID.c: 66:             processBit(&ucValue, &bit_count, &state_write, 0);
  7669   00150E  0E4D               	movlw	low motor_Write@ucValue
  7670   001510  6E58               	movwf	processBit@val^0,c
  7671   001512  0E4F               	movlw	low motor_Write@bit_count
  7672   001514  6E59               	movwf	processBit@bit_count^0,c
  7673   001516  0E51               	movlw	low _state_write
  7674   001518  6E5A               	movwf	processBit@state^0,c
  7675   00151A  0E00               	movlw	0
  7676   00151C  6E5B               	movwf	processBit@next_state^0,c
  7677   00151E  EC38  F00B         	call	_processBit	;wreg free
  7678                           
  7679                           ;TAD_RFID.c: 67:             if (state_write == 0) {
  7680   001522  5051               	movf	_state_write^0,w,c
  7681   001524  A4D8               	btfss	status,2,c
  7682   001526  D00E               	goto	l3637
  7683                           
  7684                           ;TAD_RFID.c: 68:                 LATCbits.LATC3 = 1;
  7685   001528  868B               	bsf	139,3,c	;volatile
  7686                           
  7687                           ;TAD_RFID.c: 69:                 LATCbits.LATC2 = 1;
  7688   00152A  848B               	bsf	139,2,c	;volatile
  7689                           
  7690                           ;TAD_RFID.c: 70:                 return 1;
  7691   00152C  0E01               	movlw	1
  7692   00152E  0012               	return	
  7693   001530                     l3635:
  7694   001530  5051               	movf	_state_write^0,w,c
  7695                           
  7696                           ; Switch size 1, requested type "simple"
  7697                           ; Number of cases is 3, Range of values is 0 to 2
  7698                           ; switch strategies available:
  7699                           ; Name         Instructions Cycles
  7700                           ; simple_byte           10     6 (average)
  7701                           ;	Chosen strategy is simple_byte
  7702   001532  0A00               	xorlw	0	; case 0
  7703   001534  B4D8               	btfsc	status,2,c
  7704   001536  D7D4               	goto	l268
  7705   001538  0A01               	xorlw	1	; case 1
  7706   00153A  B4D8               	btfsc	status,2,c
  7707   00153C  D7DD               	goto	l3621
  7708   00153E  0A03               	xorlw	3	; case 2
  7709   001540  B4D8               	btfsc	status,2,c
  7710   001542  D7E5               	goto	l3623
  7711   001544                     l3637:
  7712                           
  7713                           ;TAD_RFID.c: 74:     return 0;
  7714   001544  0E00               	movlw	0
  7715   001546  0012               	return		;funcret
  7716   001548                     __end_of_motor_Write:
  7717                           	callstack 0
  7718                           
  7719 ;; *************** function _motor_Read *****************
  7720 ;; Defined at:
  7721 ;;		line 78 in file "TAD_RFID.c"
  7722 ;; Parameters:    Size  Location     Type
  7723 ;;  addr            1    wreg     unsigned char 
  7724 ;; Auto vars:     Size  Location     Type
  7725 ;;  addr            1    9[COMRAM] unsigned char 
  7726 ;; Return value:  Size  Location     Type
  7727 ;;                  1    wreg      unsigned char 
  7728 ;; Registers used:
  7729 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7730 ;; Tracked objects:
  7731 ;;		On entry : 0/0
  7732 ;;		On exit  : 0/0
  7733 ;;		Unchanged: 0/0
  7734 ;; Data sizes:     COMRAM   BANK0   BANK1
  7735 ;;      Params:         0       0       0
  7736 ;;      Locals:         3       0       0
  7737 ;;      Temps:          1       0       0
  7738 ;;      Totals:         4       0       0
  7739 ;;Total ram usage:        4 bytes
  7740 ;; Hardware stack levels used: 1
  7741 ;; Hardware stack levels required when called: 5
  7742 ;; This function calls:
  7743 ;;		_delay_us
  7744 ;;		_processBit
  7745 ;; This function is called by:
  7746 ;;		_initRFID
  7747 ;;		_motor_RFID
  7748 ;; This function uses a non-reentrant model
  7749 ;;
  7750                           
  7751                           	psect	text32
  7752   00106A                     __ptext32:
  7753                           	callstack 0
  7754   00106A                     _motor_Read:
  7755                           	callstack 24
  7756                           
  7757                           ;incstack = 0
  7758                           ;motor_Read@addr stored from wreg
  7759   00106A  6E5E               	movwf	motor_Read@addr^0,c
  7760                           
  7761                           ;TAD_RFID.c: 79:     static char bit_count = 0;;TAD_RFID.c: 80:     static unsigned char
      +                           ucAddr;;TAD_RFID.c: 81:     static unsigned char ucResult;;TAD_RFID.c: 82:     static u
      +                          nsigned int timeout_counter = 0;;TAD_RFID.c: 83:     static unsigned int MAX_TIMEOUT = 1
      +                          000;;TAD_RFID.c: 85:     if (++timeout_counter > MAX_TIMEOUT) {
  7762   00106C  4A13               	infsnz	motor_Read@timeout_counter^0,f,c
  7763   00106E  2A14               	incf	(motor_Read@timeout_counter+1)^0,f,c
  7764   001070  0EE9               	movlw	233
  7765   001072  5C13               	subwf	motor_Read@timeout_counter^0,w,c
  7766   001074  0E03               	movlw	3
  7767   001076  5814               	subwfb	(motor_Read@timeout_counter+1)^0,w,c
  7768   001078  A0D8               	btfss	status,0,c
  7769   00107A  D053               	goto	l3703
  7770                           
  7771                           ;TAD_RFID.c: 86:         LATCbits.LATC3 = LATCbits.LATC2 = 1;
  7772   00107C  848B               	bsf	139,2,c	;volatile
  7773   00107E  868B               	bsf	139,3,c	;volatile
  7774                           
  7775                           ;TAD_RFID.c: 87:         state_read = 0;
  7776   001080  6A52               	clrf	_state_read^0,c
  7777                           
  7778                           ;TAD_RFID.c: 88:         timeout_counter = 0;
  7779   001082  0E00               	movlw	0
  7780   001084  6E14               	movwf	(motor_Read@timeout_counter+1)^0,c
  7781   001086  0E00               	movlw	0
  7782   001088  6E13               	movwf	motor_Read@timeout_counter^0,c
  7783                           
  7784                           ;TAD_RFID.c: 89:         return 0xFF;
  7785   00108A  0EFF               	movlw	255
  7786   00108C  0012               	return	
  7787   00108E                     l3651:
  7788                           
  7789                           ;TAD_RFID.c: 94:             timeout_counter = 0;
  7790   00108E  0E00               	movlw	0
  7791   001090  6E14               	movwf	(motor_Read@timeout_counter+1)^0,c
  7792   001092  0E00               	movlw	0
  7793   001094  6E13               	movwf	motor_Read@timeout_counter^0,c
  7794                           
  7795                           ;TAD_RFID.c: 95:             LATCbits.LATC2 = 0;
  7796   001096  948B               	bcf	139,2,c	;volatile
  7797                           
  7798                           ;TAD_RFID.c: 96:             LATCbits.LATC3 = 0;
  7799   001098  968B               	bcf	139,3,c	;volatile
  7800                           
  7801                           ;TAD_RFID.c: 97:             ucAddr = ((addr<<1) & 0x7E) | 0x80;
  7802   00109A  505E               	movf	motor_Read@addr^0,w,c
  7803   00109C  245E               	addwf	motor_Read@addr^0,w,c
  7804   00109E  0B7E               	andlw	126
  7805   0010A0  0980               	iorlw	128
  7806   0010A2  6E4B               	movwf	motor_Read@ucAddr^0,c
  7807                           
  7808                           ;TAD_RFID.c: 98:             ucResult = 0;
  7809   0010A4  6A3B               	clrf	motor_Read@ucResult^0,c
  7810                           
  7811                           ;TAD_RFID.c: 99:             bit_count = 0;
  7812   0010A6  6A4C               	clrf	motor_Read@bit_count^0,c
  7813                           
  7814                           ;TAD_RFID.c: 100:             state_read = 1;
  7815   0010A8  0E01               	movlw	1
  7816   0010AA  6E52               	movwf	_state_read^0,c
  7817   0010AC                     l3665:
  7818                           
  7819                           ;TAD_RFID.c: 101:             return 0xFE;
  7820   0010AC  0EFE               	movlw	254
  7821   0010AE  0012               	return	
  7822   0010B0                     l3669:
  7823                           
  7824                           ;TAD_RFID.c: 104:             processBit(&ucAddr, &bit_count, &state_read, 2);
  7825   0010B0  0E4B               	movlw	low motor_Read@ucAddr
  7826   0010B2  6E58               	movwf	processBit@val^0,c
  7827   0010B4  0E4C               	movlw	low motor_Read@bit_count
  7828   0010B6  6E59               	movwf	processBit@bit_count^0,c
  7829   0010B8  0E52               	movlw	low _state_read
  7830   0010BA  6E5A               	movwf	processBit@state^0,c
  7831   0010BC  0E02               	movlw	2
  7832   0010BE  6E5B               	movwf	processBit@next_state^0,c
  7833   0010C0  EC38  F00B         	call	_processBit	;wreg free
  7834   0010C4  D7F3               	goto	l3665
  7835   0010C6                     l291:
  7836                           
  7837                           ;TAD_RFID.c: 108:             LATCbits.LATC2 = 1;
  7838   0010C6  848B               	bsf	139,2,c	;volatile
  7839                           
  7840                           ;TAD_RFID.c: 109:             delay_us(5);
  7841   0010C8  0E05               	movlw	5
  7842   0010CA  EC39  F00D         	call	_delay_us
  7843                           
  7844                           ;TAD_RFID.c: 110:             ucResult = (unsigned char)((ucResult << 1) | PORTCbits.RC0
      +                          );
  7845   0010CE  A082               	btfss	130,0,c	;volatile
  7846   0010D0  D003               	goto	u2940
  7847   0010D2  6A5D               	clrf	??_motor_Read^0,c
  7848   0010D4  2A5D               	incf	??_motor_Read^0,f,c
  7849   0010D6  D001               	goto	u2948
  7850   0010D8                     u2940:
  7851   0010D8  6A5D               	clrf	??_motor_Read^0,c
  7852   0010DA                     u2948:
  7853   0010DA  503B               	movf	motor_Read@ucResult^0,w,c
  7854   0010DC  243B               	addwf	motor_Read@ucResult^0,w,c
  7855   0010DE  105D               	iorwf	??_motor_Read^0,w,c
  7856   0010E0  6E3B               	movwf	motor_Read@ucResult^0,c
  7857                           
  7858                           ;TAD_RFID.c: 111:             LATCbits.LATC2 = 0;
  7859   0010E2  948B               	bcf	139,2,c	;volatile
  7860                           
  7861                           ;TAD_RFID.c: 112:             delay_us(5);
  7862   0010E4  0E05               	movlw	5
  7863   0010E6  EC39  F00D         	call	_delay_us
  7864                           
  7865                           ;TAD_RFID.c: 114:             if (++bit_count >= 8) {
  7866   0010EA  2A4C               	incf	motor_Read@bit_count^0,f,c
  7867   0010EC  0E07               	movlw	7
  7868   0010EE  644C               	cpfsgt	motor_Read@bit_count^0,c
  7869   0010F0  D7DD               	goto	l3665
  7870                           
  7871                           ;TAD_RFID.c: 115:                 LATCbits.LATC3 = LATCbits.LATC2 = 1;
  7872   0010F2  848B               	bsf	139,2,c	;volatile
  7873   0010F4  868B               	bsf	139,3,c	;volatile
  7874                           
  7875                           ;TAD_RFID.c: 116:                 state_read = 0;
  7876   0010F6  6A52               	clrf	_state_read^0,c
  7877                           
  7878                           ;TAD_RFID.c: 117:                 timeout_counter = 0;
  7879   0010F8  0E00               	movlw	0
  7880   0010FA  6E14               	movwf	(motor_Read@timeout_counter+1)^0,c
  7881   0010FC  0E00               	movlw	0
  7882   0010FE  6E13               	movwf	motor_Read@timeout_counter^0,c
  7883                           
  7884                           ;TAD_RFID.c: 118:                 return (ucResult == 0xFE || ucResult == 0xFF) ? 0xFD :
      +                           ucResult;
  7885   001100  0EFE               	movlw	254
  7886   001102  183B               	xorwf	motor_Read@ucResult^0,w,c
  7887   001104  B4D8               	btfsc	status,2,c
  7888   001106  D007               	goto	l3693
  7889   001108  283B               	incf	motor_Read@ucResult^0,w,c
  7890   00110A  B4D8               	btfsc	status,2,c
  7891   00110C  D004               	goto	l3693
  7892   00110E  C03B  F05F         	movff	motor_Read@ucResult,_motor_Read$688
  7893   001112  6A60               	clrf	(_motor_Read$688+1)^0,c
  7894   001114  D004               	goto	l296
  7895   001116                     l3693:
  7896   001116  0E00               	movlw	0
  7897   001118  6E60               	movwf	(_motor_Read$688+1)^0,c
  7898   00111A  0EFD               	movlw	253
  7899   00111C  6E5F               	movwf	_motor_Read$688^0,c
  7900   00111E                     l296:
  7901   00111E  505F               	movf	_motor_Read$688^0,w,c
  7902   001120  0012               	return	
  7903   001122                     l3703:
  7904   001122  5052               	movf	_state_read^0,w,c
  7905                           
  7906                           ; Switch size 1, requested type "simple"
  7907                           ; Number of cases is 3, Range of values is 0 to 2
  7908                           ; switch strategies available:
  7909                           ; Name         Instructions Cycles
  7910                           ; simple_byte           10     6 (average)
  7911                           ;	Chosen strategy is simple_byte
  7912   001124  0A00               	xorlw	0	; case 0
  7913   001126  B4D8               	btfsc	status,2,c
  7914   001128  D7B2               	goto	l3651
  7915   00112A  0A01               	xorlw	1	; case 1
  7916   00112C  B4D8               	btfsc	status,2,c
  7917   00112E  D7C0               	goto	l3669
  7918   001130  0A03               	xorlw	3	; case 2
  7919   001132  B4D8               	btfsc	status,2,c
  7920   001134  D7C8               	goto	l291
  7921   001136  D7BA               	goto	l3665
  7922   001138                     __end_of_motor_Read:
  7923                           	callstack 0
  7924                           
  7925 ;; *************** function _processBit *****************
  7926 ;; Defined at:
  7927 ;;		line 32 in file "TAD_RFID.c"
  7928 ;; Parameters:    Size  Location     Type
  7929 ;;  val             1    3[COMRAM] PTR unsigned char 
  7930 ;;		 -> motor_Read@ucAddr(1), motor_Write@ucValue(1), motor_Write@ucAddr(1), 
  7931 ;;  bit_count       1    4[COMRAM] PTR unsigned char 
  7932 ;;		 -> motor_Read@bit_count(1), motor_Write@bit_count(1), 
  7933 ;;  state           1    5[COMRAM] PTR unsigned char 
  7934 ;;		 -> state_read(1), state_write(1), 
  7935 ;;  next_state      1    6[COMRAM] unsigned char 
  7936 ;; Auto vars:     Size  Location     Type
  7937 ;;		None
  7938 ;; Return value:  Size  Location     Type
  7939 ;;                  1    wreg      void 
  7940 ;; Registers used:
  7941 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7942 ;; Tracked objects:
  7943 ;;		On entry : 0/0
  7944 ;;		On exit  : 0/0
  7945 ;;		Unchanged: 0/0
  7946 ;; Data sizes:     COMRAM   BANK0   BANK1
  7947 ;;      Params:         4       0       0
  7948 ;;      Locals:         0       0       0
  7949 ;;      Temps:          1       0       0
  7950 ;;      Totals:         5       0       0
  7951 ;;Total ram usage:        5 bytes
  7952 ;; Hardware stack levels used: 1
  7953 ;; Hardware stack levels required when called: 4
  7954 ;; This function calls:
  7955 ;;		_delay_us
  7956 ;; This function is called by:
  7957 ;;		_motor_Write
  7958 ;;		_motor_Read
  7959 ;; This function uses a non-reentrant model
  7960 ;;
  7961                           
  7962                           	psect	text33
  7963   001670                     __ptext33:
  7964                           	callstack 0
  7965   001670                     _processBit:
  7966                           	callstack 24
  7967                           
  7968                           ;TAD_RFID.c: 33:     LATCbits.LATC1 = ((*val & 0x80) != 0);
  7969                           
  7970                           ;incstack = 0
  7971   001670  5058               	movf	processBit@val^0,w,c
  7972   001672  6ED9               	movwf	fsr2l,c
  7973   001674  6ADA               	clrf	fsr2h,c
  7974   001676  AEDF               	btfss	indf2,7,c
  7975   001678  D003               	goto	u2570
  7976   00167A  6A5C               	clrf	??_processBit^0,c
  7977   00167C  2A5C               	incf	??_processBit^0,f,c
  7978   00167E  D001               	goto	u2588
  7979   001680                     u2570:
  7980   001680  6A5C               	clrf	??_processBit^0,c
  7981   001682                     u2588:
  7982   001682  465C               	rlncf	??_processBit^0,f,c
  7983   001684  508B               	movf	139,w,c	;volatile
  7984   001686  185C               	xorwf	??_processBit^0,w,c
  7985   001688  0BFD               	andlw	-3
  7986   00168A  185C               	xorwf	??_processBit^0,w,c
  7987   00168C  6E8B               	movwf	139,c	;volatile
  7988                           
  7989                           ;TAD_RFID.c: 34:     LATCbits.LATC2 = 1;
  7990   00168E  848B               	bsf	139,2,c	;volatile
  7991                           
  7992                           ;TAD_RFID.c: 35:     *val <<= 1;
  7993   001690  5058               	movf	processBit@val^0,w,c
  7994   001692  6ED9               	movwf	fsr2l,c
  7995   001694  6ADA               	clrf	fsr2h,c
  7996   001696  90D8               	bcf	status,0,c
  7997   001698  36DF               	rlcf	indf2,f,c
  7998                           
  7999                           ;TAD_RFID.c: 36:     delay_us(5);
  8000   00169A  0E05               	movlw	5
  8001   00169C  EC39  F00D         	call	_delay_us
  8002                           
  8003                           ;TAD_RFID.c: 37:     LATCbits.LATC2 = 0;
  8004   0016A0  948B               	bcf	139,2,c	;volatile
  8005                           
  8006                           ;TAD_RFID.c: 38:     delay_us(5);
  8007   0016A2  0E05               	movlw	5
  8008   0016A4  EC39  F00D         	call	_delay_us
  8009                           
  8010                           ;TAD_RFID.c: 39:     if (++(*bit_count) == 8) {
  8011   0016A8  5059               	movf	processBit@bit_count^0,w,c
  8012   0016AA  6ED9               	movwf	fsr2l,c
  8013   0016AC  6ADA               	clrf	fsr2h,c
  8014   0016AE  2ADF               	incf	indf2,f,c
  8015   0016B0  0E08               	movlw	8
  8016   0016B2  18DE               	xorwf	postinc2,w,c
  8017   0016B4  A4D8               	btfss	status,2,c
  8018   0016B6  0012               	return	
  8019                           
  8020                           ;TAD_RFID.c: 40:         *bit_count = 0;
  8021   0016B8  5059               	movf	processBit@bit_count^0,w,c
  8022   0016BA  6ED9               	movwf	fsr2l,c
  8023   0016BC  6ADA               	clrf	fsr2h,c
  8024   0016BE  6ADF               	clrf	indf2,c
  8025                           
  8026                           ;TAD_RFID.c: 41:         *state = next_state;
  8027   0016C0  505A               	movf	processBit@state^0,w,c
  8028   0016C2  6ED9               	movwf	fsr2l,c
  8029   0016C4  6ADA               	clrf	fsr2h,c
  8030   0016C6  C05B  FFDF         	movff	processBit@next_state,indf2
  8031   0016CA  0012               	return		;funcret
  8032   0016CC                     __end_of_processBit:
  8033                           	callstack 0
  8034                           
  8035 ;; *************** function _delay_us *****************
  8036 ;; Defined at:
  8037 ;;		line 26 in file "TAD_RFID.c"
  8038 ;; Parameters:    Size  Location     Type
  8039 ;;  howMany         1    wreg     unsigned char 
  8040 ;; Auto vars:     Size  Location     Type
  8041 ;;  howMany         1    1[COMRAM] unsigned char 
  8042 ;;  x               1    2[COMRAM] unsigned char 
  8043 ;; Return value:  Size  Location     Type
  8044 ;;                  1    wreg      void 
  8045 ;; Registers used:
  8046 ;;		wreg, status,2, status,0, prodl, prodh
  8047 ;; Tracked objects:
  8048 ;;		On entry : 0/0
  8049 ;;		On exit  : 0/0
  8050 ;;		Unchanged: 0/0
  8051 ;; Data sizes:     COMRAM   BANK0   BANK1
  8052 ;;      Params:         0       0       0
  8053 ;;      Locals:         2       0       0
  8054 ;;      Temps:          0       0       0
  8055 ;;      Totals:         2       0       0
  8056 ;;Total ram usage:        2 bytes
  8057 ;; Hardware stack levels used: 1
  8058 ;; Hardware stack levels required when called: 3
  8059 ;; This function calls:
  8060 ;;		Nothing
  8061 ;; This function is called by:
  8062 ;;		_processBit
  8063 ;;		_motor_Read
  8064 ;;		_initRFID
  8065 ;; This function uses a non-reentrant model
  8066 ;;
  8067                           
  8068                           	psect	text34
  8069   001A72                     __ptext34:
  8070                           	callstack 0
  8071   001A72                     _delay_us:
  8072                           	callstack 24
  8073                           
  8074                           ;incstack = 0
  8075                           ;delay_us@howMany stored from wreg
  8076   001A72  6E56               	movwf	delay_us@howMany^0,c
  8077                           
  8078                           ;TAD_RFID.c: 27:     char x = howMany * 8;
  8079   001A74  5056               	movf	delay_us@howMany^0,w,c
  8080   001A76  0D08               	mullw	8
  8081   001A78  CFF3 F057          	movff	prodl,delay_us@x
  8082                           
  8083                           ;TAD_RFID.c: 28:     while(x--) __nop();
  8084   001A7C  D001               	goto	l3309
  8085   001A7E                     l252:
  8086   001A7E  0000               	nop	
  8087   001A80                     l3309:
  8088   001A80  0657               	decf	delay_us@x^0,f,c
  8089   001A82  2857               	incf	delay_us@x^0,w,c
  8090   001A84  B4D8               	btfsc	status,2,c
  8091   001A86  0012               	return	
  8092   001A88  D7FA               	goto	l252
  8093   001A8A                     __end_of_delay_us:
  8094                           	callstack 0
  8095                           
  8096 ;; *************** function _initPorts *****************
  8097 ;; Defined at:
  8098 ;;		line 63 in file "main.c"
  8099 ;; Parameters:    Size  Location     Type
  8100 ;;		None
  8101 ;; Auto vars:     Size  Location     Type
  8102 ;;		None
  8103 ;; Return value:  Size  Location     Type
  8104 ;;                  1    wreg      void 
  8105 ;; Registers used:
  8106 ;;		wreg, status,2
  8107 ;; Tracked objects:
  8108 ;;		On entry : 0/0
  8109 ;;		On exit  : 0/0
  8110 ;;		Unchanged: 0/0
  8111 ;; Data sizes:     COMRAM   BANK0   BANK1
  8112 ;;      Params:         0       0       0
  8113 ;;      Locals:         0       0       0
  8114 ;;      Temps:          0       0       0
  8115 ;;      Totals:         0       0       0
  8116 ;;Total ram usage:        0 bytes
  8117 ;; Hardware stack levels used: 1
  8118 ;; Hardware stack levels required when called: 3
  8119 ;; This function calls:
  8120 ;;		Nothing
  8121 ;; This function is called by:
  8122 ;;		_main
  8123 ;; This function uses a non-reentrant model
  8124 ;;
  8125                           
  8126                           	psect	text35
  8127   001B1A                     __ptext35:
  8128                           	callstack 0
  8129   001B1A                     _initPorts:
  8130                           	callstack 27
  8131                           
  8132                           ;incstack = 0
  8133   001B1A  0E0F               	movlw	15
  8134   001B1C  6EC1               	movwf	193,c	;volatile
  8135   001B1E  9496               	bcf	150,2,c	;volatile
  8136   001B20  0012               	return		;funcret
  8137   001B22                     __end_of_initPorts:
  8138                           	callstack 0
  8139                           
  8140 ;; *************** function _initLeds *****************
  8141 ;; Defined at:
  8142 ;;		line 9 in file "TAD_LEDS.c"
  8143 ;; Parameters:    Size  Location     Type
  8144 ;;		None
  8145 ;; Auto vars:     Size  Location     Type
  8146 ;;		None
  8147 ;; Return value:  Size  Location     Type
  8148 ;;                  1    wreg      void 
  8149 ;; Registers used:
  8150 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8151 ;; Tracked objects:
  8152 ;;		On entry : 0/0
  8153 ;;		On exit  : 0/0
  8154 ;;		Unchanged: 0/0
  8155 ;; Data sizes:     COMRAM   BANK0   BANK1
  8156 ;;      Params:         0       0       0
  8157 ;;      Locals:         0       0       0
  8158 ;;      Temps:          0       0       0
  8159 ;;      Totals:         0       0       0
  8160 ;;Total ram usage:        0 bytes
  8161 ;; Hardware stack levels used: 1
  8162 ;; Hardware stack levels required when called: 4
  8163 ;; This function calls:
  8164 ;;		_TI_NewTimer
  8165 ;; This function is called by:
  8166 ;;		_main
  8167 ;; This function uses a non-reentrant model
  8168 ;;
  8169                           
  8170                           	psect	text36
  8171   001AEE                     __ptext36:
  8172                           	callstack 0
  8173   001AEE                     _initLeds:
  8174                           	callstack 26
  8175                           
  8176                           ;TAD_LEDS.c: 10:     TRISA = 0x00;
  8177                           
  8178                           ;incstack = 0
  8179   001AEE  6A92               	clrf	146,c	;volatile
  8180                           
  8181                           ;TAD_LEDS.c: 11:     TRISE = 0x00;
  8182   001AF0  6A96               	clrf	150,c	;volatile
  8183                           
  8184                           ;TAD_LEDS.c: 12:     TI_NewTimer(&timer);
  8185   001AF2  0E53               	movlw	low _timer
  8186   001AF4  6E56               	movwf	TI_NewTimer@TimerHandle^0,c
  8187   001AF6  EC2B  F00C         	call	_TI_NewTimer	;wreg free
  8188   001AFA  0012               	return		;funcret
  8189   001AFC                     __end_of_initLeds:
  8190                           	callstack 0
  8191                           
  8192 ;; *************** function _initData *****************
  8193 ;; Defined at:
  8194 ;;		line 24 in file "TAD_DATOS.c"
  8195 ;; Parameters:    Size  Location     Type
  8196 ;;		None
  8197 ;; Auto vars:     Size  Location     Type
  8198 ;;  j               1    2[COMRAM] unsigned char 
  8199 ;;  i               1    3[COMRAM] unsigned char 
  8200 ;;  i               1    4[COMRAM] unsigned char 
  8201 ;;  i               1    1[COMRAM] unsigned char 
  8202 ;; Return value:  Size  Location     Type
  8203 ;;                  1    wreg      void 
  8204 ;; Registers used:
  8205 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  8206 ;; Tracked objects:
  8207 ;;		On entry : 0/0
  8208 ;;		On exit  : 0/0
  8209 ;;		Unchanged: 0/0
  8210 ;; Data sizes:     COMRAM   BANK0   BANK1
  8211 ;;      Params:         0       0       0
  8212 ;;      Locals:         4       0       0
  8213 ;;      Temps:          0       0       0
  8214 ;;      Totals:         4       0       0
  8215 ;;Total ram usage:        4 bytes
  8216 ;; Hardware stack levels used: 1
  8217 ;; Hardware stack levels required when called: 3
  8218 ;; This function calls:
  8219 ;;		Nothing
  8220 ;; This function is called by:
  8221 ;;		_main
  8222 ;; This function uses a non-reentrant model
  8223 ;;
  8224                           
  8225                           	psect	text37
  8226   001726                     __ptext37:
  8227                           	callstack 0
  8228   001726                     _initData:
  8229                           	callstack 27
  8230                           
  8231                           ;TAD_DATOS.c: 25:     for(char i = 0; i < 5; i++) currentUser[i] = 0;
  8232                           
  8233                           ;incstack = 0
  8234   001726  6A56               	clrf	initData@i^0,c
  8235   001728                     l4005:
  8236   001728  5056               	movf	initData@i^0,w,c
  8237   00172A  0F40               	addlw	low _currentUser
  8238   00172C  6ED9               	movwf	fsr2l,c
  8239   00172E  6ADA               	clrf	fsr2h,c
  8240   001730  6ADF               	clrf	indf2,c
  8241   001732  2A56               	incf	initData@i^0,f,c
  8242   001734  0E04               	movlw	4
  8243   001736  6456               	cpfsgt	initData@i^0,c
  8244   001738  D7F7               	goto	l4005
  8245                           
  8246                           ;TAD_DATOS.c: 26:     for(char i = 0; i < 4; i++) {
  8247   00173A  6A59               	clrf	initData@i_882^0,c
  8248   00173C                     l757:
  8249                           
  8250                           ;TAD_DATOS.c: 27:         for(char j = 0; j < 6; j++) {
  8251   00173C  6A57               	clrf	initData@j^0,c
  8252   00173E                     l4019:
  8253                           
  8254                           ;TAD_DATOS.c: 28:             configurations[i][j] = i;
  8255   00173E  5059               	movf	initData@i_882^0,w,c
  8256   001740  0D06               	mullw	6
  8257   001742  50F3               	movf	243,w,c
  8258   001744  0F80               	addlw	low _configurations
  8259   001746  2457               	addwf	initData@j^0,w,c
  8260   001748  6ED9               	movwf	fsr2l,c
  8261   00174A  6ADA               	clrf	fsr2h,c
  8262   00174C  C059  FFDF         	movff	initData@i_882,indf2
  8263                           
  8264                           ;TAD_DATOS.c: 29:         }
  8265   001750  2A57               	incf	initData@j^0,f,c
  8266   001752  0E05               	movlw	5
  8267   001754  6457               	cpfsgt	initData@j^0,c
  8268   001756  D7F3               	goto	l4019
  8269                           
  8270                           ;TAD_DATOS.c: 30:     }
  8271   001758  2A59               	incf	initData@i_882^0,f,c
  8272   00175A  0E03               	movlw	3
  8273   00175C  6459               	cpfsgt	initData@i_882^0,c
  8274   00175E  D7EE               	goto	l757
  8275                           
  8276                           ;TAD_DATOS.c: 31:     for(char i = 0; i < 6; i++) {
  8277   001760  6A58               	clrf	initData@i_884^0,c
  8278   001762                     l4033:
  8279                           
  8280                           ;TAD_DATOS.c: 32:         configurations[4][i] = 0;
  8281   001762  5058               	movf	initData@i_884^0,w,c
  8282   001764  0F98               	addlw	low (_configurations+24)
  8283   001766  6ED9               	movwf	fsr2l,c
  8284   001768  6ADA               	clrf	fsr2h,c
  8285   00176A  6ADF               	clrf	indf2,c
  8286                           
  8287                           ;TAD_DATOS.c: 33:     }
  8288   00176C  2A58               	incf	initData@i_884^0,f,c
  8289   00176E  0E05               	movlw	5
  8290   001770  6458               	cpfsgt	initData@i_884^0,c
  8291   001772  D7F7               	goto	l4033
  8292                           
  8293                           ;TAD_DATOS.c: 34:     index = 4;
  8294   001774  0E04               	movlw	4
  8295   001776  6E7C               	movwf	_index^0,c
  8296   001778  0012               	return		;funcret
  8297   00177A                     __end_of_initData:
  8298                           	callstack 0
  8299                           
  8300 ;; *************** function _Terminal_Init *****************
  8301 ;; Defined at:
  8302 ;;		line 11 in file "TAD_TERMINAL.c"
  8303 ;; Parameters:    Size  Location     Type
  8304 ;;		None
  8305 ;; Auto vars:     Size  Location     Type
  8306 ;;		None
  8307 ;; Return value:  Size  Location     Type
  8308 ;;                  1    wreg      void 
  8309 ;; Registers used:
  8310 ;;		wreg, status,2
  8311 ;; Tracked objects:
  8312 ;;		On entry : 0/0
  8313 ;;		On exit  : 0/0
  8314 ;;		Unchanged: 0/0
  8315 ;; Data sizes:     COMRAM   BANK0   BANK1
  8316 ;;      Params:         0       0       0
  8317 ;;      Locals:         0       0       0
  8318 ;;      Temps:          0       0       0
  8319 ;;      Totals:         0       0       0
  8320 ;;Total ram usage:        0 bytes
  8321 ;; Hardware stack levels used: 1
  8322 ;; Hardware stack levels required when called: 3
  8323 ;; This function calls:
  8324 ;;		Nothing
  8325 ;; This function is called by:
  8326 ;;		_main
  8327 ;; This function uses a non-reentrant model
  8328 ;;
  8329                           
  8330                           	psect	text38
  8331   001ADE                     __ptext38:
  8332                           	callstack 0
  8333   001ADE                     _Terminal_Init:
  8334                           	callstack 27
  8335                           
  8336                           ;TAD_TERMINAL.c: 12:  TXSTA = 0x24;
  8337                           
  8338                           ;incstack = 0
  8339   001ADE  0E24               	movlw	36
  8340   001AE0  6EAC               	movwf	172,c	;volatile
  8341                           
  8342                           ;TAD_TERMINAL.c: 13:  RCSTA = 0x90;
  8343   001AE2  0E90               	movlw	144
  8344   001AE4  6EAB               	movwf	171,c	;volatile
  8345                           
  8346                           ;TAD_TERMINAL.c: 14:  SPBRG = 255;
  8347   001AE6  68AF               	setf	175,c	;volatile
  8348                           
  8349                           ;TAD_TERMINAL.c: 15:  BAUDCON = 0x00;
  8350   001AE8  6AB8               	clrf	184,c	;volatile
  8351                           
  8352                           ;TAD_TERMINAL.c: 16:  hashtag_pressed = 0;
  8353   001AEA  6A21               	clrf	_hashtag_pressed^0,c
  8354   001AEC  0012               	return		;funcret
  8355   001AEE                     __end_of_Terminal_Init:
  8356                           	callstack 0
  8357                           
  8358 ;; *************** function _TI_Init *****************
  8359 ;; Defined at:
  8360 ;;		line 32 in file "TAD_TIMER.c"
  8361 ;; Parameters:    Size  Location     Type
  8362 ;;		None
  8363 ;; Auto vars:     Size  Location     Type
  8364 ;;  counter         1    1[COMRAM] unsigned char 
  8365 ;; Return value:  Size  Location     Type
  8366 ;;                  1    wreg      void 
  8367 ;; Registers used:
  8368 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  8369 ;; Tracked objects:
  8370 ;;		On entry : 0/0
  8371 ;;		On exit  : 0/0
  8372 ;;		Unchanged: 0/0
  8373 ;; Data sizes:     COMRAM   BANK0   BANK1
  8374 ;;      Params:         0       0       0
  8375 ;;      Locals:         1       0       0
  8376 ;;      Temps:          0       0       0
  8377 ;;      Totals:         1       0       0
  8378 ;;Total ram usage:        1 bytes
  8379 ;; Hardware stack levels used: 1
  8380 ;; Hardware stack levels required when called: 3
  8381 ;; This function calls:
  8382 ;;		Nothing
  8383 ;; This function is called by:
  8384 ;;		_main
  8385 ;; This function uses a non-reentrant model
  8386 ;;
  8387                           
  8388                           	psect	text39
  8389   00192A                     __ptext39:
  8390                           	callstack 0
  8391   00192A                     _TI_Init:
  8392                           	callstack 27
  8393                           
  8394                           ;TAD_TIMER.c: 33:  for (unsigned char counter=0; counter<4; counter++) {
  8395                           
  8396                           ;incstack = 0
  8397   00192A  6A56               	clrf	TI_Init@counter^0,c
  8398   00192C                     l3893:
  8399                           
  8400                           ;TAD_TIMER.c: 34:   Timers[counter].Busy=0;
  8401   00192C  5056               	movf	TI_Init@counter^0,w,c
  8402   00192E  0D05               	mullw	5
  8403   001930  50F3               	movf	243,w,c
  8404   001932  0FA2               	addlw	low (_Timers+4)
  8405   001934  6ED9               	movwf	fsr2l,c
  8406   001936  6ADA               	clrf	fsr2h,c
  8407   001938  6ADF               	clrf	indf2,c
  8408                           
  8409                           ;TAD_TIMER.c: 35:  }
  8410   00193A  2A56               	incf	TI_Init@counter^0,f,c
  8411   00193C  0E03               	movlw	3
  8412   00193E  6456               	cpfsgt	TI_Init@counter^0,c
  8413   001940  D7F5               	goto	l3893
  8414                           
  8415                           ;TAD_TIMER.c: 36:  T0CON=0x82;
  8416   001942  0E82               	movlw	130
  8417   001944  6ED5               	movwf	213,c	;volatile
  8418                           
  8419                           ;TAD_TIMER.c: 37:     TMR0=63036;
  8420   001946  0EF6               	movlw	246
  8421   001948  6ED7               	movwf	215,c	;volatile
  8422   00194A  0E3C               	movlw	60
  8423   00194C  6ED6               	movwf	214,c	;volatile
  8424                           
  8425                           ;TAD_TIMER.c: 38:  INTCONbits.TMR0IF = 0;
  8426   00194E  94F2               	bcf	242,2,c	;volatile
  8427                           
  8428                           ;TAD_TIMER.c: 39:  INTCONbits.TMR0IE = 1;
  8429   001950  8AF2               	bsf	242,5,c	;volatile
  8430   001952  0012               	return		;funcret
  8431   001954                     __end_of_TI_Init:
  8432                           	callstack 0
  8433                           
  8434 ;; *************** function _LcInit *****************
  8435 ;; Defined at:
  8436 ;;		line 68 in file "TAD_DISPLAY.c"
  8437 ;; Parameters:    Size  Location     Type
  8438 ;;  rows            1    wreg     unsigned char 
  8439 ;;  columns         1   22[COMRAM] unsigned char 
  8440 ;; Auto vars:     Size  Location     Type
  8441 ;;  rows            1   23[COMRAM] unsigned char 
  8442 ;;  i               2   24[COMRAM] int 
  8443 ;; Return value:  Size  Location     Type
  8444 ;;                  1    wreg      void 
  8445 ;; Registers used:
  8446 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8447 ;; Tracked objects:
  8448 ;;		On entry : 0/0
  8449 ;;		On exit  : 0/0
  8450 ;;		Unchanged: 0/0
  8451 ;; Data sizes:     COMRAM   BANK0   BANK1
  8452 ;;      Params:         1       0       0
  8453 ;;      Locals:         3       0       0
  8454 ;;      Temps:          0       0       0
  8455 ;;      Totals:         4       0       0
  8456 ;;Total ram usage:        4 bytes
  8457 ;; Hardware stack levels used: 1
  8458 ;; Hardware stack levels required when called: 6
  8459 ;; This function calls:
  8460 ;;		_CantaIR
  8461 ;;		_EscriuPrimeraOrdre
  8462 ;;		_Espera
  8463 ;;		_TI_NewTimer
  8464 ;;		_WaitForBusy
  8465 ;; This function is called by:
  8466 ;;		_main
  8467 ;; This function uses a non-reentrant model
  8468 ;;
  8469                           
  8470                           	psect	text40
  8471   000DD4                     __ptext40:
  8472                           	callstack 0
  8473   000DD4                     _LcInit:
  8474                           	callstack 24
  8475                           
  8476                           ;incstack = 0
  8477                           ;LcInit@rows stored from wreg
  8478   000DD4  6E6C               	movwf	LcInit@rows^0,c
  8479                           
  8480                           ;TAD_DISPLAY.c: 74:  int i;;TAD_DISPLAY.c: 75:  TI_NewTimer(&Timer);
  8481   000DD6  0E54               	movlw	low _Timer
  8482   000DD8  6E56               	movwf	TI_NewTimer@TimerHandle^0,c
  8483   000DDA  EC2B  F00C         	call	_TI_NewTimer	;wreg free
  8484                           
  8485                           ;TAD_DISPLAY.c: 76:  Rows = rows; Columns = columns;
  8486   000DDE  C06C  F03F         	movff	LcInit@rows,_Rows
  8487   000DE2  C06B  F03E         	movff	LcInit@columns,_Columns
  8488                           
  8489                           ;TAD_DISPLAY.c: 77:  RowAct = ColumnAct = 0;
  8490   000DE6  6A3C               	clrf	_ColumnAct^0,c
  8491   000DE8  6A3D               	clrf	_RowAct^0,c
  8492                           
  8493                           ;TAD_DISPLAY.c: 78:  (TRISBbits.TRISB3 = TRISBbits.TRISB2 = TRISBbits.TRISB1 = 0);
  8494   000DEA  9293               	bcf	147,1,c	;volatile
  8495   000DEC  9493               	bcf	147,2,c	;volatile
  8496   000DEE  9693               	bcf	147,3,c	;volatile
  8497                           
  8498                           ;TAD_DISPLAY.c: 79:  for (i = 0; i < 2; i++) {
  8499   000DF0  0E00               	movlw	0
  8500   000DF2  6E6E               	movwf	(LcInit@i+1)^0,c
  8501   000DF4  0E00               	movlw	0
  8502   000DF6  6E6D               	movwf	LcInit@i^0,c
  8503   000DF8                     l3967:
  8504                           
  8505                           ;TAD_DISPLAY.c: 80:   Espera(Timer, 100);
  8506   000DF8  C054  F063         	movff	_Timer,Espera@Timer
  8507   000DFC  6A64               	clrf	(Espera@Timer+1)^0,c
  8508   000DFE  0E00               	movlw	0
  8509   000E00  6E66               	movwf	(Espera@ms+1)^0,c
  8510   000E02  0E64               	movlw	100
  8511   000E04  6E65               	movwf	Espera@ms^0,c
  8512   000E06  EC49  F00C         	call	_Espera	;wreg free
  8513                           
  8514                           ;TAD_DISPLAY.c: 81:   EscriuPrimeraOrdre(0x02 | 0x01);
  8515   000E0A  0E03               	movlw	3
  8516   000E0C  EC50  F009         	call	_EscriuPrimeraOrdre
  8517                           
  8518                           ;TAD_DISPLAY.c: 82:   Espera(Timer, 4);
  8519   000E10  C054  F063         	movff	_Timer,Espera@Timer
  8520   000E14  6A64               	clrf	(Espera@Timer+1)^0,c
  8521   000E16  0E00               	movlw	0
  8522   000E18  6E66               	movwf	(Espera@ms+1)^0,c
  8523   000E1A  0E04               	movlw	4
  8524   000E1C  6E65               	movwf	Espera@ms^0,c
  8525   000E1E  EC49  F00C         	call	_Espera	;wreg free
  8526                           
  8527                           ;TAD_DISPLAY.c: 83:   EscriuPrimeraOrdre(0x02 | 0x01);
  8528   000E22  0E03               	movlw	3
  8529   000E24  EC50  F009         	call	_EscriuPrimeraOrdre
  8530                           
  8531                           ;TAD_DISPLAY.c: 84:   Espera(Timer, 1);
  8532   000E28  C054  F063         	movff	_Timer,Espera@Timer
  8533   000E2C  6A64               	clrf	(Espera@Timer+1)^0,c
  8534   000E2E  0E00               	movlw	0
  8535   000E30  6E66               	movwf	(Espera@ms+1)^0,c
  8536   000E32  0E01               	movlw	1
  8537   000E34  6E65               	movwf	Espera@ms^0,c
  8538   000E36  EC49  F00C         	call	_Espera	;wreg free
  8539                           
  8540                           ;TAD_DISPLAY.c: 85:   EscriuPrimeraOrdre(0x02 | 0x01);
  8541   000E3A  0E03               	movlw	3
  8542   000E3C  EC50  F009         	call	_EscriuPrimeraOrdre
  8543                           
  8544                           ;TAD_DISPLAY.c: 86:   Espera(Timer, 1);
  8545   000E40  C054  F063         	movff	_Timer,Espera@Timer
  8546   000E44  6A64               	clrf	(Espera@Timer+1)^0,c
  8547   000E46  0E00               	movlw	0
  8548   000E48  6E66               	movwf	(Espera@ms+1)^0,c
  8549   000E4A  0E01               	movlw	1
  8550   000E4C  6E65               	movwf	Espera@ms^0,c
  8551   000E4E  EC49  F00C         	call	_Espera	;wreg free
  8552                           
  8553                           ;TAD_DISPLAY.c: 89:   EscriuPrimeraOrdre(0x02);
  8554   000E52  0E02               	movlw	2
  8555   000E54  EC50  F009         	call	_EscriuPrimeraOrdre
  8556                           
  8557                           ;TAD_DISPLAY.c: 90:   Espera(Timer, 1);
  8558   000E58  C054  F063         	movff	_Timer,Espera@Timer
  8559   000E5C  6A64               	clrf	(Espera@Timer+1)^0,c
  8560   000E5E  0E00               	movlw	0
  8561   000E60  6E66               	movwf	(Espera@ms+1)^0,c
  8562   000E62  0E01               	movlw	1
  8563   000E64  6E65               	movwf	Espera@ms^0,c
  8564   000E66  EC49  F00C         	call	_Espera	;wreg free
  8565                           
  8566                           ;TAD_DISPLAY.c: 91:   CantaIR(0x20 | 0x08);
  8567   000E6A  0E28               	movlw	40
  8568   000E6C  EC7C  F00C         	call	_CantaIR
  8569                           
  8570                           ;TAD_DISPLAY.c: 94:   WaitForBusy(); CantaIR(0x08);
  8571   000E70  EC65  F00D         	call	_WaitForBusy	;wreg free
  8572   000E74  0E08               	movlw	8
  8573   000E76  EC7C  F00C         	call	_CantaIR
  8574                           
  8575                           ;TAD_DISPLAY.c: 95:   WaitForBusy(); CantaIR(0x01);
  8576   000E7A  EC65  F00D         	call	_WaitForBusy	;wreg free
  8577   000E7E  0E01               	movlw	1
  8578   000E80  EC7C  F00C         	call	_CantaIR
  8579                           
  8580                           ;TAD_DISPLAY.c: 96:   Espera(Timer,2);
  8581   000E84  C054  F063         	movff	_Timer,Espera@Timer
  8582   000E88  6A64               	clrf	(Espera@Timer+1)^0,c
  8583   000E8A  0E00               	movlw	0
  8584   000E8C  6E66               	movwf	(Espera@ms+1)^0,c
  8585   000E8E  0E02               	movlw	2
  8586   000E90  6E65               	movwf	Espera@ms^0,c
  8587   000E92  EC49  F00C         	call	_Espera	;wreg free
  8588                           
  8589                           ;TAD_DISPLAY.c: 97:   WaitForBusy(); CantaIR(0x04 | 0x02);
  8590   000E96  EC65  F00D         	call	_WaitForBusy	;wreg free
  8591   000E9A  0E06               	movlw	6
  8592   000E9C  EC7C  F00C         	call	_CantaIR
  8593                           
  8594                           ;TAD_DISPLAY.c: 98:   WaitForBusy(); CantaIR(0x08 | 0x04 | 0x02 | 0x01);
  8595   000EA0  EC65  F00D         	call	_WaitForBusy	;wreg free
  8596   000EA4  0E0F               	movlw	15
  8597   000EA6  EC7C  F00C         	call	_CantaIR
  8598                           
  8599                           ;TAD_DISPLAY.c: 99:  }
  8600   000EAA  4A6D               	infsnz	LcInit@i^0,f,c
  8601   000EAC  2A6E               	incf	(LcInit@i+1)^0,f,c
  8602   000EAE  BE6E               	btfsc	(LcInit@i+1)^0,7,c
  8603   000EB0  D7A3               	goto	l3967
  8604   000EB2  506E               	movf	(LcInit@i+1)^0,w,c
  8605   000EB4  E105               	bnz	u3390
  8606   000EB6  0E02               	movlw	2
  8607   000EB8  5C6D               	subwf	LcInit@i^0,w,c
  8608   000EBA  B0D8               	btfsc	status,0,c
  8609   000EBC  0012               	return	
  8610   000EBE  D79C               	goto	l3967
  8611   000EC0                     u3390:
  8612   000EC0  0012               	return		;funcret
  8613   000EC2                     __end_of_LcInit:
  8614                           	callstack 0
  8615                           
  8616 ;; *************** function _WaitForBusy *****************
  8617 ;; Defined at:
  8618 ;;		line 254 in file "TAD_DISPLAY.c"
  8619 ;; Parameters:    Size  Location     Type
  8620 ;;		None
  8621 ;; Auto vars:     Size  Location     Type
  8622 ;;  Busy            1    0        unsigned char 
  8623 ;; Return value:  Size  Location     Type
  8624 ;;                  1    wreg      void 
  8625 ;; Registers used:
  8626 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8627 ;; Tracked objects:
  8628 ;;		On entry : 0/0
  8629 ;;		On exit  : 0/0
  8630 ;;		Unchanged: 0/0
  8631 ;; Data sizes:     COMRAM   BANK0   BANK1
  8632 ;;      Params:         0       0       0
  8633 ;;      Locals:         0       0       0
  8634 ;;      Temps:          0       0       0
  8635 ;;      Totals:         0       0       0
  8636 ;;Total ram usage:        0 bytes
  8637 ;; Hardware stack levels used: 1
  8638 ;; Hardware stack levels required when called: 5
  8639 ;; This function calls:
  8640 ;;		_Espera
  8641 ;; This function is called by:
  8642 ;;		_LcInit
  8643 ;;		_LcGotoXY
  8644 ;;		_LcPutChar
  8645 ;; This function uses a non-reentrant model
  8646 ;;
  8647                           
  8648                           	psect	text41
  8649   001ACA                     __ptext41:
  8650                           	callstack 0
  8651   001ACA                     _WaitForBusy:
  8652                           	callstack 23
  8653                           
  8654                           ;TAD_DISPLAY.c: 255:  Espera(Timer, 2);
  8655                           
  8656                           ;incstack = 0
  8657   001ACA  C054  F063         	movff	_Timer,Espera@Timer
  8658   001ACE  6A64               	clrf	(Espera@Timer+1)^0,c
  8659   001AD0  0E00               	movlw	0
  8660   001AD2  6E66               	movwf	(Espera@ms+1)^0,c
  8661   001AD4  0E02               	movlw	2
  8662   001AD6  6E65               	movwf	Espera@ms^0,c
  8663   001AD8  EC49  F00C         	call	_Espera	;wreg free
  8664   001ADC  0012               	return		;funcret
  8665   001ADE                     __end_of_WaitForBusy:
  8666                           	callstack 0
  8667                           
  8668 ;; *************** function _Espera *****************
  8669 ;; Defined at:
  8670 ;;		line 203 in file "TAD_DISPLAY.c"
  8671 ;; Parameters:    Size  Location     Type
  8672 ;;  Timer           2   14[COMRAM] int 
  8673 ;;  ms              2   16[COMRAM] int 
  8674 ;; Auto vars:     Size  Location     Type
  8675 ;;		None
  8676 ;; Return value:  Size  Location     Type
  8677 ;;                  1    wreg      void 
  8678 ;; Registers used:
  8679 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8680 ;; Tracked objects:
  8681 ;;		On entry : 0/0
  8682 ;;		On exit  : 0/0
  8683 ;;		Unchanged: 0/0
  8684 ;; Data sizes:     COMRAM   BANK0   BANK1
  8685 ;;      Params:         4       0       0
  8686 ;;      Locals:         0       0       0
  8687 ;;      Temps:          4       0       0
  8688 ;;      Totals:         8       0       0
  8689 ;;Total ram usage:        8 bytes
  8690 ;; Hardware stack levels used: 1
  8691 ;; Hardware stack levels required when called: 4
  8692 ;; This function calls:
  8693 ;;		_TI_GetTics
  8694 ;;		_TI_ResetTics
  8695 ;; This function is called by:
  8696 ;;		_LcInit
  8697 ;;		_WaitForBusy
  8698 ;; This function uses a non-reentrant model
  8699 ;;
  8700                           
  8701                           	psect	text42
  8702   001892                     __ptext42:
  8703                           	callstack 0
  8704   001892                     _Espera:
  8705                           	callstack 23
  8706                           
  8707                           ;TAD_DISPLAY.c: 204:  TI_ResetTics((unsigned char)Timer);
  8708                           
  8709                           ;incstack = 0
  8710   001892  5063               	movf	Espera@Timer^0,w,c
  8711   001894  ECE5  F00C         	call	_TI_ResetTics
  8712   001898                     l3223:
  8713   001898  C065  F067         	movff	Espera@ms,??_Espera
  8714   00189C  C066  F068         	movff	Espera@ms+1,??_Espera+1
  8715   0018A0  0E00               	movlw	0
  8716   0018A2  BE68               	btfsc	(??_Espera+1)^0,7,c
  8717   0018A4  0EFF               	movlw	255
  8718   0018A6  6E69               	movwf	(??_Espera+2)^0,c
  8719   0018A8  6E6A               	movwf	(??_Espera+3)^0,c
  8720   0018AA  5063               	movf	Espera@Timer^0,w,c
  8721   0018AC  ECE4  F00B         	call	_TI_GetTics
  8722   0018B0  5067               	movf	??_Espera^0,w,c
  8723   0018B2  5C56               	subwf	?_TI_GetTics^0,w,c
  8724   0018B4  5068               	movf	(??_Espera+1)^0,w,c
  8725   0018B6  5857               	subwfb	(?_TI_GetTics+1)^0,w,c
  8726   0018B8  5069               	movf	(??_Espera+2)^0,w,c
  8727   0018BA  5858               	subwfb	(?_TI_GetTics+2)^0,w,c
  8728   0018BC  506A               	movf	(??_Espera+3)^0,w,c
  8729   0018BE  5859               	subwfb	(?_TI_GetTics+3)^0,w,c
  8730   0018C0  B0D8               	btfsc	status,0,c
  8731   0018C2  0012               	return	
  8732   0018C4  D7E9               	goto	l3223
  8733   0018C6                     __end_of_Espera:
  8734                           	callstack 0
  8735                           
  8736 ;; *************** function _TI_ResetTics *****************
  8737 ;; Defined at:
  8738 ;;		line 53 in file "TAD_TIMER.c"
  8739 ;; Parameters:    Size  Location     Type
  8740 ;;  TimerHandle     1    wreg     unsigned char 
  8741 ;; Auto vars:     Size  Location     Type
  8742 ;;  TimerHandle     1    1[COMRAM] unsigned char 
  8743 ;; Return value:  Size  Location     Type
  8744 ;;                  1    wreg      void 
  8745 ;; Registers used:
  8746 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  8747 ;; Tracked objects:
  8748 ;;		On entry : 0/0
  8749 ;;		On exit  : 0/0
  8750 ;;		Unchanged: 0/0
  8751 ;; Data sizes:     COMRAM   BANK0   BANK1
  8752 ;;      Params:         0       0       0
  8753 ;;      Locals:         1       0       0
  8754 ;;      Temps:          0       0       0
  8755 ;;      Totals:         1       0       0
  8756 ;;Total ram usage:        1 bytes
  8757 ;; Hardware stack levels used: 1
  8758 ;; Hardware stack levels required when called: 3
  8759 ;; This function calls:
  8760 ;;		Nothing
  8761 ;; This function is called by:
  8762 ;;		_Espera
  8763 ;;		_motor_LEDs
  8764 ;;		_initRFID
  8765 ;;		_motor_RFID
  8766 ;;		_motorTeclado
  8767 ;; This function uses a non-reentrant model
  8768 ;;
  8769                           
  8770                           	psect	text43
  8771   0019CA                     __ptext43:
  8772                           	callstack 0
  8773   0019CA                     _TI_ResetTics:
  8774                           	callstack 23
  8775                           
  8776                           ;incstack = 0
  8777                           ;TI_ResetTics@TimerHandle stored from wreg
  8778   0019CA  6E56               	movwf	TI_ResetTics@TimerHandle^0,c
  8779                           
  8780                           ;TAD_TIMER.c: 57:  (INTCONbits.GIE = 0); Timers[TimerHandle].TicsInicials=Tics; (INTCONb
      +                          its.GIE = 1);
  8781   0019CC  9EF2               	bcf	242,7,c	;volatile
  8782   0019CE  5056               	movf	TI_ResetTics@TimerHandle^0,w,c
  8783   0019D0  0D05               	mullw	5
  8784   0019D2  50F3               	movf	243,w,c
  8785   0019D4  0F9E               	addlw	low _Timers
  8786   0019D6  6ED9               	movwf	fsr2l,c
  8787   0019D8  6ADA               	clrf	fsr2h,c
  8788   0019DA  C007  FFDE         	movff	_Tics,postinc2	;volatile
  8789   0019DE  C008  FFDE         	movff	_Tics+1,postinc2	;volatile
  8790   0019E2  C009  FFDE         	movff	_Tics+2,postinc2	;volatile
  8791   0019E6  C00A  FFDE         	movff	_Tics+3,postinc2	;volatile
  8792   0019EA  8EF2               	bsf	242,7,c	;volatile
  8793   0019EC  0012               	return		;funcret
  8794   0019EE                     __end_of_TI_ResetTics:
  8795                           	callstack 0
  8796                           
  8797 ;; *************** function _TI_GetTics *****************
  8798 ;; Defined at:
  8799 ;;		line 61 in file "TAD_TIMER.c"
  8800 ;; Parameters:    Size  Location     Type
  8801 ;;  TimerHandle     1    wreg     unsigned char 
  8802 ;; Auto vars:     Size  Location     Type
  8803 ;;  TimerHandle     1   13[COMRAM] unsigned char 
  8804 ;;  CopiaTicsAct    4    9[COMRAM] unsigned long 
  8805 ;; Return value:  Size  Location     Type
  8806 ;;                  4    1[COMRAM] unsigned long 
  8807 ;; Registers used:
  8808 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  8809 ;; Tracked objects:
  8810 ;;		On entry : 0/0
  8811 ;;		On exit  : 0/0
  8812 ;;		Unchanged: 0/0
  8813 ;; Data sizes:     COMRAM   BANK0   BANK1
  8814 ;;      Params:         4       0       0
  8815 ;;      Locals:         5       0       0
  8816 ;;      Temps:          4       0       0
  8817 ;;      Totals:        13       0       0
  8818 ;;Total ram usage:       13 bytes
  8819 ;; Hardware stack levels used: 1
  8820 ;; Hardware stack levels required when called: 3
  8821 ;; This function calls:
  8822 ;;		Nothing
  8823 ;; This function is called by:
  8824 ;;		_Espera
  8825 ;;		_motor_LEDs
  8826 ;;		_motor_RFID
  8827 ;;		_motorTeclado
  8828 ;; This function uses a non-reentrant model
  8829 ;;
  8830                           
  8831                           	psect	text44
  8832   0017C8                     __ptext44:
  8833                           	callstack 0
  8834   0017C8                     _TI_GetTics:
  8835                           	callstack 23
  8836                           
  8837                           ;incstack = 0
  8838                           ;TI_GetTics@TimerHandle stored from wreg
  8839   0017C8  6E62               	movwf	TI_GetTics@TimerHandle^0,c
  8840                           
  8841                           ;TAD_TIMER.c: 62:     (INTCONbits.GIE = 0); unsigned long CopiaTicsActual=Tics; (INTCONb
      +                          its.GIE = 1);
  8842   0017CA  9EF2               	bcf	242,7,c	;volatile
  8843   0017CC  C007  F05E         	movff	_Tics,TI_GetTics@CopiaTicsActual	;volatile
  8844   0017D0  C008  F05F         	movff	_Tics+1,TI_GetTics@CopiaTicsActual+1	;volatile
  8845   0017D4  C009  F060         	movff	_Tics+2,TI_GetTics@CopiaTicsActual+2	;volatile
  8846   0017D8  C00A  F061         	movff	_Tics+3,TI_GetTics@CopiaTicsActual+3	;volatile
  8847   0017DC  8EF2               	bsf	242,7,c	;volatile
  8848                           
  8849                           ;TAD_TIMER.c: 63:  return (CopiaTicsActual-(Timers[TimerHandle].TicsInicials));
  8850   0017DE  5062               	movf	TI_GetTics@TimerHandle^0,w,c
  8851   0017E0  0D05               	mullw	5
  8852   0017E2  50F3               	movf	243,w,c
  8853   0017E4  0F9E               	addlw	low _Timers
  8854   0017E6  6ED9               	movwf	fsr2l,c
  8855   0017E8  6ADA               	clrf	fsr2h,c
  8856   0017EA  CFDE F05A          	movff	postinc2,??_TI_GetTics
  8857   0017EE  CFDE F05B          	movff	postinc2,??_TI_GetTics+1
  8858   0017F2  CFDE F05C          	movff	postinc2,??_TI_GetTics+2
  8859   0017F6  CFDE F05D          	movff	postinc2,??_TI_GetTics+3
  8860   0017FA  505A               	movf	??_TI_GetTics^0,w,c
  8861   0017FC  5C5E               	subwf	TI_GetTics@CopiaTicsActual^0,w,c
  8862   0017FE  6E56               	movwf	?_TI_GetTics^0,c
  8863   001800  505B               	movf	(??_TI_GetTics+1)^0,w,c
  8864   001802  585F               	subwfb	(TI_GetTics@CopiaTicsActual+1)^0,w,c
  8865   001804  6E57               	movwf	(?_TI_GetTics+1)^0,c
  8866   001806  505C               	movf	(??_TI_GetTics+2)^0,w,c
  8867   001808  5860               	subwfb	(TI_GetTics@CopiaTicsActual+2)^0,w,c
  8868   00180A  6E58               	movwf	(?_TI_GetTics+2)^0,c
  8869   00180C  505D               	movf	(??_TI_GetTics+3)^0,w,c
  8870   00180E  5861               	subwfb	(TI_GetTics@CopiaTicsActual+3)^0,w,c
  8871   001810  6E59               	movwf	(?_TI_GetTics+3)^0,c
  8872   001812  0012               	return		;funcret
  8873   001814                     __end_of_TI_GetTics:
  8874                           	callstack 0
  8875                           
  8876 ;; *************** function _TI_NewTimer *****************
  8877 ;; Defined at:
  8878 ;;		line 43 in file "TAD_TIMER.c"
  8879 ;; Parameters:    Size  Location     Type
  8880 ;;  TimerHandle     1    1[COMRAM] PTR unsigned char 
  8881 ;;		 -> timer@TAD_TECLADO$F744(1), card_timer(1), timer(1), Timer(1), 
  8882 ;; Auto vars:     Size  Location     Type
  8883 ;;  Comptador       1    3[COMRAM] unsigned char 
  8884 ;; Return value:  Size  Location     Type
  8885 ;;                  1    wreg      unsigned char 
  8886 ;; Registers used:
  8887 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  8888 ;; Tracked objects:
  8889 ;;		On entry : 0/0
  8890 ;;		On exit  : 0/0
  8891 ;;		Unchanged: 0/0
  8892 ;; Data sizes:     COMRAM   BANK0   BANK1
  8893 ;;      Params:         1       0       0
  8894 ;;      Locals:         1       0       0
  8895 ;;      Temps:          1       0       0
  8896 ;;      Totals:         3       0       0
  8897 ;;Total ram usage:        3 bytes
  8898 ;; Hardware stack levels used: 1
  8899 ;; Hardware stack levels required when called: 3
  8900 ;; This function calls:
  8901 ;;		Nothing
  8902 ;; This function is called by:
  8903 ;;		_LcInit
  8904 ;;		_initLeds
  8905 ;;		_initRFID
  8906 ;;		_initTeclado
  8907 ;; This function uses a non-reentrant model
  8908 ;;
  8909                           
  8910                           	psect	text45
  8911   001856                     __ptext45:
  8912                           	callstack 0
  8913   001856                     _TI_NewTimer:
  8914                           	callstack 26
  8915                           
  8916                           ;TAD_TIMER.c: 44:  unsigned char Comptador=0;
  8917                           
  8918                           ;incstack = 0
  8919   001856  6A58               	clrf	TI_NewTimer@Comptador^0,c
  8920                           
  8921                           ;TAD_TIMER.c: 45:  while (Timers[Comptador].Busy==1) {
  8922   001858  D005               	goto	l3547
  8923   00185A                     l3543:
  8924                           
  8925                           ;TAD_TIMER.c: 46:   if (++Comptador == 4) return (0);
  8926   00185A  2A58               	incf	TI_NewTimer@Comptador^0,f,c
  8927   00185C  0E04               	movlw	4
  8928   00185E  1858               	xorwf	TI_NewTimer@Comptador^0,w,c
  8929   001860  B4D8               	btfsc	status,2,c
  8930   001862  0012               	return	
  8931   001864                     l3547:
  8932                           
  8933                           ;TAD_TIMER.c: 45:  while (Timers[Comptador].Busy==1) {
  8934   001864  5058               	movf	TI_NewTimer@Comptador^0,w,c
  8935   001866  0D05               	mullw	5
  8936   001868  50F3               	movf	243,w,c
  8937   00186A  0FA2               	addlw	low (_Timers+4)
  8938   00186C  6ED9               	movwf	fsr2l,c
  8939   00186E  6ADA               	clrf	fsr2h,c
  8940   001870  04DE               	decf	postinc2,w,c
  8941   001872  B4D8               	btfsc	status,2,c
  8942   001874  D7F2               	goto	l3543
  8943                           
  8944                           ;TAD_TIMER.c: 48:  Timers[Comptador].Busy=1;
  8945   001876  5058               	movf	TI_NewTimer@Comptador^0,w,c
  8946   001878  0D05               	mullw	5
  8947   00187A  50F3               	movf	243,w,c
  8948   00187C  0FA2               	addlw	low (_Timers+4)
  8949   00187E  6ED9               	movwf	fsr2l,c
  8950   001880  6ADA               	clrf	fsr2h,c
  8951   001882  0E01               	movlw	1
  8952   001884  6EDF               	movwf	indf2,c
  8953                           
  8954                           ;TAD_TIMER.c: 49:  *TimerHandle=Comptador;
  8955   001886  5056               	movf	TI_NewTimer@TimerHandle^0,w,c
  8956   001888  6ED9               	movwf	fsr2l,c
  8957   00188A  6ADA               	clrf	fsr2h,c
  8958   00188C  C058  FFDF         	movff	TI_NewTimer@Comptador,indf2
  8959   001890  0012               	return		;funcret
  8960   001892                     __end_of_TI_NewTimer:
  8961                           	callstack 0
  8962                           
  8963 ;; *************** function _EscriuPrimeraOrdre *****************
  8964 ;; Defined at:
  8965 ;;		line 258 in file "TAD_DISPLAY.c"
  8966 ;; Parameters:    Size  Location     Type
  8967 ;;  ordre           1    wreg     unsigned char 
  8968 ;; Auto vars:     Size  Location     Type
  8969 ;;  ordre           1    2[COMRAM] unsigned char 
  8970 ;; Return value:  Size  Location     Type
  8971 ;;                  1    wreg      void 
  8972 ;; Registers used:
  8973 ;;		wreg, status,2, status,0
  8974 ;; Tracked objects:
  8975 ;;		On entry : 0/0
  8976 ;;		On exit  : 0/0
  8977 ;;		Unchanged: 0/0
  8978 ;; Data sizes:     COMRAM   BANK0   BANK1
  8979 ;;      Params:         0       0       0
  8980 ;;      Locals:         1       0       0
  8981 ;;      Temps:          1       0       0
  8982 ;;      Totals:         2       0       0
  8983 ;;Total ram usage:        2 bytes
  8984 ;; Hardware stack levels used: 1
  8985 ;; Hardware stack levels required when called: 3
  8986 ;; This function calls:
  8987 ;;		Nothing
  8988 ;; This function is called by:
  8989 ;;		_LcInit
  8990 ;; This function uses a non-reentrant model
  8991 ;;
  8992                           
  8993                           	psect	text46
  8994   0012A0                     __ptext46:
  8995                           	callstack 0
  8996   0012A0                     _EscriuPrimeraOrdre:
  8997                           	callstack 26
  8998                           
  8999                           ;incstack = 0
  9000                           ;EscriuPrimeraOrdre@ordre stored from wreg
  9001   0012A0  6E57               	movwf	EscriuPrimeraOrdre@ordre^0,c
  9002                           
  9003                           ;TAD_DISPLAY.c: 260:  (TRISBbits.TRISB4 = TRISBbits.TRISB5 = TRISEbits.TRISE1 = TRISEbit
      +                          s.TRISE0 = 0); (LATBbits.LATB3 = 0); (LATBbits.LATB2 = 0);
  9004   0012A2  9096               	bcf	150,0,c	;volatile
  9005   0012A4  9296               	bcf	150,1,c	;volatile
  9006   0012A6  9A93               	bcf	147,5,c	;volatile
  9007   0012A8  9893               	bcf	147,4,c	;volatile
  9008   0012AA  968A               	bcf	138,3,c	;volatile
  9009   0012AC  948A               	bcf	138,2,c	;volatile
  9010                           
  9011                           ;TAD_DISPLAY.c: 261:  (LATBbits.LATB1 = 1); (LATBbits.LATB1 = 1);
  9012   0012AE  828A               	bsf	138,1,c	;volatile
  9013   0012B0  828A               	bsf	138,1,c	;volatile
  9014                           
  9015                           ;TAD_DISPLAY.c: 262:  (LATEbits.LATE0 = (ordre & 0x08 ? 1 : 0));
  9016   0012B2  A657               	btfss	EscriuPrimeraOrdre@ordre^0,3,c
  9017   0012B4  D003               	goto	u570
  9018   0012B6  6A56               	clrf	??_EscriuPrimeraOrdre^0,c
  9019   0012B8  2A56               	incf	??_EscriuPrimeraOrdre^0,f,c
  9020   0012BA  D001               	goto	u588
  9021   0012BC                     u570:
  9022   0012BC  6A56               	clrf	??_EscriuPrimeraOrdre^0,c
  9023   0012BE                     u588:
  9024   0012BE  508D               	movf	141,w,c	;volatile
  9025   0012C0  1856               	xorwf	??_EscriuPrimeraOrdre^0,w,c
  9026   0012C2  0BFE               	andlw	-2
  9027   0012C4  1856               	xorwf	??_EscriuPrimeraOrdre^0,w,c
  9028   0012C6  6E8D               	movwf	141,c	;volatile
  9029                           
  9030                           ;TAD_DISPLAY.c: 263:  (LATEbits.LATE1 = (ordre & 0x04 ? 1 : 0));
  9031   0012C8  A457               	btfss	EscriuPrimeraOrdre@ordre^0,2,c
  9032   0012CA  D003               	goto	u590
  9033   0012CC  6A56               	clrf	??_EscriuPrimeraOrdre^0,c
  9034   0012CE  2A56               	incf	??_EscriuPrimeraOrdre^0,f,c
  9035   0012D0  D001               	goto	u608
  9036   0012D2                     u590:
  9037   0012D2  6A56               	clrf	??_EscriuPrimeraOrdre^0,c
  9038   0012D4                     u608:
  9039   0012D4  4656               	rlncf	??_EscriuPrimeraOrdre^0,f,c
  9040   0012D6  508D               	movf	141,w,c	;volatile
  9041   0012D8  1856               	xorwf	??_EscriuPrimeraOrdre^0,w,c
  9042   0012DA  0BFD               	andlw	-3
  9043   0012DC  1856               	xorwf	??_EscriuPrimeraOrdre^0,w,c
  9044   0012DE  6E8D               	movwf	141,c	;volatile
  9045                           
  9046                           ;TAD_DISPLAY.c: 264:  (LATBbits.LATB5 = (ordre & 0x02 ? 1 : 0));
  9047   0012E0  A257               	btfss	EscriuPrimeraOrdre@ordre^0,1,c
  9048   0012E2  D003               	goto	u610
  9049   0012E4  6A56               	clrf	??_EscriuPrimeraOrdre^0,c
  9050   0012E6  2A56               	incf	??_EscriuPrimeraOrdre^0,f,c
  9051   0012E8  D001               	goto	u628
  9052   0012EA                     u610:
  9053   0012EA  6A56               	clrf	??_EscriuPrimeraOrdre^0,c
  9054   0012EC                     u628:
  9055   0012EC  3A56               	swapf	??_EscriuPrimeraOrdre^0,f,c
  9056   0012EE  4656               	rlncf	??_EscriuPrimeraOrdre^0,f,c
  9057   0012F0  508A               	movf	138,w,c	;volatile
  9058   0012F2  1856               	xorwf	??_EscriuPrimeraOrdre^0,w,c
  9059   0012F4  0BDF               	andlw	-33
  9060   0012F6  1856               	xorwf	??_EscriuPrimeraOrdre^0,w,c
  9061   0012F8  6E8A               	movwf	138,c	;volatile
  9062                           
  9063                           ;TAD_DISPLAY.c: 265:  (LATBbits.LATB4 = (ordre & 0x01 ? 1 : 0));
  9064   0012FA  A057               	btfss	EscriuPrimeraOrdre@ordre^0,0,c
  9065   0012FC  D003               	goto	u630
  9066   0012FE  6A56               	clrf	??_EscriuPrimeraOrdre^0,c
  9067   001300  2A56               	incf	??_EscriuPrimeraOrdre^0,f,c
  9068   001302  D001               	goto	u648
  9069   001304                     u630:
  9070   001304  6A56               	clrf	??_EscriuPrimeraOrdre^0,c
  9071   001306                     u648:
  9072   001306  3A56               	swapf	??_EscriuPrimeraOrdre^0,f,c
  9073   001308  508A               	movf	138,w,c	;volatile
  9074   00130A  1856               	xorwf	??_EscriuPrimeraOrdre^0,w,c
  9075   00130C  0BEF               	andlw	-17
  9076   00130E  1856               	xorwf	??_EscriuPrimeraOrdre^0,w,c
  9077   001310  6E8A               	movwf	138,c	;volatile
  9078                           
  9079                           ;TAD_DISPLAY.c: 266:  (LATBbits.LATB1 = 0);
  9080   001312  928A               	bcf	138,1,c	;volatile
  9081   001314  0012               	return		;funcret
  9082   001316                     __end_of_EscriuPrimeraOrdre:
  9083                           	callstack 0
  9084                           
  9085 ;; *************** function _CantaIR *****************
  9086 ;; Defined at:
  9087 ;;		line 222 in file "TAD_DISPLAY.c"
  9088 ;; Parameters:    Size  Location     Type
  9089 ;;  IR              1    wreg     unsigned char 
  9090 ;; Auto vars:     Size  Location     Type
  9091 ;;  IR              1    3[COMRAM] unsigned char 
  9092 ;; Return value:  Size  Location     Type
  9093 ;;                  1    wreg      void 
  9094 ;; Registers used:
  9095 ;;		wreg, status,2, status,0, cstack
  9096 ;; Tracked objects:
  9097 ;;		On entry : 0/0
  9098 ;;		On exit  : 0/0
  9099 ;;		Unchanged: 0/0
  9100 ;; Data sizes:     COMRAM   BANK0   BANK1
  9101 ;;      Params:         0       0       0
  9102 ;;      Locals:         1       0       0
  9103 ;;      Temps:          0       0       0
  9104 ;;      Totals:         1       0       0
  9105 ;;Total ram usage:        1 bytes
  9106 ;; Hardware stack levels used: 1
  9107 ;; Hardware stack levels required when called: 4
  9108 ;; This function calls:
  9109 ;;		_CantaPartAlta
  9110 ;;		_CantaPartBaixa
  9111 ;; This function is called by:
  9112 ;;		_LcInit
  9113 ;;		_LcGotoXY
  9114 ;; This function uses a non-reentrant model
  9115 ;;
  9116                           
  9117                           	psect	text47
  9118   0018F8                     __ptext47:
  9119                           	callstack 0
  9120   0018F8                     _CantaIR:
  9121                           	callstack 23
  9122                           
  9123                           ;incstack = 0
  9124                           ;CantaIR@IR stored from wreg
  9125   0018F8  6E58               	movwf	CantaIR@IR^0,c
  9126                           
  9127                           ;TAD_DISPLAY.c: 223:  (TRISBbits.TRISB4 = TRISBbits.TRISB5 = TRISEbits.TRISE1 = TRISEbit
      +                          s.TRISE0 = 0);
  9128   0018FA  9096               	bcf	150,0,c	;volatile
  9129   0018FC  9296               	bcf	150,1,c	;volatile
  9130   0018FE  9A93               	bcf	147,5,c	;volatile
  9131   001900  9893               	bcf	147,4,c	;volatile
  9132                           
  9133                           ;TAD_DISPLAY.c: 224:  (LATBbits.LATB3 = 0);
  9134   001902  968A               	bcf	138,3,c	;volatile
  9135                           
  9136                           ;TAD_DISPLAY.c: 225:  (LATBbits.LATB2 = 0);
  9137   001904  948A               	bcf	138,2,c	;volatile
  9138                           
  9139                           ;TAD_DISPLAY.c: 226:  (LATBbits.LATB1 = 1);
  9140   001906  828A               	bsf	138,1,c	;volatile
  9141                           
  9142                           ;TAD_DISPLAY.c: 227:  CantaPartAlta(IR);
  9143   001908  5058               	movf	CantaIR@IR^0,w,c
  9144   00190A  ECD6  F00A         	call	_CantaPartAlta
  9145                           
  9146                           ;TAD_DISPLAY.c: 228:  (LATBbits.LATB1 = 1);
  9147   00190E  828A               	bsf	138,1,c	;volatile
  9148                           
  9149                           ;TAD_DISPLAY.c: 229:  (LATBbits.LATB1 = 0);
  9150   001910  928A               	bcf	138,1,c	;volatile
  9151                           
  9152                           ;TAD_DISPLAY.c: 230:  (LATBbits.LATB1 = 0);
  9153   001912  928A               	bcf	138,1,c	;volatile
  9154                           
  9155                           ;TAD_DISPLAY.c: 231:  (LATBbits.LATB1 = 1);
  9156   001914  828A               	bsf	138,1,c	;volatile
  9157                           
  9158                           ;TAD_DISPLAY.c: 232:  CantaPartBaixa(IR);
  9159   001916  5058               	movf	CantaIR@IR^0,w,c
  9160   001918  ECA4  F00A         	call	_CantaPartBaixa
  9161                           
  9162                           ;TAD_DISPLAY.c: 233:  (LATBbits.LATB1 = 1);
  9163   00191C  828A               	bsf	138,1,c	;volatile
  9164                           
  9165                           ;TAD_DISPLAY.c: 234:  (LATBbits.LATB1 = 0);
  9166   00191E  928A               	bcf	138,1,c	;volatile
  9167                           
  9168                           ;TAD_DISPLAY.c: 235:  (TRISBbits.TRISB4 = TRISBbits.TRISB5 = TRISEbits.TRISE1 = TRISEbit
      +                          s.TRISE0 = 1);
  9169   001920  8096               	bsf	150,0,c	;volatile
  9170   001922  8296               	bsf	150,1,c	;volatile
  9171   001924  8A93               	bsf	147,5,c	;volatile
  9172   001926  8893               	bsf	147,4,c	;volatile
  9173   001928  0012               	return		;funcret
  9174   00192A                     __end_of_CantaIR:
  9175                           	callstack 0
  9176                           
  9177 ;; *************** function _CantaPartBaixa *****************
  9178 ;; Defined at:
  9179 ;;		line 215 in file "TAD_DISPLAY.c"
  9180 ;; Parameters:    Size  Location     Type
  9181 ;;  c               1    wreg     unsigned char 
  9182 ;; Auto vars:     Size  Location     Type
  9183 ;;  c               1    2[COMRAM] unsigned char 
  9184 ;; Return value:  Size  Location     Type
  9185 ;;                  1    wreg      void 
  9186 ;; Registers used:
  9187 ;;		wreg, status,2, status,0
  9188 ;; Tracked objects:
  9189 ;;		On entry : 0/0
  9190 ;;		On exit  : 0/0
  9191 ;;		Unchanged: 0/0
  9192 ;; Data sizes:     COMRAM   BANK0   BANK1
  9193 ;;      Params:         0       0       0
  9194 ;;      Locals:         1       0       0
  9195 ;;      Temps:          1       0       0
  9196 ;;      Totals:         2       0       0
  9197 ;;Total ram usage:        2 bytes
  9198 ;; Hardware stack levels used: 1
  9199 ;; Hardware stack levels required when called: 3
  9200 ;; This function calls:
  9201 ;;		Nothing
  9202 ;; This function is called by:
  9203 ;;		_CantaIR
  9204 ;;		_CantaData
  9205 ;; This function uses a non-reentrant model
  9206 ;;
  9207                           
  9208                           	psect	text48
  9209   001548                     __ptext48:
  9210                           	callstack 0
  9211   001548                     _CantaPartBaixa:
  9212                           	callstack 23
  9213                           
  9214                           ;incstack = 0
  9215                           ;CantaPartBaixa@c stored from wreg
  9216   001548  6E57               	movwf	CantaPartBaixa@c^0,c
  9217                           
  9218                           ;TAD_DISPLAY.c: 216:  (LATEbits.LATE0 = (c & 0x08 ? 1 : 0));
  9219   00154A  A657               	btfss	CantaPartBaixa@c^0,3,c
  9220   00154C  D003               	goto	u2350
  9221   00154E  6A56               	clrf	??_CantaPartBaixa^0,c
  9222   001550  2A56               	incf	??_CantaPartBaixa^0,f,c
  9223   001552  D001               	goto	u2368
  9224   001554                     u2350:
  9225   001554  6A56               	clrf	??_CantaPartBaixa^0,c
  9226   001556                     u2368:
  9227   001556  508D               	movf	141,w,c	;volatile
  9228   001558  1856               	xorwf	??_CantaPartBaixa^0,w,c
  9229   00155A  0BFE               	andlw	-2
  9230   00155C  1856               	xorwf	??_CantaPartBaixa^0,w,c
  9231   00155E  6E8D               	movwf	141,c	;volatile
  9232                           
  9233                           ;TAD_DISPLAY.c: 217:  (LATEbits.LATE1 = (c & 0x04 ? 1 : 0));
  9234   001560  A457               	btfss	CantaPartBaixa@c^0,2,c
  9235   001562  D003               	goto	u2370
  9236   001564  6A56               	clrf	??_CantaPartBaixa^0,c
  9237   001566  2A56               	incf	??_CantaPartBaixa^0,f,c
  9238   001568  D001               	goto	u2388
  9239   00156A                     u2370:
  9240   00156A  6A56               	clrf	??_CantaPartBaixa^0,c
  9241   00156C                     u2388:
  9242   00156C  4656               	rlncf	??_CantaPartBaixa^0,f,c
  9243   00156E  508D               	movf	141,w,c	;volatile
  9244   001570  1856               	xorwf	??_CantaPartBaixa^0,w,c
  9245   001572  0BFD               	andlw	-3
  9246   001574  1856               	xorwf	??_CantaPartBaixa^0,w,c
  9247   001576  6E8D               	movwf	141,c	;volatile
  9248                           
  9249                           ;TAD_DISPLAY.c: 218:  (LATBbits.LATB5 = (c & 0x02 ? 1 : 0));
  9250   001578  A257               	btfss	CantaPartBaixa@c^0,1,c
  9251   00157A  D003               	goto	u2390
  9252   00157C  6A56               	clrf	??_CantaPartBaixa^0,c
  9253   00157E  2A56               	incf	??_CantaPartBaixa^0,f,c
  9254   001580  D001               	goto	u2408
  9255   001582                     u2390:
  9256   001582  6A56               	clrf	??_CantaPartBaixa^0,c
  9257   001584                     u2408:
  9258   001584  3A56               	swapf	??_CantaPartBaixa^0,f,c
  9259   001586  4656               	rlncf	??_CantaPartBaixa^0,f,c
  9260   001588  508A               	movf	138,w,c	;volatile
  9261   00158A  1856               	xorwf	??_CantaPartBaixa^0,w,c
  9262   00158C  0BDF               	andlw	-33
  9263   00158E  1856               	xorwf	??_CantaPartBaixa^0,w,c
  9264   001590  6E8A               	movwf	138,c	;volatile
  9265                           
  9266                           ;TAD_DISPLAY.c: 219:  (LATBbits.LATB4 = (c & 0x01 ? 1 : 0));
  9267   001592  A057               	btfss	CantaPartBaixa@c^0,0,c
  9268   001594  D003               	goto	u2410
  9269   001596  6A56               	clrf	??_CantaPartBaixa^0,c
  9270   001598  2A56               	incf	??_CantaPartBaixa^0,f,c
  9271   00159A  D001               	goto	u2428
  9272   00159C                     u2410:
  9273   00159C  6A56               	clrf	??_CantaPartBaixa^0,c
  9274   00159E                     u2428:
  9275   00159E  3A56               	swapf	??_CantaPartBaixa^0,f,c
  9276   0015A0  508A               	movf	138,w,c	;volatile
  9277   0015A2  1856               	xorwf	??_CantaPartBaixa^0,w,c
  9278   0015A4  0BEF               	andlw	-17
  9279   0015A6  1856               	xorwf	??_CantaPartBaixa^0,w,c
  9280   0015A8  6E8A               	movwf	138,c	;volatile
  9281   0015AA  0012               	return		;funcret
  9282   0015AC                     __end_of_CantaPartBaixa:
  9283                           	callstack 0
  9284                           
  9285 ;; *************** function _CantaPartAlta *****************
  9286 ;; Defined at:
  9287 ;;		line 208 in file "TAD_DISPLAY.c"
  9288 ;; Parameters:    Size  Location     Type
  9289 ;;  c               1    wreg     unsigned char 
  9290 ;; Auto vars:     Size  Location     Type
  9291 ;;  c               1    2[COMRAM] unsigned char 
  9292 ;; Return value:  Size  Location     Type
  9293 ;;                  1    wreg      void 
  9294 ;; Registers used:
  9295 ;;		wreg, status,2, status,0
  9296 ;; Tracked objects:
  9297 ;;		On entry : 0/0
  9298 ;;		On exit  : 0/0
  9299 ;;		Unchanged: 0/0
  9300 ;; Data sizes:     COMRAM   BANK0   BANK1
  9301 ;;      Params:         0       0       0
  9302 ;;      Locals:         1       0       0
  9303 ;;      Temps:          1       0       0
  9304 ;;      Totals:         2       0       0
  9305 ;;Total ram usage:        2 bytes
  9306 ;; Hardware stack levels used: 1
  9307 ;; Hardware stack levels required when called: 3
  9308 ;; This function calls:
  9309 ;;		Nothing
  9310 ;; This function is called by:
  9311 ;;		_CantaIR
  9312 ;;		_CantaData
  9313 ;; This function uses a non-reentrant model
  9314 ;;
  9315                           
  9316                           	psect	text49
  9317   0015AC                     __ptext49:
  9318                           	callstack 0
  9319   0015AC                     _CantaPartAlta:
  9320                           	callstack 23
  9321                           
  9322                           ;incstack = 0
  9323                           ;CantaPartAlta@c stored from wreg
  9324   0015AC  6E57               	movwf	CantaPartAlta@c^0,c
  9325                           
  9326                           ;TAD_DISPLAY.c: 209:  (LATEbits.LATE0 = (c & 0x80 ? 1 : 0));
  9327   0015AE  AE57               	btfss	CantaPartAlta@c^0,7,c
  9328   0015B0  D003               	goto	u2270
  9329   0015B2  6A56               	clrf	??_CantaPartAlta^0,c
  9330   0015B4  2A56               	incf	??_CantaPartAlta^0,f,c
  9331   0015B6  D001               	goto	u2288
  9332   0015B8                     u2270:
  9333   0015B8  6A56               	clrf	??_CantaPartAlta^0,c
  9334   0015BA                     u2288:
  9335   0015BA  508D               	movf	141,w,c	;volatile
  9336   0015BC  1856               	xorwf	??_CantaPartAlta^0,w,c
  9337   0015BE  0BFE               	andlw	-2
  9338   0015C0  1856               	xorwf	??_CantaPartAlta^0,w,c
  9339   0015C2  6E8D               	movwf	141,c	;volatile
  9340                           
  9341                           ;TAD_DISPLAY.c: 210:  (LATEbits.LATE1 = (c & 0x40 ? 1 : 0));
  9342   0015C4  AC57               	btfss	CantaPartAlta@c^0,6,c
  9343   0015C6  D003               	goto	u2290
  9344   0015C8  6A56               	clrf	??_CantaPartAlta^0,c
  9345   0015CA  2A56               	incf	??_CantaPartAlta^0,f,c
  9346   0015CC  D001               	goto	u2308
  9347   0015CE                     u2290:
  9348   0015CE  6A56               	clrf	??_CantaPartAlta^0,c
  9349   0015D0                     u2308:
  9350   0015D0  4656               	rlncf	??_CantaPartAlta^0,f,c
  9351   0015D2  508D               	movf	141,w,c	;volatile
  9352   0015D4  1856               	xorwf	??_CantaPartAlta^0,w,c
  9353   0015D6  0BFD               	andlw	-3
  9354   0015D8  1856               	xorwf	??_CantaPartAlta^0,w,c
  9355   0015DA  6E8D               	movwf	141,c	;volatile
  9356                           
  9357                           ;TAD_DISPLAY.c: 211:  (LATBbits.LATB5 = (c & 0x20 ? 1 : 0));
  9358   0015DC  AA57               	btfss	CantaPartAlta@c^0,5,c
  9359   0015DE  D003               	goto	u2310
  9360   0015E0  6A56               	clrf	??_CantaPartAlta^0,c
  9361   0015E2  2A56               	incf	??_CantaPartAlta^0,f,c
  9362   0015E4  D001               	goto	u2328
  9363   0015E6                     u2310:
  9364   0015E6  6A56               	clrf	??_CantaPartAlta^0,c
  9365   0015E8                     u2328:
  9366   0015E8  3A56               	swapf	??_CantaPartAlta^0,f,c
  9367   0015EA  4656               	rlncf	??_CantaPartAlta^0,f,c
  9368   0015EC  508A               	movf	138,w,c	;volatile
  9369   0015EE  1856               	xorwf	??_CantaPartAlta^0,w,c
  9370   0015F0  0BDF               	andlw	-33
  9371   0015F2  1856               	xorwf	??_CantaPartAlta^0,w,c
  9372   0015F4  6E8A               	movwf	138,c	;volatile
  9373                           
  9374                           ;TAD_DISPLAY.c: 212:  (LATBbits.LATB4 = (c & 0x10 ? 1 : 0));
  9375   0015F6  A857               	btfss	CantaPartAlta@c^0,4,c
  9376   0015F8  D003               	goto	u2330
  9377   0015FA  6A56               	clrf	??_CantaPartAlta^0,c
  9378   0015FC  2A56               	incf	??_CantaPartAlta^0,f,c
  9379   0015FE  D001               	goto	u2348
  9380   001600                     u2330:
  9381   001600  6A56               	clrf	??_CantaPartAlta^0,c
  9382   001602                     u2348:
  9383   001602  3A56               	swapf	??_CantaPartAlta^0,f,c
  9384   001604  508A               	movf	138,w,c	;volatile
  9385   001606  1856               	xorwf	??_CantaPartAlta^0,w,c
  9386   001608  0BEF               	andlw	-17
  9387   00160A  1856               	xorwf	??_CantaPartAlta^0,w,c
  9388   00160C  6E8A               	movwf	138,c	;volatile
  9389   00160E  0012               	return		;funcret
  9390   001610                     __end_of_CantaPartAlta:
  9391                           	callstack 0
  9392                           
  9393 ;; *************** function _LowRSI *****************
  9394 ;; Defined at:
  9395 ;;		line 34 in file "main.c"
  9396 ;; Parameters:    Size  Location     Type
  9397 ;;		None
  9398 ;; Auto vars:     Size  Location     Type
  9399 ;;		None
  9400 ;; Return value:  Size  Location     Type
  9401 ;;                  1    wreg      void 
  9402 ;; Registers used:
  9403 ;;		None
  9404 ;; Tracked objects:
  9405 ;;		On entry : 0/0
  9406 ;;		On exit  : 0/0
  9407 ;;		Unchanged: 0/0
  9408 ;; Data sizes:     COMRAM   BANK0   BANK1
  9409 ;;      Params:         0       0       0
  9410 ;;      Locals:         0       0       0
  9411 ;;      Temps:          1       0       0
  9412 ;;      Totals:         1       0       0
  9413 ;;Total ram usage:        1 bytes
  9414 ;; Hardware stack levels used: 1
  9415 ;; Hardware stack levels required when called: 2
  9416 ;; This function calls:
  9417 ;;		Nothing
  9418 ;; This function is called by:
  9419 ;;		Interrupt level 1
  9420 ;; This function uses a non-reentrant model
  9421 ;;
  9422                           
  9423                           	psect	intcodelo
  9424   000018                     __pintcodelo:
  9425                           	callstack 0
  9426   000018                     _LowRSI:
  9427                           	callstack 21
  9428                           
  9429                           ;incstack = 0
  9430   000018  807D               	bsf	btemp,0,c	;set compiler interrupt flag (level 1)
  9431   00001A  CFE0 F055          	movff	bsr,??_LowRSI
  9432   00001E  C055  FFE0         	movff	??_LowRSI,bsr
  9433   000022  907D               	bcf	btemp,0,c	;clear compiler interrupt flag (level 1)
  9434   000024  0010               	retfie	
  9435   000026                     __end_of_LowRSI:
  9436                           	callstack 0
  9437                           
  9438 ;; *************** function _HighRSI *****************
  9439 ;; Defined at:
  9440 ;;		line 30 in file "main.c"
  9441 ;; Parameters:    Size  Location     Type
  9442 ;;		None
  9443 ;; Auto vars:     Size  Location     Type
  9444 ;;		None
  9445 ;; Return value:  Size  Location     Type
  9446 ;;                  1    wreg      void 
  9447 ;; Registers used:
  9448 ;;		wreg, status,2, status,0, cstack
  9449 ;; Tracked objects:
  9450 ;;		On entry : 0/0
  9451 ;;		On exit  : 0/0
  9452 ;;		Unchanged: 0/0
  9453 ;; Data sizes:     COMRAM   BANK0   BANK1
  9454 ;;      Params:         0       0       0
  9455 ;;      Locals:         0       0       0
  9456 ;;      Temps:          0       0       0
  9457 ;;      Totals:         0       0       0
  9458 ;;Total ram usage:        0 bytes
  9459 ;; Hardware stack levels used: 1
  9460 ;; Hardware stack levels required when called: 1
  9461 ;; This function calls:
  9462 ;;		_RSI_Timer0
  9463 ;; This function is called by:
  9464 ;;		Interrupt level 2
  9465 ;; This function uses a non-reentrant model
  9466 ;;
  9467                           
  9468                           	psect	intcode
  9469   000008                     __pintcode:
  9470                           	callstack 0
  9471   000008                     _HighRSI:
  9472                           	callstack 21
  9473                           
  9474                           ;incstack = 0
  9475   000008  827D               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  9476   00000A  EF84  F00D         	goto	int_func
  9477                           
  9478                           	psect	intcode_body
  9479   001B08                     __pintcode_body:
  9480                           	callstack 21
  9481   001B08                     int_func:
  9482                           	callstack 21
  9483                           
  9484                           ;main.c: 32:      motor_RFID();
  9485   001B08  B4F2               	btfsc	242,2,c	;volatile
  9486   001B0A  EC45  F00D         	call	_RSI_Timer0	;wreg free
  9487   001B0E  927D               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  9488   001B10  0011               	retfie		f
  9489   001B12                     __end_of_HighRSI:
  9490                           	callstack 0
  9491                           
  9492 ;; *************** function _RSI_Timer0 *****************
  9493 ;; Defined at:
  9494 ;;		line 25 in file "TAD_TIMER.c"
  9495 ;; Parameters:    Size  Location     Type
  9496 ;;		None
  9497 ;; Auto vars:     Size  Location     Type
  9498 ;;		None
  9499 ;; Return value:  Size  Location     Type
  9500 ;;                  1    wreg      void 
  9501 ;; Registers used:
  9502 ;;		wreg, status,2, status,0
  9503 ;; Tracked objects:
  9504 ;;		On entry : 0/0
  9505 ;;		On exit  : 0/0
  9506 ;;		Unchanged: 0/0
  9507 ;; Data sizes:     COMRAM   BANK0   BANK1
  9508 ;;      Params:         0       0       0
  9509 ;;      Locals:         0       0       0
  9510 ;;      Temps:          0       0       0
  9511 ;;      Totals:         0       0       0
  9512 ;;Total ram usage:        0 bytes
  9513 ;; Hardware stack levels used: 1
  9514 ;; This function calls:
  9515 ;;		Nothing
  9516 ;; This function is called by:
  9517 ;;		_HighRSI
  9518 ;; This function uses a non-reentrant model
  9519 ;;
  9520                           
  9521                           	psect	text52
  9522   001A8A                     __ptext52:
  9523                           	callstack 0
  9524   001A8A                     _RSI_Timer0:
  9525                           	callstack 21
  9526                           
  9527                           ;TAD_TIMER.c: 27:     TMR0=63036;
  9528                           
  9529                           ;incstack = 0
  9530   001A8A  0EF6               	movlw	246
  9531   001A8C  6ED7               	movwf	215,c	;volatile
  9532   001A8E  0E3C               	movlw	60
  9533   001A90  6ED6               	movwf	214,c	;volatile
  9534                           
  9535                           ;TAD_TIMER.c: 28:     TMR0IF=0;
  9536   001A92  94F2               	bcf	4082,2,c	;volatile
  9537                           
  9538                           ;TAD_TIMER.c: 29:     Tics++;
  9539   001A94  0E01               	movlw	1
  9540   001A96  2607               	addwf	_Tics^0,f,c	;volatile
  9541   001A98  0E00               	movlw	0
  9542   001A9A  2208               	addwfc	(_Tics+1)^0,f,c	;volatile
  9543   001A9C  2209               	addwfc	(_Tics+2)^0,f,c	;volatile
  9544   001A9E  220A               	addwfc	(_Tics+3)^0,f,c	;volatile
  9545   001AA0  0012               	return		;funcret
  9546   001AA2                     __end_of_RSI_Timer0:
  9547                           	callstack 0
  9548                           
  9549                           	psect	rparam
  9550   000001                     ___rparam_used  equ	1
  9551   000000                     ___param_bank   equ	0
  9552   000000                     __Lparam        equ	__Lrparam
  9553   000000                     __Hparam        equ	__Hrparam
  9554                           
  9555                           	psect	temp
  9556   00007D                     btemp:
  9557                           	callstack 0
  9558   00007D                     	ds	1
  9559   00007D                     int$flags       set	btemp
  9560   00007E                     wtemp8          set	btemp+1
  9561   00007E                     ttemp5          set	btemp+1
  9562   000081                     ttemp6          set	btemp+4
  9563   000085                     ttemp7          set	btemp+8
  9564                           
  9565                           	psect	idloc
  9566                           
  9567                           ;Config register IDLOC0 @ 0x200000
  9568                           ;	unspecified, using default values
  9569   200000                     	org	2097152
  9570   200000  FF                 	db	255
  9571                           
  9572                           ;Config register IDLOC1 @ 0x200001
  9573                           ;	unspecified, using default values
  9574   200001                     	org	2097153
  9575   200001  FF                 	db	255
  9576                           
  9577                           ;Config register IDLOC2 @ 0x200002
  9578                           ;	unspecified, using default values
  9579   200002                     	org	2097154
  9580   200002  FF                 	db	255
  9581                           
  9582                           ;Config register IDLOC3 @ 0x200003
  9583                           ;	unspecified, using default values
  9584   200003                     	org	2097155
  9585   200003  FF                 	db	255
  9586                           
  9587                           ;Config register IDLOC4 @ 0x200004
  9588                           ;	unspecified, using default values
  9589   200004                     	org	2097156
  9590   200004  FF                 	db	255
  9591                           
  9592                           ;Config register IDLOC5 @ 0x200005
  9593                           ;	unspecified, using default values
  9594   200005                     	org	2097157
  9595   200005  FF                 	db	255
  9596                           
  9597                           ;Config register IDLOC6 @ 0x200006
  9598                           ;	unspecified, using default values
  9599   200006                     	org	2097158
  9600   200006  FF                 	db	255
  9601                           
  9602                           ;Config register IDLOC7 @ 0x200007
  9603                           ;	unspecified, using default values
  9604   200007                     	org	2097159
  9605   200007  FF                 	db	255
  9606                           
  9607                           	psect	config
  9608                           
  9609                           ; Padding undefined space
  9610   300000                     	org	3145728
  9611   300000  FF                 	db	255
  9612                           
  9613                           ;Config register CONFIG1H @ 0x300001
  9614                           ;	Oscillator
  9615                           ;	OSC = HSPLL, HS oscillator, PLL enabled (Clock Frequency = 4 x FOSC1)
  9616                           ;	Fail-Safe Clock Monitor Enable bit
  9617                           ;	FCMEN = 0x0, unprogrammed default
  9618                           ;	Internal/External Oscillator Switchover bit
  9619                           ;	IESO = 0x0, unprogrammed default
  9620   300001                     	org	3145729
  9621   300001  06                 	db	6
  9622                           
  9623                           ;Config register CONFIG2L @ 0x300002
  9624                           ;	Power-up Timer Enable bit
  9625                           ;	PWRT = OFF, PWRT disabled
  9626                           ;	Brown-out Reset Enable bits
  9627                           ;	BOR = OFF, Brown-out Reset disabled in hardware and software
  9628                           ;	Brown-out Reset Voltage bits
  9629                           ;	BORV = 0x3, unprogrammed default
  9630   300002                     	org	3145730
  9631   300002  19                 	db	25
  9632                           
  9633                           ;Config register CONFIG2H @ 0x300003
  9634                           ;	Watchdog Timer Enable bit
  9635                           ;	WDT = OFF, WDT disabled (control is placed on the SWDTEN bit)
  9636                           ;	Watchdog Timer Postscale Select bits
  9637                           ;	WDTPS = 0xF, unprogrammed default
  9638   300003                     	org	3145731
  9639   300003  1E                 	db	30
  9640                           
  9641                           ; Padding undefined space
  9642   300004                     	org	3145732
  9643   300004  FF                 	db	255
  9644                           
  9645                           ;Config register CONFIG3H @ 0x300005
  9646                           ;	CCP2 MUX bit
  9647                           ;	CCP2MX = 0x1, unprogrammed default
  9648                           ;	PORTB A/D Enable bit
  9649                           ;	PBADEN = DIG, PORTB<4:0> pins are configured as digital I/O on Reset
  9650                           ;	Low-Power Timer1 Oscillator Enable bit
  9651                           ;	LPT1OSC = 0x0, unprogrammed default
  9652                           ;	MCLR Pin Enable bit
  9653                           ;	MCLRE = ON, MCLR pin enabled; RE3 input pin disabled
  9654   300005                     	org	3145733
  9655   300005  81                 	db	129
  9656                           
  9657                           ;Config register CONFIG4L @ 0x300006
  9658                           ;	Stack Full/Underflow Reset Enable bit
  9659                           ;	STVREN = 0x1, unprogrammed default
  9660                           ;	Single-Supply ICSP Enable bit
  9661                           ;	LVP = OFF, Single-Supply ICSP disabled
  9662                           ;	Boot Block Size Select bits
  9663                           ;	BBSIZ = 0x0, unprogrammed default
  9664                           ;	Extended Instruction Set Enable bit
  9665                           ;	XINST = 0x0, unprogrammed default
  9666                           ;	Background Debugger Enable bit
  9667                           ;	DEBUG = OFF, Background debugger disabled, RB6 and RB7 configured as general purpose I
      +                          /O pins
  9668   300006                     	org	3145734
  9669   300006  81                 	db	129
  9670                           
  9671                           ; Padding undefined space
  9672   300007                     	org	3145735
  9673   300007  FF                 	db	255
  9674                           
  9675                           ;Config register CONFIG5L @ 0x300008
  9676                           ;	unspecified, using default values
  9677                           ;	Code Protection bit
  9678                           ;	CP0 = 0x1, unprogrammed default
  9679                           ;	Code Protection bit
  9680                           ;	CP1 = 0x1, unprogrammed default
  9681   300008                     	org	3145736
  9682   300008  03                 	db	3
  9683                           
  9684                           ;Config register CONFIG5H @ 0x300009
  9685                           ;	unspecified, using default values
  9686                           ;	Boot Block Code Protection bitProtect Boot
  9687                           ;	CPB = 0x1, unprogrammed default
  9688                           ;	Data EEPROM Code Protection bit
  9689                           ;	CPD = 0x1, unprogrammed default
  9690   300009                     	org	3145737
  9691   300009  C0                 	db	192
  9692                           
  9693                           ;Config register CONFIG6L @ 0x30000A
  9694                           ;	unspecified, using default values
  9695                           ;	Write Protection bit
  9696                           ;	WRT0 = 0x1, unprogrammed default
  9697                           ;	Write Protection bit
  9698                           ;	WRT1 = 0x1, unprogrammed default
  9699   30000A                     	org	3145738
  9700   30000A  03                 	db	3
  9701                           
  9702                           ;Config register CONFIG6H @ 0x30000B
  9703                           ;	unspecified, using default values
  9704                           ;	Configuration Register Write Protection bit
  9705                           ;	WRTC = 0x1, unprogrammed default
  9706                           ;	Boot Block Write Protection bit
  9707                           ;	WRTB = 0x1, unprogrammed default
  9708                           ;	Data EEPROM Write Protection bit
  9709                           ;	WRTD = 0x1, unprogrammed default
  9710   30000B                     	org	3145739
  9711   30000B  E0                 	db	224
  9712                           
  9713                           ;Config register CONFIG7L @ 0x30000C
  9714                           ;	unspecified, using default values
  9715                           ;	Table Read Protection bit
  9716                           ;	EBTR0 = 0x1, unprogrammed default
  9717                           ;	Table Read Protection bit
  9718                           ;	EBTR1 = 0x1, unprogrammed default
  9719   30000C                     	org	3145740
  9720   30000C  03                 	db	3
  9721                           
  9722                           ;Config register CONFIG7H @ 0x30000D
  9723                           ;	unspecified, using default values
  9724                           ;	Boot Block Table Read Protection bit
  9725                           ;	EBTRB = 0x1, unprogrammed default
  9726   30000D                     	org	3145741
  9727   30000D  40                 	db	64
  9728                           tosu	equ	0xFFF
  9729                           tosh	equ	0xFFE
  9730                           tosl	equ	0xFFD
  9731                           stkptr	equ	0xFFC
  9732                           pclatu	equ	0xFFB
  9733                           pclath	equ	0xFFA
  9734                           pcl	equ	0xFF9
  9735                           tblptru	equ	0xFF8
  9736                           tblptrh	equ	0xFF7
  9737                           tblptrl	equ	0xFF6
  9738                           tablat	equ	0xFF5
  9739                           prodh	equ	0xFF4
  9740                           prodl	equ	0xFF3
  9741                           indf0	equ	0xFEF
  9742                           postinc0	equ	0xFEE
  9743                           postdec0	equ	0xFED
  9744                           preinc0	equ	0xFEC
  9745                           plusw0	equ	0xFEB
  9746                           fsr0h	equ	0xFEA
  9747                           fsr0l	equ	0xFE9
  9748                           wreg	equ	0xFE8
  9749                           indf1	equ	0xFE7
  9750                           postinc1	equ	0xFE6
  9751                           postdec1	equ	0xFE5
  9752                           preinc1	equ	0xFE4
  9753                           plusw1	equ	0xFE3
  9754                           fsr1h	equ	0xFE2
  9755                           fsr1l	equ	0xFE1
  9756                           bsr	equ	0xFE0
  9757                           indf2	equ	0xFDF
  9758                           postinc2	equ	0xFDE
  9759                           postdec2	equ	0xFDD
  9760                           preinc2	equ	0xFDC
  9761                           plusw2	equ	0xFDB
  9762                           fsr2h	equ	0xFDA
  9763                           fsr2l	equ	0xFD9
  9764                           status	equ	0xFD8

Data Sizes:
    Strings     375
    Constant    29
    Data        40
    BSS         231
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     34     124
    BANK0           128      0     101
    BANK1           256      0      80

Pointer List with Targets:

    getActualLeds@leds	PTR unsigned char  size(1) Largest target is 6
		 -> ActualLeds(BANK0[6]), printfUID@leds(COMRAM[6]), 

    getActualUID@UID	PTR unsigned char  size(1) Largest target is 5
		 -> motor_RFID@currentUser(COMRAM[5]), motorTerminal@currentUser(BANK0[5]), 

    motor_StartSendString@str	PTR const unsigned char  size(2) Largest target is 95
		 -> printfUID@buffer(BANK1[80]), STR_1(CODE[30]), STR_10(CODE[18]), STR_12(CODE[3]), 
		 -> STR_13(CODE[33]), STR_14(CODE[33]), STR_2(CODE[18]), STR_3(CODE[53]), 
		 -> STR_4(CODE[95]), STR_5(CODE[3]), STR_6(CODE[33]), STR_8(CODE[33]), 
		 -> STR_9(CODE[3]), 

    printfUID@currentUser	PTR unsigned char  size(1) Largest target is 5
		 -> currentUser(COMRAM[5]), motorTerminal@currentUser(BANK0[5]), 

    printfUID@extraString	PTR const unsigned char  size(2) Largest target is 21
		 -> STR_11(CODE[8]), STR_15(CODE[21]), STR_7(CODE[8]), 

    printfUID@ptr	PTR unsigned char  size(2) Largest target is 80
		 -> printfUID@buffer(BANK1[80]), 

    processBit@bit_count	PTR unsigned char  size(1) Largest target is 1
		 -> motor_Read@bit_count(COMRAM[1]), motor_Write@bit_count(COMRAM[1]), 

    processBit@state	PTR unsigned char  size(1) Largest target is 1
		 -> state_read(COMRAM[1]), state_write(COMRAM[1]), 

    processBit@val	PTR unsigned char  size(1) Largest target is 1
		 -> motor_Read@ucAddr(COMRAM[1]), motor_Write@ucAddr(COMRAM[1]), motor_Write@ucValue(COMRAM[1]), 

    saveHourToData@hour	PTR unsigned char  size(1) Largest target is 4
		 -> motorTerminal@hour(BANK0[4]), 

    str_ptr	PTR const unsigned char  size(2) Largest target is 95
		 -> printfUID@buffer(BANK1[80]), STR_1(CODE[30]), STR_10(CODE[18]), STR_12(CODE[3]), 
		 -> STR_13(CODE[33]), STR_14(CODE[33]), STR_2(CODE[18]), STR_3(CODE[53]), 
		 -> STR_4(CODE[95]), STR_5(CODE[3]), STR_6(CODE[33]), STR_8(CODE[33]), 
		 -> STR_9(CODE[3]), NULL(NULL[0]), 

    TI_NewTimer@TimerHandle	PTR unsigned char  size(1) Largest target is 1
		 -> card_timer(COMRAM[1]), timer(COMRAM[1]), Timer(COMRAM[1]), timer@TAD_TECLADO$F744(COMRAM[1]), 


Critical Paths under _main in COMRAM

    _main->_motor_datos
    _motor_datos->_LcPutChar
    _LcPutChar->_LcGotoXY
    _CantaData->_CantaPartAlta
    _CantaData->_CantaPartBaixa
    _motor_RFID->_motor_setCurrentUser
    _motor_setCurrentUser->_printfUID
    _motor_LEDs->_TI_GetTics
    _motorTerminal->_printfUID
    _printfUID->_motor_StartSendString
    _motor_SendString->_motor_SendChar
    _motor_SendChar->_Terminal_TXAvailable
    _Terminal_SendChar->_Terminal_TXAvailable
    _motorTeclado->_TI_GetTics
    _setLed->_setLEDIntensity
    _initTeclado->_TI_NewTimer
    _initRFID->_motor_Read
    _motor_Write->_processBit
    _motor_Read->_processBit
    _processBit->_delay_us
    _initLeds->_TI_NewTimer
    _LcInit->_Espera
    _WaitForBusy->_Espera
    _Espera->_TI_GetTics
    _CantaIR->_CantaPartAlta
    _CantaIR->_CantaPartBaixa

Critical Paths under _LowRSI in COMRAM

    None.

Critical Paths under _HighRSI in COMRAM

    None.

Critical Paths under _main in BANK0

    None.

Critical Paths under _LowRSI in BANK0

    None.

Critical Paths under _HighRSI in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _LowRSI in BANK1

    None.

Critical Paths under _HighRSI in BANK1

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0   10297
                             _LcInit
                            _TI_Init
                      _Terminal_Init
                           _initData
                           _initLeds
                          _initPorts
                           _initRFID
                        _initTeclado
                       _motorTeclado
                      _motorTerminal
                         _motor_LEDs
                         _motor_RFID
                        _motor_datos
 ---------------------------------------------------------------------------------
 (1) _motor_datos                                          3     3      0    1326
                                             31 COMRAM     3     3      0
                          _LcPutChar
 ---------------------------------------------------------------------------------
 (2) _LcPutChar                                            1     1      0    1212
                                             30 COMRAM     1     1      0
                          _CantaData
                           _LcGotoXY
                        _WaitForBusy
 ---------------------------------------------------------------------------------
 (3) _LcGotoXY                                             8     7      1     732
                                             22 COMRAM     8     7      1
                            _CantaIR
                        _WaitForBusy
 ---------------------------------------------------------------------------------
 (3) _CantaData                                            1     1      0     290
                                              3 COMRAM     1     1      0
                      _CantaPartAlta
                     _CantaPartBaixa
 ---------------------------------------------------------------------------------
 (1) _motor_RFID                                           5     5      0    3242
                                             28 COMRAM     5     5      0
                         _TI_GetTics
                       _TI_ResetTics
                       _getActualUID
                _getCurrentUserIndex
                         _motor_Read
                        _motor_Write
               _motor_setCurrentUser
                           _setIndex
 ---------------------------------------------------------------------------------
 (2) _setIndex                                             1     1      0      29
                                              1 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _motor_setCurrentUser                                 5     1      4    2096
                                             23 COMRAM     5     1      4
                          _printfUID
 ---------------------------------------------------------------------------------
 (1) _motor_LEDs                                          11    11      0     852
                                             14 COMRAM    11    11      0
                         _TI_GetTics
                       _TI_ResetTics
                         _controlLED
                      _getActualLeds
 ---------------------------------------------------------------------------------
 (2) _controlLED                                           4     3      1     186
                                              1 COMRAM     4     3      1
 ---------------------------------------------------------------------------------
 (1) _motorTerminal                                        2     2      0    2284
                                             23 COMRAM     2     2      0
               _Terminal_RXAvailable
               _Terminal_ReceiveChar
                  _Terminal_SendChar
                       _getActualUID
                _getCurrentUserIndex
                   _motor_SendString
              _motor_StartSendString
                          _printfUID
                     _saveHourToData
 ---------------------------------------------------------------------------------
 (2) _saveHourToData                                       2     1      1     135
                                              1 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (3) _printfUID                                           16    12      4    1507
                                              7 COMRAM    16    12      4
                      _getActualLeds
              _motor_StartSendString
 ---------------------------------------------------------------------------------
 (4) _motor_StartSendString                                2     0      2      64
                                              5 COMRAM     2     0      2
                   _motor_SendString
 ---------------------------------------------------------------------------------
 (5) _motor_SendString                                     0     0      0      29
                     _motor_SendChar
 ---------------------------------------------------------------------------------
 (6) _motor_SendChar                                       1     1      0      29
                                              4 COMRAM     1     1      0
               _Terminal_TXAvailable
 ---------------------------------------------------------------------------------
 (4) _getActualLeds                                        4     2      2     294
                                              1 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (2) _getCurrentUserIndex                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _getActualUID                                         5     3      2     386
                                              1 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (2) _Terminal_SendChar                                    1     1      0      29
                                              4 COMRAM     1     1      0
               _Terminal_TXAvailable
 ---------------------------------------------------------------------------------
 (7) _Terminal_TXAvailable                                 3     1      2       0
                                              1 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (2) _Terminal_ReceiveChar                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Terminal_RXAvailable                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _motorTeclado                                         0     0      0     317
                           _GetTecla
                         _TI_GetTics
                       _TI_ResetTics
                  _hashtag_pressed3s
                             _setLed
                      _writeColumnas
 ---------------------------------------------------------------------------------
 (2) _writeColumnas                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _setLed                                               1     1      0     206
                                              4 COMRAM     1     1      0
                    _setLEDIntensity
 ---------------------------------------------------------------------------------
 (3) _setLEDIntensity                                      3     1      2     148
                                              1 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (2) _hashtag_pressed3s                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _GetTecla                                             4     4      0      30
                                              1 COMRAM     4     4      0
 ---------------------------------------------------------------------------------
 (1) _initTeclado                                          0     0      0     115
                        _TI_NewTimer
 ---------------------------------------------------------------------------------
 (1) _initRFID                                             1     1      0     799
                                             12 COMRAM     1     1      0
                        _TI_NewTimer
                       _TI_ResetTics
                           _delay_us
                         _motor_Read
                        _motor_Write
 ---------------------------------------------------------------------------------
 (2) _motor_Write                                          2     1      1     256
                                              8 COMRAM     2     1      1
                         _processBit
 ---------------------------------------------------------------------------------
 (2) _motor_Read                                           4     4      0     301
                                              8 COMRAM     4     4      0
                           _delay_us
                         _processBit
 ---------------------------------------------------------------------------------
 (3) _processBit                                           5     1      4     196
                                              3 COMRAM     5     1      4
                           _delay_us
 ---------------------------------------------------------------------------------
 (4) _delay_us                                             2     2      0      52
                                              1 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _initPorts                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initLeds                                             0     0      0     115
                        _TI_NewTimer
 ---------------------------------------------------------------------------------
 (1) _initData                                             4     4      0     294
                                              1 COMRAM     4     4      0
 ---------------------------------------------------------------------------------
 (1) _Terminal_Init                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _TI_Init                                              1     1      0      68
                                              1 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _LcInit                                               4     3      1     885
                                             22 COMRAM     4     3      1
                            _CantaIR
                 _EscriuPrimeraOrdre
                             _Espera
                        _TI_NewTimer
                        _WaitForBusy
 ---------------------------------------------------------------------------------
 (3) _WaitForBusy                                          1     1      0     161
                             _Espera
 ---------------------------------------------------------------------------------
 (4) _Espera                                               8     4      4     161
                                             14 COMRAM     8     4      4
                         _TI_GetTics
                       _TI_ResetTics
 ---------------------------------------------------------------------------------
 (5) _TI_ResetTics                                         1     1      0      29
                                              1 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (5) _TI_GetTics                                          13     9      4      52
                                              1 COMRAM    13     9      4
 ---------------------------------------------------------------------------------
 (2) _TI_NewTimer                                          3     2      1     115
                                              1 COMRAM     3     2      1
 ---------------------------------------------------------------------------------
 (2) _EscriuPrimeraOrdre                                   2     2      0      60
                                              1 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (4) _CantaIR                                              1     1      0     290
                                              3 COMRAM     1     1      0
                      _CantaPartAlta
                     _CantaPartBaixa
 ---------------------------------------------------------------------------------
 (5) _CantaPartBaixa                                       2     2      0     116
                                              1 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (5) _CantaPartAlta                                        2     2      0     116
                                              1 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (8) _LowRSI                                               1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (9) _HighRSI                                              0     0      0       0
                         _RSI_Timer0
 ---------------------------------------------------------------------------------
 (10) _RSI_Timer0                                          0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _LcInit
     _CantaIR
       _CantaPartAlta
       _CantaPartBaixa
     _EscriuPrimeraOrdre
     _Espera
       _TI_GetTics
       _TI_ResetTics
     _TI_NewTimer
     _WaitForBusy
       _Espera
   _TI_Init
   _Terminal_Init
   _initData
   _initLeds
     _TI_NewTimer
   _initPorts
   _initRFID
     _TI_NewTimer
     _TI_ResetTics
     _delay_us
     _motor_Read
       _delay_us
       _processBit
         _delay_us
     _motor_Write
       _processBit
   _initTeclado
     _TI_NewTimer
   _motorTeclado
     _GetTecla
     _TI_GetTics
     _TI_ResetTics
     _hashtag_pressed3s
     _setLed
       _setLEDIntensity
     _writeColumnas
   _motorTerminal
     _Terminal_RXAvailable
     _Terminal_ReceiveChar
     _Terminal_SendChar
       _Terminal_TXAvailable
     _getActualUID
     _getCurrentUserIndex
     _motor_SendString
       _motor_SendChar
         _Terminal_TXAvailable
     _motor_StartSendString
       _motor_SendString
     _printfUID
       _getActualLeds
       _motor_StartSendString
     _saveHourToData
   _motor_LEDs
     _TI_GetTics
     _TI_ResetTics
     _controlLED
     _getActualLeds
   _motor_RFID
     _TI_GetTics
     _TI_ResetTics
     _getActualUID
     _getCurrentUserIndex
     _motor_Read
     _motor_Write
     _motor_setCurrentUser
       _printfUID
     _setIndex
   _motor_datos
     _LcPutChar
       _CantaData
         _CantaPartAlta
         _CantaPartBaixa
       _LcGotoXY
         _CantaIR
         _WaitForBusy
       _WaitForBusy

 _LowRSI (ROOT)

 _HighRSI (ROOT)
   _RSI_Timer0

Address spaces:
Name               Size   Autos  Total    Usage
BIGRAM             511      0       0      0.0%
BITBANK1           256      0       0      0.0%
BANK1              256      0      80     31.2%
BITBANK0           128      0       0      0.0%
BANK0              128      0     101     78.9%
BITCOMRAM          126      0       0      0.0%
COMRAM             126     34     124     98.4%
BITBIGSFRh          82      0       0      0.0%
BITBIGSFRlh         23      0       0      0.0%
BITBIGSFRllh        16      0       0      0.0%
BITBIGSFRlll         2      0       0      0.0%
STACK                0      0       0      0.0%
DATA                 0      0     305      0.0%


Microchip Technology PIC18 Macro Assembler V3.00 build 20241204225717 
Symbol Table                                                                                   Fri Mar 28 17:52:52 2025

                     setIndex@indexActual 0056                    _timer@TAD_TECLADO$F744 004A  
                   ?_Terminal_ReceiveChar 0055                                _RSI_Timer0 1A8A  
                setLEDIntensity@intensity 0057                                _TI_GetTics 17C8  
                                      bsr 0FE0                               _state_write 0051  
                                     l121 122C                                       l212 0EFE  
                                     l214 0F48                                       l128 126C  
                                     l252 1A7E                                       l408 018A  
                                     l425 022C                                       l291 10C6  
                                     l268 14E0                                       l550 1A56  
                                     l296 111E                                       l465 0406  
                                     l556 1614                                       l557 1646  
                                     l645 1A22                                       l567 0CF2  
                                     l832 1150                                       l842 11E2  
                                     l757 173C                                       l837 117C  
                                     l782 1700                                       l768 14B6  
                                     l769 14A0                                       u610 12EA  
                                     u630 1304                                       u608 12D4  
                                     u570 12BC                                       u628 12EC  
                                     u590 12D2                                       u648 1306  
                                     u588 12BE                              printfUID@hex 1E6B  
                            printfUID@val 0068                          ??_CantaPartBaixa 0056  
                            printfUID@ptr 006A                                       prod 0FF3  
                                     wreg 0FE8                      printfUID@extraString 005E  
                                    l4005 1728                                      l2261 1626  
                                    l3301 1702                                      l3223 1898  
                                    l2255 1618                                      l3231 13FE  
                                    l4033 1762                                      l2257 161C  
                                    l3401 06DA                                      l4019 173E  
                                    l2259 1620                                      l2267 162A  
                                    l4043 0CE0                                      l3243 142C  
                                    l3235 1402                                      l4203 0AA2  
                                    l3331 123C                                      l3323 1216  
                                    l3309 1A80                                      l4109 0D9A  
                                    l4053 0CFE                                      l3253 145E  
                                    l4213 0AC0                                      l4141 09BE  
                                    l4301 00DA                                      l3341 1274  
                                    l4071 0D28                                      l4047 0CEC  
                                    l4119 0DAC                                      l3247 145A  
                                    l4223 0AF0                                      l4127 098C  
                                    l4303 00E8                                      l3335 124C  
                                    l3343 128A                                      l3319 1208  
                                    l4065 0D1A                                      l3425 0758  
                                    l3433 0788                                      l3601 17A6  
                                    l4401 024A                                      l4075 0D30  
                                    l4059 0D0C                                      l3291 16DC  
                                    l4171 0A2E                                      l4411 026A  
                                    l4315 0106                                      l4307 00F2  
                                    l3621 14F8                                      l4093 0D64  
                                    l4077 0D34                                      l3517 0934  
                                    l3453 07DA                                      l4229 0AFE  
                                    l4173 0A3A                                      l4157 09F6  
                                    l4149 09DA                                      l4421 02A8  
                                    l4413 0296                                      l4341 0170  
                                    l4333 013E                                      l4317 0114  
                                    l3543 185A                                      l3703 1122  
                                    l3623 150E                                      l4095 0D6A  
                                    l3391 06B2                                      l4239 0B1C  
                                    l4255 0B62                                      l3607 17BA  
                                    l4423 0318                                      l4177 0A42  
                                    l3801 0C28                                      l4441 0358  
                                    l4337 0150                                      l4329 012E  
                             _TI_NewTimer 1856                                      l3547 1864  
                                    l3651 108E                                      l3635 1530  
                                    l4099 0D76                                      l3723 1482  
                                    l3491 088E                                      l3395 06BC  
                                    l4195 0A8E                                      l4187 0A76  
                                    l4531 045A                                      l4515 0432  
                                    l4507 0416                                      l4451 0378  
                                    l4427 0328                                      l4363 01B6  
                                    l4355 019A                                      l4339 0162  
                                    l4291 00A8                                      l4283 007E  
                                    l4275 0066                                      l4267 0048  
                                    l3571 133E                                      l3637 1544  
                                    l3733 14A2                                      l3469 0848  
                                    l4189 0A7C                                      l3813 0C54  
                                    l4621 05BC                                      l4533 0468  
                                    l4429 033E                                      l4381 01EE  
                                    l4365 01C4                                      l4293 00BA  
                                    l3573 134A                                      l3743 14B8  
                                    l3831 0C8E                                      l3815 0C58  
                                    l4615 059E                                      l4607 0596  
                                    l4543 048E                                      l4519 0440  
                                    l4463 0388                                      l4383 01F8  
                                    l4367 01CE                                      l3591 137E  
                                    l3583 1364                                      l3665 10AC  
                                    l3921 0FC0                                      l4561 04D6  
                                    l4481 03C0                                      l4465 0396  
                                    l4449 036A                                      l4385 0206  
                                    l4633 067A                                      l3585 1370  
                                    l4705 1198                                      l3827 0C84  
                                    l3771 0BC2                                      l3843 0CA8  
                                    l4555 04BE                                      l4395 0232  
                                    l4715 11AE                                      l4723 11E8  
                                    l3693 1116                                      l3669 10B0  
                                    l3925 0FD6                                      l4653 0F26  
                                    l3829 0C88                                      l3845 0CD4  
                                    l3757 0BA6                                      l4629 05C8  
                                    l4581 0534                                      l4549 04A6  
                                    l4493 03F6                                      l4485 03D2  
                                    l4477 03B0                                      l3943 104A  
                                    l3855 1966                                      l3599 1796  
                                    l4671 0F8C                                      l3783 0BEC  
                                    l4591 055C                                      l4575 0520  
                                    l4567 04EE                                      l4735 183E  
                                    l3881 19AC                                      l4665 0F4A  
                                    l4657 0F3E                                      l3785 0BF0  
                                    l4593 0562                                      l4489 03E4  
                                    l3787 0BF4                                      l4587 0550  
                                    l3893 192C                                      l3869 1AA4  
                                    l4677 113A                                      l3967 0DF8  
                                    l3799 0C24                                      l4687 115E  
                                    l4699 117E                                      STR_1 1FA0  
                                    STR_2 1FD3                                      STR_3 1EE7  
                                    STR_4 1E88                                      STR_5 1FE2  
                                    STR_6 1F3D                                      STR_7 1FF7  
                                    STR_8 1F1C                                      STR_9 1FE2  
                                    _LATA 0F89                                      u2310 15E6  
                                    u2240 1AC0                                      _LATD 0F8C  
                                    u2330 1600                                      u2410 159C  
                                    u2308 15D0                                      u2270 15B8  
                                    u2350 1554                                      u3310 0FE6  
                                    u2430 1422                                      u4110 0516  
                                    u2328 15E8                                      u2408 1584  
                                    u3320 0FF6                                      u2248 1AC2  
                                    u4120 0518                                      u2290 15CE  
                                    u2370 156A                                      u3330 1006  
                                    u3250 1B04                                      u2450 144C  
                                    u2610 06A4                                      u2348 1602  
                                    u2428 159E                                      u3340 1016  
                                    u2437 1418                                      u2390 1582  
                                    u3350 1026                                      u3510 0D94  
                                    u2288 15BA                                      u2368 1556  
                                    u3360 1036                                      u4160 0556  
                                    u4320 1146                                      u2457 1442  
                                    u2570 1680                                      u4250 0F1E  
                                    u2388 156C                                      u3390 0EC0  
                                    u3480 0D56                                      u3560 09A0  
                                    u3800 00EE                                      u3570 09A6  
                                    u2588 1682                                      u2940 10D8  
                                    u2948 10DA                                      u3790 009C  
                                    _TMR0 0FD6                  setLEDIntensity@userIndex 0058  
                              _ActualLeds 00B8                                      _Tics 0007  
                                    _Rows 003F                          motor_datos@state 0019  
                                    _main 1814                             printfUID@leds 0062  
                                    fsr1h 0FE2                                      fsr2h 0FDA  
                                    indf1 0FE7                                      indf2 0FDF  
                                    fsr1l 0FE1                                      fsr2l 0FD9  
                                    btemp 007D                           __end_of_TI_Init 1954  
                                    prodh 0FF4                                      prodl 0FF3  
                                    start 0026                           __end_of_CantaIR 192A  
                         __end_of_HighRSI 1B12                             LcInit@columns 006B  
                            ___param_bank 0000                              ?_initTeclado 0055  
                         motor_LEDs@i_461 006D                             processBit@val 0058  
                             Espera@Timer 0063                                     ?_main 0055  
                                   STR_10 1FE5                                     STR_11 1FF7  
                                   STR_12 1FE2                                     STR_13 1F7F  
                                   STR_14 1F5E                                     STR_15 1FBE  
                                   _T0CON 0FD5                                     _RCREG 0FAE  
                                   _RCSTA 0FAB                                     _SPBRG 0FAF  
                                   _PORTD 0F83                                     _TRISA 0F92  
                                   _TRISD 0F95                                     _TRISE 0F96  
                                   _TXREG 0FAD                                     _TXSTA 0FAC  
                    __end_of_getActualUID 14DC                                     _Filas 0026  
                  ??_motor_setCurrentUser 0070                                     _Timer 0054  
                         motor_RFID@irqEn 0038                                     _index 007C  
                         motor_RFID@unLen 0011                              _TI_ResetTics 19CA  
                                   _tecla 0024                           motor_RFID@value 0027  
                      getActualLeds@i_895 0059                           motor_RFID@state 003A  
                                   _timer 0053                                     _state 0023  
                     motor_Read@bit_count 004C                                     tablat 0FF5  
                                   ttemp5 007E                                     ttemp6 0081  
                                   ttemp7 0085                            _saveHourToData 19A4  
                                   status 0FD8                                     wtemp8 007E  
                      Terminal_SendChar@c 0059                          __end_of_LcGotoXY 12A0  
                        __end_of_GetTecla 1670                   EscriuPrimeraOrdre@ordre 0057  
                  ??_Terminal_ReceiveChar 0056                           __initialization 138A  
                            __end_of_main 1856                               ?_RSI_Timer0 0055  
                          TI_Init@counter 0056                               ?_TI_GetTics 0056  
                   _motor_StartSendString 1A2A                            _controlLED$455 0057  
                                  ??_main 0077                             __activetblptr 0002  
                motor_setCurrentUser@UID0 0070                  motor_setCurrentUser@UID1 006C  
                motor_setCurrentUser@UID2 006D                  motor_setCurrentUser@UID3 006E  
                motor_setCurrentUser@UID4 006F                                    _ADCON1 0FC1  
                               ??_TI_Init 0056                    __end_of_saveHourToData 19CA  
                               ??_CantaIR 0058                            LcGotoXY@Fisics 0070  
                          LcGotoXY@Column 0072                             ??_WaitForBusy 006B  
                                  _TMR0IF 7F92                                 ??_HighRSI 0055  
                                  _LcInit 0DD4                     __end_of_getActualLeds 1726  
                        __end_of_delay_us 1A8A                            getActualLeds@i 0058  
                                  _Espera 1892                                    _LowRSI 0018  
                            _LcGotoXY$404 006E                                    _RowAct 003D  
                                  _Timers 009E                        motor_datos@pointer 0018  
                        __end_of_initRFID 106A                        motorTerminal@index 001E  
                        __end_of_initData 177A                          __end_of_initLeds 1AFC  
                         _motor_datos$914 0074                        motorTerminal@state 001F  
                                  _keymap 1E7C                                    clear_0 13D0  
                                  clear_1 13DC                                    clear_2 13E8  
                                  _setLed 1954                           printfUID@buffer 0100  
                            ?_motor_Write 005D                                    isa$std 0001  
                            ?_motor_datos 0055                          __end_of_setIndex 1B1A  
                            __pdataCOMRAM 0077                              __mediumconst 1E6A  
                         _setLEDIntensity 197C                                    tblptrh 0FF7  
                                  tblptrl 0FF6                                    tblptru 0FF8  
                       __end_of_CantaData 18F8                     __end_of_Terminal_Init 1AEE  
                         ?_saveHourToData 0056                                __accesstop 0080  
                 __end_of__initialization 13EE                         __end_of_LcPutChar 138A  
                         delay_us@howMany 0056                             ___rparam_used 0001  
                           setLed@modeLED 0016                            __pcstackCOMRAM 0055  
                     __end_of_WaitForBusy 1ADE                              __pidataBANK0 19EE  
                  ?_motor_StartSendString 005A                      TI_NewTimer@Comptador 0058  
                    motor_RFID@card_timer 002B               motor_RFID@operation_pending 0029  
                        _motor_SendString 13FC                       processBit@bit_count 0059  
                               ?_LcGotoXY 006B                                 ?_GetTecla 0055  
                            ?_TI_NewTimer 0056                                __pbssBANK0 0080  
                              __pbssBANK1 0100                                _card_timer 0050  
                             setLed@tecla 0059                     __end_of_motorTerminal 0BA2  
                                 ?_LcInit 006B                             _CantaPartAlta 15AC  
                  TI_NewTimer@TimerHandle 0056                                   ?_Espera 0063  
                                 ?_LowRSI 0055                              _getActualUID 146E  
                         processBit@state 005A                   TI_ResetTics@TimerHandle 0056  
                           _writeColumnas 1A42                                   _BAUDCON 0FB8  
                                 ?_setLed 0055                   __end_of_setLEDIntensity 19A4  
                          _sending_string 0020                           motor_SendChar@c 0059  
                                 LcInit@i 006D                                ??_LcGotoXY 006C  
                               ?_delay_us 0055                           getActualUID@UID 0056  
                              ??_GetTecla 0056                         _Terminal_SendChar 1AA2  
                                 _TI_Init 192A                        ?_Terminal_SendChar 0055  
                                 _CantaIR 18F8                                 ?_initRFID 0055  
                               ?_initData 0055  motor_setCurrentUser@state_setCurrentUser 001A  
                               ?_initLeds 0055                                   _HighRSI 0008  
                              _controlLED 177A                      motor_RFID@last_state 002A  
                             _WaitForBusy 1ACA                            ?_CantaPartAlta 0055  
                                 _Columns 003E                       motor_datos@lastChar 0017  
                       motor_RFID@TagType 0033                       ??_Terminal_SendChar 0059  
                               ?_setIndex 0055                                   __Hparam 0000  
                                 __Lparam 0000                              ??_RSI_Timer0 0055  
                          ?_writeColumnas 0055                              ??_TI_GetTics 005A  
                       motor_RFID@allZero 0031                                   __pcinit 138A  
                                 __ramtop 0200                         motor_RFID@_status 0034  
                                 __ptext0 1814                                   __ptext1 1138  
                                 __ptext2 1316                                   __ptext3 1204  
                                 __ptext4 18C6                                   __ptext5 002A  
                                 __ptext6 1B12                                   __ptext7 0BA2  
                                 __ptext8 0EC2                                   __ptext9 177A  
                           ?_motorTeclado 0055                       motorTerminal@opcion 006C  
                               CantaIR@IR 0058                         __end_of_initPorts 1B22  
               __end_of_Terminal_SendChar 1AB6                         motor_RFID@waitIRq 0037  
                motorTerminal@currentUser 00BE                                ??_delay_us 0056  
                     _getCurrentUserIndex 1B2E                                   _str_ptr 000F  
                          __pintcode_body 1B08                               motor_LEDs@i 006C  
                    end_of_initialization 13EE                               motor_RFID@i 0035  
                             motor_RFID@n 0036                          controlLED@estado 0056  
                              ??_initRFID 0061                                ??_initData 0056  
                      __end_of_RSI_Timer0 1AA2                                ??_initLeds 0059  
                           __Lmediumconst 1E6A                                   int_func 1B08  
                      __end_of_TI_GetTics 1814                        saveHourToData@hour 0056  
                         motor_Write@addr 005E                                ??_setIndex 0056  
                       __end_of_printfUID 0978                      ?_getCurrentUserIndex 0055  
                              _motor_LEDs 0EC2                                _motor_RFID 002A  
                                 postdec1 0FE5                                _motor_Read 106A  
                                 postinc0 0FEE                                   postinc2 0FDE  
                       getActualUID@i_890 005A                         getActualUID@i_889 0058  
                        ?_setLEDIntensity 0056                            ??_motorTeclado 0063  
                               _PORTCbits 0F82                                _processBit 1670  
                   TI_GetTics@TimerHandle 0062                            _motor_RFID$726 0073  
                        ??_saveHourToData 0057                                 _TRISBbits 0F93  
                               _TRISCbits 0F94                                 _TRISEbits 0F96  
                              _state_read 0052                            setLed@ledIndex 0015  
                         ??_CantaPartAlta 0056                               ?_controlLED 0056  
                               _CantaData 18C6                  motor_StartSendString@str 005A  
                __end_of_motor_SendString 146E                     ??_getCurrentUserIndex 0056  
                          __end_of_LcInit 0EC2                       controlLED@ledActual 0059  
                 ??_motor_StartSendString 005C                           ??_writeColumnas 0056  
                               _LcPutChar 1316                            __end_of_Espera 18C6  
                          __end_of_LowRSI 0026              __end_of_Terminal_RXAvailable 1B08  
              __end_of_EscriuPrimeraOrdre 1316                             __pidataCOMRAM 1B22  
               motor_Read@timeout_counter 0013                            _motor_Read$688 005F  
                          motor_RFID@addr 0028                            motor_RFID@flag 0075  
                               _ColumnAct 003C                            __end_of_keymap 1E88  
                          __end_of_setLed 197C                           saveHourToData@i 0057  
                       getActualLeds@leds 0056                     motor_RFID@cardRemoved 002C  
                     start_initialization 138A                            _motor_SendChar 1A10  
                      motor_Read@ucResult 003B              __end_of_Terminal_TXAvailable 1ACA  
                   motor_Read@MAX_TIMEOUT 007A                                ?_CantaData 0055  
                                ??_LcInit 006C                             getActualUID@i 0059  
                                ??_Espera 0067                                  ??_LowRSI 0055  
                              ?_LcPutChar 0055                             initData@i_882 0059  
                             ?_motor_LEDs 0055                             initData@i_884 0058  
                             ?_motor_RFID 0055                         motorTerminal@leds 00B2  
                       motorTerminal@hour 00E1                               ?_motor_Read 0055  
                           ??_initTeclado 0059                               __pdataBANK0 00C3  
                                ??_setLed 0059                               ?_processBit 0058  
                  __end_of_motor_SendChar 1A2A                               __pbssCOMRAM 0001  
                           ?_TI_ResetTics 0055                          motor_Read@ucAddr 004B  
                                ?_TI_Init 0055                                  ?_CantaIR 0055  
                          _CantaPartBaixa 1548                                  ?_HighRSI 0055  
                            ?_WaitForBusy 0055                      __end_of_motorTeclado 0DD4  
                          motor_Read@addr 005E                       motor_RFID@fifoLevel 002E  
                           _getActualLeds 16CC                                 __pintcode 0008  
                           __pmediumconst 1E6A                                 _colValues 0077  
                         CantaPartBaixa@c 0057                               __pintcodelo 0018  
                      motor_Write@ucValue 004D                               __smallconst 1E6A  
                     __end_of_initTeclado 1A72                           ?_motor_SendChar 0055  
           motorTerminal@currentUserIndex 006D                            ??_TI_ResetTics 0056  
                    processBit@next_state 005B                                 _initPorts 1B1A  
                  __end_of_CantaPartBaixa 15AC                             _Terminal_Init 1ADE  
                    _Terminal_RXAvailable 1AFC                        motor_LEDs@lastTics 000B  
                             ??_CantaData 0058                                  _LATBbits 0F8A  
                                _LATCbits 0F8B                                  _LATEbits 0F8D  
                               delay_us@x 0057                      motor_Write@bit_count 004F  
                          ?_getActualLeds 0056                           _hashtag_pressed 0021  
                                _PIR1bits 0F9E                               ??_LcPutChar 0073  
                   motor_RFID@lastBitsVal 002F              __end_of_motor_setCurrentUser 0CD8  
                               _printfUID 068A                             ??_motor_Write 005E  
                    _Terminal_TXAvailable 1AB6                              GetTecla@fila 0059  
                           ??_motor_datos 0074                                 _state_str 0022  
                              printfUID@i 0069                    motor_RFID@tempRegValue 0030  
                                Espera@ms 0065                                  _LcGotoXY 1204  
                   motor_LEDs@currentTics 0068                                  _GetTecla 1610  
            __end_of_Terminal_ReceiveChar 1B36                                ?_initPorts 0055  
                           motor_RFID@UID 0001                            ?_Terminal_Init 0055  
                             LcGotoXY@Row 006B                                 copy_data0 139E  
                               copy_data1 13BE                           ?_CantaPartBaixa 0055  
                                _Columnas 0025                     ?_Terminal_RXAvailable 0055  
                   motor_RFID@currentUser 0045                              ??_controlLED 0057  
                               initData@i 0056                                 initData@j 0057  
                           _motorTerminal 0978                      __end_ofprintfUID@hex 1E7C  
                       ?_motor_SendString 0055                                  __Hrparam 0000  
                      printfUID@userIndex 005D                                  __Lrparam 0000  
                      ??_motor_SendString 005A             __end_of_motor_StartSendString 1A42  
                              ?_printfUID 005C                               _initTeclado 1A5A  
                   ?_Terminal_TXAvailable 0056                   motorTerminal@userNumber 001D  
                      motor_RFID@checksum 0032                        __end_of_controlLED 17C8  
                             _currentTime 00DD                               _currentUser 0040  
                     __end_of_motor_Write 1548                                  _delay_us 1A72  
                     __end_of_motor_datos 1204                                  __ptext10 0978  
                                __ptext11 19A4                        _EscriuPrimeraOrdre 12A0  
                                __ptext20 1AB6                                  __ptext12 068A  
                                __ptext21 1B32                                  __ptext13 1A2A  
                                __ptext30 0F96                                  __ptext22 1AFC  
                                __ptext14 13FC                                  __ptext31 14DC  
                                __ptext23 0CD8                                  __ptext15 1A10  
                                __ptext40 0DD4                                  __ptext32 106A  
                                __ptext24 1A42                                  __ptext16 16CC  
                                __ptext41 1ACA                                  __ptext33 1670  
                                __ptext25 1954                                  __ptext17 1B2E  
                                __ptext42 1892                                  __ptext34 1A72  
                                __ptext26 197C                                  __ptext18 146E  
                                __ptext43 19CA                                  __ptext35 1B1A  
                                __ptext27 1B28                                  __ptext19 1AA2  
                                __ptext52 1A8A                                  __ptext44 17C8  
                                __ptext36 1AEE                                  __ptext28 1610  
                                __ptext45 1856                                  __ptext37 1726  
                                __ptext29 1A5A                                  __ptext46 12A0  
                                __ptext38 1ADE                                  __ptext47 18F8  
                                __ptext39 192A                                  __ptext48 1548  
                                __ptext49 15AC                             ??_TI_NewTimer 0057  
                          CantaPartAlta@c 0057                         motor_Write@ucAddr 004E  
             __end_of_getCurrentUserIndex 1B32                                  _initRFID 0F96  
                                _initData 1726                     getActualUID@userIndex 0057  
                                _initLeds 1AEE                           ??_getActualLeds 0058  
                     ?_EscriuPrimeraOrdre 0055                            ?_motorTerminal 0055  
                   __end_of_CantaPartAlta 1610                             CantaData@Data 0058  
                                _new_user 001B                                  _setIndex 1B12  
                           ?_getActualUID 0056                              ??_motor_LEDs 0063  
                            ??_motor_RFID 0071                                  isa$xinst 0000  
                            ??_motor_Read 005D                      __end_of_TI_ResetTics 19EE  
                                int$flags 007D                     __end_of_writeColumnas 1A5A  
                      motor_RFID@substate 0039                                  _userUIDs 00C3  
                       controlLED@ledBits 00D7                      ??_EscriuPrimeraOrdre 0056  
                              LcInit@rows 006C                              ??_processBit 005C  
                            _motorTeclado 0CD8                                _INTCONbits 0FF2  
                         ??_Terminal_Init 0056                 TI_GetTics@CopiaTicsActual 005E  
                       _new_configuration 001C                               ??_initPorts 0056  
                  ??_Terminal_RXAvailable 0056                            _configurations 0080  
                       _hashtag_pressed3s 1B28                      _motor_setCurrentUser 0BA2  
                      __end_of_motor_LEDs 0F96                        __end_of_motor_RFID 068A  
                  getActualLeds@userIndex 0057                                  intlevel1 0000  
                                intlevel2 0000                        __end_of_motor_Read 1138  
                      ?_hashtag_pressed3s 0055                                LcPutChar@c 0073  
                        motor_Write@value 005D                       __end_of_TI_NewTimer 1892  
                          ??_getActualUID 0058                        __end_of_processBit 16CC  
                     ??_hashtag_pressed3s 0056                    ??_Terminal_TXAvailable 0058  
                            motor_datos@i 0076                      _Terminal_ReceiveChar 1B32  
                             ??_printfUID 0060                          ??_motor_SendChar 0059  
                             _motor_Write 14DC                               _motor_datos 1138  
                  motor_RFID@backBitsCalc 002D                 __end_of_hashtag_pressed3s 1B2E  
                   ?_motor_setCurrentUser 006C                           ??_motorTerminal 006C  
                 setLEDIntensity@ledIndex 0056                      printfUID@currentUser 005C  
                          initRFID@regVal 0061                         ??_setLEDIntensity 0058  
                         GetTecla@columna 0058  
